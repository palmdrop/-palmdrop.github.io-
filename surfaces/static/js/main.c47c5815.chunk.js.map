{"version":3,"sources":["controllers/ControllerAttributes.js","controllers/warp/TextureController.js","controllers/warp/ColorController.js","controllers/warp/RenderController.js","controllers/three/processing/TextureProcessor.js","controllers/three/shaders/NormalMapShader.js","controllers/three/ThreeDController.js","controllers/AnimationManager.js","controllers/GLC.js","GL/shaders/simple.vert","resources/blue-noise/LDR_RGBA_7.png","controllers/warp/WarpAppController.js","GL/shaders/warp.frag","GL/shaders/color.frag","tools/Utils.js","components/indicator/arrow/Arrow.js","resources/icons/github.svg","resources/icons/instagram.svg","resources/icons/email.svg","resources/icons/blog.svg","resources/icons/repository.png","pages/HelpPage.js","context/ControlPanelContext.js","components/control/sidebar/CategoryBar.js","components/input/slider/InputSlider.js","components/input/switch/InputSwitch.js","components/input/color/InputColor.js","components/input/Input.js","components/control/dropdown/InputDropdown.js","components/control/settings/CategorySettings.js","components/control/topbar/Topbar.js","components/data/tooltip/Tooltip.js","components/control/ControlPanel.js","components/input/button/Button.js","components/data/entry/DataEntry.js","components/data/panel/DataPanel.js","App.js","hooks/KeyboardInputHook.js","index.js"],"names":["randomElement","array","Math","floor","random","length","noiseSettings","description","value","frequency","default","min","max","type","octaves","step","marks","lacunarity","persistence","amplitude","modifications","ridgeThreshold","pow","mod","xStretch","yStretch","isUniform","timeSettings","def","getTextureAttributes","scale","actualMax","iterations","warpAmount","animationSpeed","general","source","angleControl","amountControl","componentController","angle","amount","defaults","mult","getColorAttributes","power","hue","saturation","brightness","red","green","blue","hueController","saturationController","brightnessController","getRenderAttributes","resolution","ditheringAmount","multisampling","getAttribute","attributes","location","hasProperty","object","property","Object","prototype","hasOwnProperty","call","subLocations","split","currentAttribute","i","setUniforms","program","GLC","setUniform","attribute","name","setAll","current","forEach","operation","stopCondition","performOperation","resetAttributesToDefault","mergeAttributes","changes","Array","isArray","updated","prop","AttributeController","attributeGetter","this","_attributeGetter","onChange","updateAttributeValue","v","getAttributeValue","getAttributeDefault","_update","TextureController","randomOffset","canvas","initialized","sourceOffset","angleOffset","amountOffset","position","dimensions","window","innerWidth","innerHeight","paused","sourceTime","angleControlTime","amountControlTime","previousResolution","multisamplingMultiplier","multisamplingDimensions","fbo","console","log","setShaderProgram","renderTexture","deleteTexture","deleteFramebuffer","createRenderTexture","width","height","gl","getGL","createTexture","RGBA","RGBA32F","FLOAT","getValue","createFramebuffer","result","_handleUpdate","delta","bindFramebuffer","setViewport","renderFullScreenQuad","ColorController","ditheringTexture","captureNext","dataCallback","time","createImageTexture","REPEAT","NEAREST","setTexture","error","sourceTexture","captureData","toDataURL","RenderController","resizeCallback","floatColorBufferSupported","RGBA8","UNSINGED_BYTE","forceFramebufferSetup","oldWidth","oldHeight","newWidth","newHeight","newDimensions","style","_setupFramebuffer","callback","previousCallback","proportions","TextureProcessor","renderer","texture","passes","camera","THREE","z","scene","background","composer","POSTPROCESSING","frameBufferType","autoRenderToScreen","renderPass","addPass","pass","material","map","plane","quad","x","y","light","add","left","right","top","bottom","updateProjectionMatrix","setSize","render","outputBuffer","NormalMapShader","uniforms","vertexShader","fragmentShader","createLightAttributes","opts","intensity","color","set","distance","decay","ThreeDController","metalness","roughness","bumpScale","normalScale","displacement","displacementScale","displacementBias","smoothness","blurPass","fog","near","far","lighting","ambientLight","directionalLight","pointLight","textureCanvas","antialias","powerPreference","physicallyCorrectLights","controls","TrackballControls","rotationSpeed","dynamicDampingFactor","needsUpdate","magFilter","minFilter","normalMaterial","clientWidth","clientHeight","normalPass","normalMapProducer","kernelSize","MEDIUM","heightMapProducer","normalMap","getProcessedTexture","heightMap","geometry","displacementMap","rotation","PI","EffectComposer","SSAARenderPass","setPixelRatio","devicePixelRatio","handleResize","update","currentSize","getSize","newSize","equals","aspect","AnimationManager","previousMillis","Date","now","animationFrameId","callbacks","running","lastSecond","framesSinceLastSecond","currentFrameRate","frameRateAlpha","averageFrameRate","recording","removeCallback","push","filter","cb","isRunning","requestAnimationFrame","stopRecording","cancelAnimationFrame","frameRate","stop","recordFrame","addFrame","then","downloadBundle","start","GLController","uniformLocations","WeakMap","EXT_color_buffer_float","KHR_parallel_shader_compile","getContext","hasWebGL2","getExtension","hasFloatColorBuffer","maxVertexAttrib","alert","positionLocation","texCoordLocation","setAttribLayout","Float32Array","BYTES_PER_ELEMENT","triangleVertices","quadBuffer","createBuffer","ARRAY_BUFFER","STATIC_DRAW","setQuadAttributeLayout","bufferType","data","drawMode","buffer","bindBuffer","bufferData","colorTexture","fb","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","webGL2Supported","drawBuffers","format","internalFormat","UNSIGNED_BYTE","bindTexture","level","border","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","wrap","filtering","onLoad","onError","image","Image","onload","onerror","sources","programs","vertexSource","fragmentSource","vs","_createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","_createShaderProgram","_compileShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","getShaderInfoLog","compileAndLinkShaders","shader","createShader","shaderSource","compiled","compileShader","createProgram","attachShader","clear","draw","r","g","b","a","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","numberOfVertices","drawArrays","TRIANGLES","viewport","numberOfElements","vertexSize","offset","getAttribLocation","vertexAttribPointer","FALSE","enableVertexAttribArray","currentProgram","useProgram","key","get","getUniformLocation","unit","activeTexture","flush","WAC","controllers","anchored","anchor","previousPosition","AM","RC","TXC","CC","TDC","render3D","updateCallbacks","Map","onUpdate","canvas3D","initialize","Error","quadVertShaderSoruce","textureProgram","colorProgram","createFullScreenQuad","setPaused","getFrameBuffer","getRenderTexture","renderTextureDimensions","getRenderTextureDimensions","getDimensions","setCallback","_render","addCallback","removeAllCallbacks","startRecording","addResizeCallback","captureFrame","isInitialized","speed","updateValue","sourcePosition","_screenSpaceToViewSpace","getPosition","setPosition","viewSpaceOffset","randomize","exported","controllerName","controller","_getController","getAttributes","imported","importedAttributes","oldAttributes","newAttributes","setAttributes","getFrameRate","getAverageFrameRate","getDefault","camelToTitle","camelCase","replace","match","toUpperCase","trim","promptDownload","dataURL","link","document","createElement","href","download","click","isObject","forEachProperty","func","entries","index","round","precision","toFixed","Arrow","direction","className","descriptions","title","content","target","rel","contact","icon","githubIcon","repositoryIcon","instagramIcon","blogIcon","emailIcon","HelpPage","mainTitle","shortcuts","visibility","page","onCloseCallback","useState","currentPage","setCurrentPage","useEffect","handleContentSwitch","getDescriptions","getDescriptionEntry","getContact","category","createEntry","entry","subindex","alt","createCategory","onClick","e","getShortcutEntry","shortcut","formatKey","keys","reduce","acc","getShortcuts","getContent","ControlPanelContext","createContext","ControlPanelUpdateContext","SetHoverCallbackContext","UpdateHoverContext","useControlPanelContext","useContext","useUpdateHoverContext","ControlPanelContextProvider","children","activeCategory","setActiveCategory","categoryData","setCategoryData","useRef","Provider","hoverLocation","CategoryBar","categories","updateActiveCategory","updateHoverLocation","currentTarget","blur","onClickCallback","handleClick","onMouseOver","InputSlider","label","valueGetter","defaultValue","fullName","ref","state","setState","handleChange","handleScroll","event","preventDefault","sign","deltaY","abs","handleDoubleClick","refCopy","addEventListener","removeEventListener","Slider","Switch","checked","size","InputColor","setColor","newColor","Input","refresh","forceRefresh","setUpdateCallback","getter","setter","separator","createColorPicker","createSwitch","createSlider","createInputEntry","InputDropdown","parentName","expanded","setExpanded","getClasses","baseClass","createSection","root","child","CategorySettings","before","after","Topbar","center","Tooltip","setHoverCallback","setHoverLocation","setDescription","lastIndex","lastIndexOf","substr","createTitle","ControlPanel","topbar","showTooltip","Button","activeName","hideName","blurOnClick","radius","active","setActive","newState","borderRadius","DataEntry","setterCallback","initial","setValue","DataPanel","App","props","canvasRef","threeCanvasRef","fileInputRef","useReducer","keyStates","pressedActions","heldActions","onKeyAction","isHeld","setActions","action","useKeyboardInput","setOnPressed","setOnHeld","executeHeldActions","helpVisible","setHelpVisible","tooltipsVisible","setTooltipsVisible","setRender3D","togglePause","changeAnimationSpeed","updateScale","changeScale","handleRecording","set3D","toggle3D","toggleHelp","visible","handleClose","onHeld","handleMovement","handleCanvasDownload","move","clientX","clientY","handleMouseDown","setAnchor","handleMouseReleased","liftAnchor","handleMouseMoved","anchorMove","useLayoutEffect","keyInfo","canvasCopy","captureButton","pauseButton","threeDButton","recordButton","importButton","display","file","files","reader","FileReader","f","importSettings","JSON","parse","readAsText","accept","exportButton","jsonString","encodeURIComponent","downloadJSON","stringify","exportSettings","randomizeButton","helpButton","tooltipButton","createContactButton","open","instagramButton","repositoryButton","emailButton","dataPanel","addUpdateCallback","avgFrameRate","topbarComponents","threeCanvas","three","isActive","createSidebarCategories","ReactDOM","StrictMode","getElementById"],"mappings":"0TAIMA,EAAgB,SAACC,GACnB,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAI5CC,EAAgB,SAACC,GACnB,MAAO,CACHC,MAAO,CACHC,UAAW,CACPD,MAAuB,GAAhBN,KAAKE,SAAiB,IAC7BM,QAAS,EACTC,IAAK,KACLC,IAAK,EACLC,KAAM,KAENN,YAAa,gCAEjBO,QAAS,CACLN,MAAOR,EAAc,CAAC,EAAG,IACzBU,QAAS,EACTG,KAAM,KACNF,IAAK,EACLC,IAAK,EACLG,KAAM,EACNC,MAAO,CAAC,EAAG,EAAG,GAEdT,YAAa,0BAEjBU,WAAY,CACRT,MAAuB,EAAhBN,KAAKE,SAAe,EAC3BM,QAAS,EACTG,KAAM,KACNF,IAAK,GACLC,IAAK,GAELL,YAAa,uCAEjBW,YAAa,CACTV,MAAuB,GAAhBN,KAAKE,SACZM,QAAS,GACTG,KAAM,KACNF,IAAK,GACLC,IAAK,EAELL,YAAa,uCAEjBY,UAAW,CACPX,MAAO,EACPE,QAAS,EACTG,KAAM,KACNF,IAAK,GACLC,IAAK,GAELL,YAAa,sCAEjBa,cAAe,CACXZ,MAAO,CACHa,eAAgB,CACZb,MAAO,EAAIN,KAAKoB,IAAIpB,KAAKE,SAAU,GACnCM,QAAS,EACTG,KAAM,KACNF,IAAK,GACLC,IAAK,EAELL,YAAa,+EAEjBe,IAAK,CACDd,MAAuB,EAAhBN,KAAKE,SAAe,EAC3BM,QAAS,EACTG,KAAM,KACNF,KAAM,EACNC,IAAK,EAELL,YAAa,yCAEjBgB,IAAK,CACDf,MAAO,EACPE,QAAS,EACTG,KAAM,KACNF,IAAK,EACLC,IAAK,EAELL,YAAa,2CAEjBiB,SAAU,CACNhB,MAAO,EACPE,QAAS,EACTG,KAAM,KACNF,IAAK,KACLC,IAAK,GAELL,YAAa,0CAEjBkB,SAAU,CACNjB,MAAO,EACPE,QAAS,EACTG,KAAM,KACNF,IAAK,KACLC,IAAK,GAELL,YAAa,2CAGrBA,YAAa,2DAGrBmB,WAAW,EACXnB,YAAaA,IAKfoB,EAAe,SAACnB,EAAOD,GAA6B,IAAhBqB,EAAe,uDAAT,KAC5C,MAAO,CACHpB,MAAOA,EACPE,QAASkB,GAAOpB,EAChBG,IAAK,EACLC,IAAK,EAELL,YAAaA,IAKfsB,EAAuB,WACzB,MAAO,CACHC,MAAO,CACHtB,MAAuB,EAAhBN,KAAKE,SAAe,EAC3BM,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,GACLmB,UAAW,IAEXxB,YAAa,2EAEjByB,WAAY,CACRxB,MAAOR,EAAc,CAAC,EAAG,EAAG,IAC5BU,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,EACLC,IAAK,EAELL,YAAa,6CAEjB0B,WAAY,CACRzB,MAAuB,EAAhBN,KAAKE,SAAe,GAC3BM,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,EACLC,IAAK,EAELL,YAAa,gDAEjB2B,eAAgB,CACZ1B,MAAO,CACH2B,QAASR,EAAa,IAAM,2BAC5BS,OAAQT,EAAa,EAAK,wCAC1BU,aAAcV,EAAa,EAAK,uCAChCW,cAAeX,EAAa,EAAK,yCAErCpB,YAAa,0FACbmB,WAAW,GAGfU,OAAQ9B,EAAc,4FACtB+B,aAAc/B,EAAc,4GAC5BgC,cAAehC,EAAc,0GAQ/BiC,EAAsB,SAACH,EAAQI,EAAOC,EAAQlC,GAA2C,IAA9BmC,EAA6B,uDAApB,CAAC,EAAK,EAAK,GACjF,MAAO,CACHlC,MAAO,CACHmC,KAAM,CACFnC,MAAO,EACPE,QAAS,EACTG,KAAM,KACNF,IAAK,EACLC,IAAK,EAELL,YAAa,oFAEjB6B,OAAQ,CACJ5B,MAAO4B,EACP1B,QAASgC,EAAS,GAClB7B,KAAM,KACNF,KAAM,EACNC,IAAK,EAELL,YAAa,uCAEjBiC,MAAO,CACHhC,MAAOgC,EACP9B,QAASgC,EAAS,GAClB7B,KAAM,KACNF,KAAM,EACNC,IAAK,EACLL,YAAa,sCAEjBkC,OAAQ,CACJjC,MAAOiC,EACP/B,QAASgC,EAAS,GAClB7B,KAAM,KACNF,KAAM,EACNC,IAAK,EACLL,YAAa,wCAGrBA,YAAaA,EACbmB,WAAW,IAIbkB,EAAqB,WACvB,MAAO,CACHC,MAAO,CACHrC,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,GAELL,YAAa,2DAEjB4B,QAAS,CACL3B,MAAO,CACHsC,IAAK,CACDtC,MAAON,KAAKE,SACZM,QAAS,EACTG,KAAM,KAENF,KAAM,GACNC,IAAK,GAELL,YAAa,iCAEjBwC,WAAY,CACRvC,MAAuB,GAAhBN,KAAKE,SAAiB,GAC7BM,QAAS,GACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,GAELL,YAAa,kCAEjByC,WAAY,CACRxC,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,EAELL,YAAa,kCAEjB0C,IAAK,CACDzC,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,EACLL,YAAa,6DAEjB2C,MAAO,CACH1C,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,EACLL,YAAa,+DAEjB4C,KAAM,CACF3C,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,KACLC,IAAK,EACLL,YAAa,+DAGrBA,YAAa,yBACbmB,WAAW,GAEf0B,cAAsBb,EAAoB,EAAMrC,KAAKE,SAAW,GAAK,EAAMF,KAAKE,SAAW,GAAK,EAAMF,KAAKE,SAAW,GAC5E,sEACD,CAAC,EAAK,EAAK,IACpDiD,qBAAsBd,EAAoB,EAAMrC,KAAKE,SAAU,EAAMF,KAAKE,SAAU,EAAMF,KAAKE,SACrD,6EACD,CAAC,EAAK,GAAM,KACrDkD,qBAAsBf,EAAoB,EAAK,EAAK,EACV,6EACD,CAAC,EAAK,EAAK,MAQtDgB,EAAsB,WACxB,MAAO,CACHC,WAAY,CACRhD,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,GACLC,IAAK,EAELL,YAAa,qDAEjBkD,gBAAiB,CACbjD,MAAO,EAAM,IACbE,QAAS,EAAM,IACfgB,WAAW,EAEXf,IAAK,EACLC,IAAK,GACLL,YAAa,qDAEjBmD,cAAe,CACXlD,MAAO,EACPE,QAAS,EACTgB,WAAW,EACXb,KAAM,KAENF,IAAK,EACLC,IAAK,EAELL,YAAa,6EAanBoD,EAAe,SAACC,EAAYC,GAE9B,IAAMC,EAAc,SAACC,EAAQC,GACzB,OAAOC,OAAOC,UAAUC,eAAeC,KAAKL,EAAQC,IAGpDK,EAAeR,EAASS,MAAM,KAGlC,GAAIR,EAAYF,EAAYS,EAAa,IAAzC,CAOA,IAJA,IAAIE,EAAmBX,EAAWS,EAAa,IAIvCG,EAAI,EAAGA,EAAIH,EAAahE,OAAQmE,IAAK,CAEzC,GAAiC,kBAArBD,EAAgC,OAG5C,IAAIT,EAAYS,EAAiB/D,MAAO6D,EAAaG,IAAK,OAG1DD,EAAmBA,EAAiB/D,MAAM6D,EAAaG,IAK3D,MAAO,CAACZ,EAAWS,EAAa,IAAI3C,UAAW6C,KAI7CE,EAAc,SAACb,EAAYc,EAASC,GAGtC,IAAMC,EAAa,SAACC,EAAWC,GAG3B,GAAID,EAAUnD,UAAd,EAGe,SAATqD,EAAUC,EAASnB,GAGrB,GAA4B,kBAAlBmB,EAAQxE,MAEd,IAAI,IAAIsE,KAAQE,EAAQxE,MACjByD,OAAOC,UAAUC,eAAeC,KAAKY,EAAQxE,MAAOsE,IAGnDC,EAAOC,EAAQxE,MAAMsE,GAAOjB,EAAW,IAAMiB,QAMrDH,EAAIC,WAAWF,EAASb,EAAUmB,EAAQnE,KAAMmE,EAAQxE,OAIhEuE,CAAOF,EAAWC,KAItB,IAAK,IAAIA,KAAQlB,EACVK,OAAOC,UAAUC,eAAeC,KAAKR,EAAYkB,IAChDF,EAAWhB,EAAWkB,GAAOA,IAMnCG,EAAU,SAACrB,EAAYsB,EAAWC,GACpC,IAAMC,EAAmB,SAAnBA,EAAoBJ,GACtB,IAAGG,IAAiBA,EAAcH,GAElC,GAA4B,kBAAlBA,EAAQxE,MACd,IAAI,IAAIsE,KAAQE,EAAQxE,MACjByD,OAAOC,UAAUC,eAAeC,KAAKY,EAAQxE,MAAOsE,IACnDM,EAAiBJ,EAAQxE,MAAMsE,SAIvCI,EAAUF,IAIlB,IAAK,IAAIF,KAAQlB,EACVK,OAAOC,UAAUC,eAAeC,KAAKR,EAAYkB,IAChDM,EAAiBxB,EAAWkB,IAIpC,OAAOlB,GAGLyB,EAA2B,SAACzB,GAC9B,OAAOqB,EAAQrB,GAAY,SAACoB,GAAD,OAAaA,EAAQxE,MAAQwE,EAAQtE,YA6C9D4E,EAAkB,SAAlBA,EAAmBN,EAASO,GAG9B,GAAsB,kBAAZP,GAAwBQ,MAAMC,QAAQT,GAAU,OAAOO,GAAWP,EAG5E,IAAIO,EAAS,OAAOP,EAEpB,IAAIU,EAAU,GAId,IAAI,IAAIC,KAAQX,EACTf,OAAOC,UAAUC,eAAeC,KAAKY,EAASW,KAC7CD,EAAQC,GAAQL,EAAgBN,EAAQW,GAAOJ,EAAQI,KAI/D,OAAOD,GAKLE,E,WACF,WAAYC,GAAkB,oBAC1BC,KAAKC,iBAAmBF,EACxBC,KAAKlC,WAAakC,KAAKC,mBACvBD,KAAKpB,QAAU,KACfoB,KAAKnB,IAAM,K,+CAIf,SAAYd,EAAUrD,GAClB,OA5DqB,SAACoD,EAAYc,EAASb,EAAUrD,EAAOmE,GAEhE,MAA+BhB,EAAaC,EAAYC,GAAxD,mBAAOnC,EAAP,KAAkBmD,EAAlB,KACA,MAAwB,qBAAdA,IAGPA,EAAU9C,WAAavB,EAAQqE,EAAU9C,YAAWvB,EAAQqE,EAAU9C,WAGtE8C,EAAUrE,QAAUA,IAGvBqE,EAAUrE,MAAQA,EACfkB,GAAagD,GAAWC,GACvBA,EAAIC,WAAWF,EAASb,EAAUgB,EAAUhE,KAAMgE,EAAUrE,OAI/B,oBAAvBqE,EAAUmB,UAChBnB,EAAUmB,SAASxF,IAGhB,IAsCIyF,CAAqBH,KAAKlC,WAAYkC,KAAKpB,QAASb,EAAUrD,EAAOsF,KAAKnB,O,sBAIrF,SAASd,GACL,OA/EkB,SAACD,EAAYC,GACnC,MAAcF,EAAaC,EAAYC,GAA9BqC,EAAT,oBACA,GAAgB,qBAANA,EACV,OAAOA,EAAE1F,MA4EE2F,CAAkBL,KAAKlC,WAAYC,K,wBAI9C,SAAWA,GACP,OA7EoB,SAACD,EAAYC,GACrC,MAAcF,EAAaC,EAAYC,GAA9BqC,EAAT,oBACA,GAAgB,qBAANA,EACV,OAAOA,EAAExF,QA0EE0F,CAAoBN,KAAKlC,WAAYC,K,2BAIhD,WACI,OAAOiC,KAAKlC,a,qBAGhB,WAEOkC,KAAKnB,KAAOmB,KAAKpB,SAChBD,EAAYqB,KAAKlC,WAAYkC,KAAKpB,QAASoB,KAAKnB,KAIpDM,EAAQa,KAAKlC,YAAY,SAAAiB,GACrBA,EAAUmB,UAAYnB,EAAUmB,SAASnB,EAAUrE,Y,2BAK3D,SAAcoD,GACVkC,KAAKlC,WAAaA,EAClBkC,KAAKO,Y,mBAIT,WACIP,KAAKlC,WAAayB,EAAyBS,KAAKlC,YAChDkC,KAAKO,Y,uBAIT,WACIP,KAAKlC,WAAakC,KAAKC,mBACvBD,KAAKO,c,KCvkBPC,E,kDAIF,aAAe,IAAD,sBAMV,IAAMC,EAAe,WACjB,MAAO,CAAiB,IAAhBrG,KAAKE,SAAiC,IAAhBF,KAAKE,SAAiB,IAP9C,OACV,cAAMyB,IAUD2E,OAAS,KACd,EAAK7B,IAAM,KAIX,EAAK8B,aAAc,EAGnB,EAAK/B,QAAU,KAGf,EAAKgC,aAAeH,IACpB,EAAKI,YAAeJ,IACpB,EAAKK,aAAeL,IAGpB,EAAKM,SAAW,CAAC,EAAG,GACpB,EAAKC,WAAa,CAACC,OAAOC,WAAYD,OAAOE,aAG7C,EAAKC,QAAS,EACd,EAAKC,WAAa,EAClB,EAAKC,iBAAmB,EACxB,EAAKC,kBAAoB,EAEzB,EAAKC,mBAAqB,EAM1B,EAAKC,wBAA0B,EAC/B,EAAKC,wBAA0B,EAAE,GAAI,GACrC,EAAKC,KAAO,EA5CF,E,iDA+Cd,WACI,OAAO3B,KAAKW,c,wBAIhB,SAAWD,EAAQ9B,EAASC,GACxB,OAAGmB,KAAKW,aACJiB,QAAQC,IAAI,kDACL,IAGXD,QAAQC,IAAI,mCAEZ7B,KAAKnB,IAAMA,EACXmB,KAAKU,OAASA,EAGdkB,QAAQC,IAAI,qBAGZ7B,KAAKpB,QAAUA,EAGfgD,QAAQC,IAAI,oBAEZ7B,KAAKnB,IAAIiD,iBAAiB9B,KAAKpB,SAC/BoB,KAAKO,UAGLqB,QAAQC,IAAI,wCAEZ7B,KAAKW,aAAc,GAKZ,K,+BAKX,WAAqB,IAAD,OAEbX,KAAK+B,gBACJ/B,KAAKnB,IAAImD,cAAchC,KAAK+B,eAC5B/B,KAAKnB,IAAIoD,kBAAkBjC,KAAK2B,MAIpC3B,KAAK0B,wBAA0B,CAC3B1B,KAAKgB,WAAW,GAAKhB,KAAKyB,wBAC1BzB,KAAKgB,WAAW,GAAKhB,KAAKyB,yBAG9B,IAAMS,EAAsB,SAACC,EAAOC,GAChC,IAAMC,EAAK,EAAKxD,IAAIyD,QACpB,OAAO,EAAKzD,IAAI0D,cAAcJ,EAAOC,EAAQC,EAAGG,KAAMH,EAAGI,QAASJ,EAAGK,QAKzE1C,KAAK+B,cACD/B,KAAK2C,SAAS,iBACZT,EAAoBlC,KAAK0B,wBAAwB,GAAI1B,KAAK0B,wBAAwB,IAClFQ,EAAoBlC,KAAKgB,WAAW,GAAIhB,KAAKgB,WAAW,IAG9DhB,KAAK2B,IAAM3B,KAAKnB,IAAI+D,kBAAkB5C,KAAK+B,iB,2BAM/C,WACI,OAAO/B,KAAKgB,a,yBAGhB,WACI,OAAOhB,KAAKe,W,yBAIhB,SAAYhD,EAAUrD,GAElB,IAAMmI,EAAM,mEAAqB9E,EAAUrD,GAO3C,MAJgB,kBAAbqD,GACCiC,KAAK8C,eAAc,GAGhBD,I,yBAIX,SAAY9B,GACJf,KAAKW,cAGTX,KAAKe,SAAS,GAAKA,EAAS,GAC5Bf,KAAKe,SAAS,GAAKA,EAAS,GAG5Bf,KAAKnB,IAAIiD,iBAAiB9B,KAAKpB,SAC/BoB,KAAKnB,IAAIC,WAAWkB,KAAKpB,QAAS,WAAY,MAAOmC,M,uBAIzD,SAAUK,GACNpB,KAAKoB,OAASA,I,oBAQlB,SAAOO,EAAKX,EAAY+B,GACpB,IAAMlE,EAAMmB,KAAKnB,IAIjB,GAHAA,EAAIiD,iBAAiB9B,KAAKpB,UAGtBoB,KAAKoB,OAAQ,CAEb,IAAMhF,EAAiB4D,KAAK2C,SAAS,0BACrC3C,KAAKqB,YAAqBjF,EAAiB4D,KAAK2C,SAAS,yBAA2BI,EACpF/C,KAAKsB,kBAAqBlF,EAAiB4D,KAAK2C,SAAS,+BAAiCI,EAC1F/C,KAAKuB,mBAAqBnF,EAAiB4D,KAAK2C,SAAS,gCAAkCI,EAiB/F,OAbAlE,EAAIC,WAAWkB,KAAKpB,QAAS,gBAAwB,MAAO,CAACoB,KAAKY,aAAa,GAAIZ,KAAKY,aAAa,GAAIZ,KAAKqB,aAC9GxC,EAAIC,WAAWkB,KAAKpB,QAAS,sBAAwB,MAAO,CAACoB,KAAKa,YAAY,GAAKb,KAAKa,YAAY,GAAIb,KAAKsB,mBAC7GzC,EAAIC,WAAWkB,KAAKpB,QAAS,uBAAwB,MAAO,CAACoB,KAAKc,aAAa,GAAId,KAAKc,aAAa,GAAId,KAAKuB,oBAG9G1C,EAAImE,gBAAgBrB,GAEpB9C,EAAIoE,YAAYjC,EAAW,GAAIA,EAAW,IAC1CnC,EAAIC,WAAWkB,KAAKpB,QAAS,WAAY,MAAOoC,GAGhDnC,EAAIqE,qBAAqBlD,KAAKpB,SAEvBoB,KAAK+B,kB,GAnMYjC,GCA1BqD,E,kDAIF,aAAe,IAAD,8BACV,cAAMrG,IAED4D,OAAS,KACd,EAAK7B,IAAM,KAGX,EAAK8B,aAAc,EAGnB,EAAK/B,QAAU,KAGf,EAAKwE,iBAAmB,KAGxB,EAAKC,aAAc,EACnB,EAAKC,aAAe,KAGpB,EAAKC,KAAO,EApBF,E,gDAyBd,SAAaD,GACTtD,KAAKqD,aAAc,EACnBrD,KAAKsD,aAAeA,I,wBAIxB,SAAW5C,EAAQ9B,EAASC,EAAKuE,GAAmB,IAAD,OAC/C,OAAGpD,KAAKW,aACJiB,QAAQC,IAAI,gDACL,IAGXD,QAAQC,IAAI,iCAEZ7B,KAAKnB,IAAMA,EACXmB,KAAKU,OAASA,EACdV,KAAKpB,QAAUA,EAEfoB,KAAKnB,IAAIiD,iBAAiB9B,KAAKpB,SAC/BD,EAAYqB,KAAKlC,WAAYkC,KAAKpB,QAASoB,KAAKnB,KAGhDmB,KAAKoD,iBAAmBpD,KAAKnB,IAAI2E,mBAC7BJ,EACApD,KAAKnB,IAAIyD,QAAQmB,OACjBzD,KAAKnB,IAAIyD,QAAQoB,SAEjB,SAACvB,EAAOC,GAEJ,EAAKvD,IAAIC,WAAW,EAAKF,QAAS,sBAAuB,KAAM,GAC/D,EAAKC,IAAI8E,WAAW,EAAKP,iBAAkB,GAC3C,EAAKvE,IAAIC,WAAW,EAAKF,QAAS,mBAAoB,KAAM,GAC5D,EAAKC,IAAIC,WAAW,EAAKF,QAAS,6BAA8B,MAAO,CAACuD,EAAOC,OAGnF,WACIR,QAAQgC,MAAM,uCAItB5D,KAAKW,aAAc,GAEZ,K,2BAGX,WACI,OAAOX,KAAKW,c,oBAIhB,SAAOkD,EAAe7C,EAAYpD,EAAeD,EAAiBoF,GAC9D/C,KAAKuD,MAAQR,EACb,IAAMlE,EAAMmB,KAAKnB,IAuBjB,GApBAA,EAAImE,gBAAgB,MACpBnE,EAAIoE,YAAYjC,EAAW,GAAIA,EAAW,IAC1ChB,KAAKnB,IAAIC,WAAWkB,KAAKpB,QAAS,WAAY,MAAOoC,GACrDhB,KAAKnB,IAAIC,WAAWkB,KAAKpB,QAAS,OAAQ,KAAMoB,KAAKuD,MACrDvD,KAAKnB,IAAIC,WAAWkB,KAAKpB,QAAS,kBAAmB,KAAMjB,GAG3DkB,EAAIiD,iBAAiB9B,KAAKpB,SAG1BC,EAAI8E,WAAWE,EAAe,GAG9BhF,EAAIC,WAAWkB,KAAKpB,QAAS,UAAW,KAAM,GAE9CC,EAAIC,WAAWkB,KAAKpB,QAAS,gBAAiB,KAAMhB,GAEpDiB,EAAIqE,qBAAqBlD,KAAKpB,SAG3BoB,KAAKqD,YAAa,CACjBrD,KAAKqD,aAAc,EACnB,IAAIS,EAAc9D,KAAKU,OAAOqD,UAAU,aACxC/D,KAAKsD,aAAaQ,Q,GA3GAhE,GCFxBkE,E,kDACF,aAAe,IAAD,8BACV,cAAMvG,IACDkD,aAAc,EAGnB,EAAKK,WAAa,CAACC,OAAOC,WAAYD,OAAOE,aAI7C,EAAKK,mBAAqB,EAC1B,EAAK9D,WAAa,EAElB,EAAKgD,OAAS,KAEd,EAAKuD,eAAiB,KAGtB,EAAKxC,wBAA0B,EAC/B,EAAKC,wBAA0B,EAAE,GAAI,GAGrC,EAAKC,IAAM,KACX,EAAKI,cAAgB,KAErB,EAAKpB,aAAc,EAxBT,E,8CA2Bd,SAAWD,EAAQ7B,GACf,OAAGmB,KAAKW,aACJiB,QAAQC,IAAI,iDACL,IAGX7B,KAAKU,OAASA,EACdV,KAAKnB,IAAMA,EAGXmB,KAAK8C,eAAc,GAEnB9C,KAAKW,aAAc,GAEZ,K,+BAKX,WAAqB,IAAD,OAEbX,KAAK+B,gBACJ/B,KAAKnB,IAAImD,cAAchC,KAAK+B,eAC5B/B,KAAKnB,IAAIoD,kBAAkBjC,KAAK2B,MAIpC3B,KAAK0B,wBAA0B,CAC3B1B,KAAKgB,WAAW,GAAKhB,KAAKyB,wBAC1BzB,KAAKgB,WAAW,GAAKhB,KAAKyB,yBAG9B,IAAMS,EAAsB,SAACC,EAAOC,GAChC,IAAMC,EAAK,EAAKxD,IAAIyD,QAIpB,OAAG,EAAKzD,IAAIqF,4BACD,EAAKrF,IAAI0D,cAAcJ,EAAOC,EAAQC,EAAGG,KAAMH,EAAGI,QAASJ,EAAGK,OAE9D,EAAK7D,IAAI0D,cAAcJ,EAAOC,EAAQC,EAAGG,KAAMH,EAAG8B,MAAO9B,EAAG+B,gBAM3EpE,KAAK+B,cACD/B,KAAK2C,SAAS,iBACZT,EAAoBlC,KAAK0B,wBAAwB,GAAI1B,KAAK0B,wBAAwB,IAClFQ,EAAoBlC,KAAKgB,WAAW,GAAIhB,KAAKgB,WAAW,IAG9DhB,KAAK2B,IAAM3B,KAAKnB,IAAI+D,kBAAkB5C,KAAK+B,iB,yBAI/C,SAAYhE,EAAUrD,GAElB,IAAMmI,EAAM,mEAAqB9E,EAAUrD,GAO3C,MAJgB,kBAAbqD,GAA6C,eAAbA,GAC/BiC,KAAK8C,eAAc,GAGhBD,I,2BAGX,WACI,OAAO7C,KAAKgB,a,wCAGhB,WAEI,OAAOhB,KAAK2C,SAAS,iBACf3C,KAAK0B,wBACL1B,KAAKgB,a,8BAGf,WACI,OAAOhB,KAAK+B,gB,4BAGhB,WACI,OAAO/B,KAAK2B,M,2BAQhB,WAA8C,IAAhC0C,EAA+B,wDAEnCC,EAAWtE,KAAKgB,WAAW,GAC3BuD,EAAYvE,KAAKgB,WAAW,GAE5BtD,EAAasC,KAAK2C,SAAS,cAG3B6B,EAAgB9G,EAAauD,OAAOC,WACpCuD,EAAgB/G,EAAauD,OAAOE,YACpCuD,EAAgB,CAACF,EAAUC,GAGjCzE,KAAKnB,IAAIoE,YAAYuB,EAAUC,GAC/BzE,KAAKU,OAAOiE,MAAMxC,MAAQlB,OAAOC,WACjClB,KAAKU,OAAOiE,MAAMvC,OAASnB,OAAOE,YAElCnB,KAAKU,OAAOyB,MAAQqC,EACpBxE,KAAKU,OAAO0B,OAASqC,EAErBzE,KAAKgB,WAAa0D,EAClB1E,KAAKwB,mBAAqB9D,GAGvB2G,GAAyBC,IAAaE,GAAYD,IAAcE,GAAa/G,IAAesC,KAAKwB,sBAChGxB,KAAK4E,oBACL5E,KAAKiE,gBAAkBjE,KAAKiE,eAAejE,KAAKgB,e,0BAIxD,WACQhB,KAAKW,aACTX,KAAK8C,kB,+BAGT,SAAkB+B,GACdA,EAAS7E,KAAKgB,YAEd,IAAM8D,EAAmB9E,KAAKiE,eAC9BjE,KAAKiE,eAAiB,SAACjD,GACnB8D,GAAoBA,EAAiB9D,GACrC6D,EAAS7D,M,oCAIjB,SAAuBD,GACnB,IAAMoB,EAAQlB,OAAOC,WACfkB,EAASnB,OAAOE,YAGhB4D,EAAc3C,EAASD,EAG7B,MAAO,CAACpB,EAAS,GAAKoB,EAAOpB,EAAS,GAAKgE,EAAc3C,O,GA7KlCtC,G,uBCAlBkF,EAAb,WACI,WAAYC,EAAUC,EAAS/C,EAAOC,EAAQ+C,GAAS,IAAD,2BAClDnF,KAAKiF,SAAWA,EAGhBjF,KAAKoF,OAAS,IAAIC,KACdlD,EAAQ,EACRA,EAAQ,EACRC,EAAS,GACTA,EAAS,GACT,IACA,KAEJpC,KAAKoF,OAAOrE,SAASuE,EAAI,IAGzBtF,KAAKuF,MAAQ,IAAIF,KACjBrF,KAAKuF,MAAMC,WAAa,IAAIH,IAAY,WAGxCrF,KAAKyF,SAAW,IAAIC,IAA8B1F,KAAKiF,SAAU,CAC7DU,gBAAiBN,MAErBrF,KAAKyF,SAASG,oBAAqB,EAEnC,IAAMC,EAAa,IAAIH,IAA0B1F,KAAKuF,MAAOvF,KAAKoF,QAClEpF,KAAKyF,SAASK,QAAQD,GACtBV,EAAOhG,SAAQ,SAAA4G,GACX,EAAKN,SAASK,QAAQC,MAI1B,IAAMC,EAAW,IAAIX,IAAwB,CACzCY,IAAKf,IAIHgB,EAAQ,IAAIb,IAA0B,EAAG,GAG/CrF,KAAKmG,KAAO,IAAId,IAAWa,EAAOF,GAClChG,KAAKmG,KAAKpF,SAASuE,GAAK,IACxBtF,KAAKmG,KAAKnK,MAAMoK,EAAIjE,EACpBnC,KAAKmG,KAAKnK,MAAMqK,EAAIjE,EAEpB,IAAMkE,EAAQ,IAAIjB,IAAmB,UAAW,GAEhDrF,KAAKuF,MAAMgB,IAAIvG,KAAKmG,KAAMG,GA/ClC,2CAkDI,SAAQnE,EAAOC,GAEXpC,KAAKoF,OAAOoB,MAAUrE,EAAQ,EAC9BnC,KAAKoF,OAAOqB,MAAUtE,EAAQ,EAC9BnC,KAAKoF,OAAOsB,IAAUtE,EAAS,EAC/BpC,KAAKoF,OAAOuB,QAAUvE,EAAS,EAC/BpC,KAAKoF,OAAOwB,yBAGZ5G,KAAKyF,SAASoB,UAGd7G,KAAKmG,KAAKnK,MAAMoK,EAAIjE,EACpBnC,KAAKmG,KAAKnK,MAAMqK,EAAIjE,IA/D5B,oBAkEI,SAAOW,GACH/C,KAAKyF,SAASqB,OAAO/D,KAnE7B,iCAsEI,WACI,OAAO/C,KAAKyF,SAASsB,aAAa7B,YAvE1C,KCLI8B,EAAkB,CACrBC,SAAU,CAET,SAAY,CAAEvM,MAAO,MACrB,QAAW,CAAEA,MAAO,GACpB,MAAS,CAAEA,MAAO,GAClB,OAAU,CAAEA,MAAO,IAGpBwM,aAAY,sJAOZC,eAAc,6gF,gBCLTC,EAAwB,SAACd,EAAO7L,EAAa4M,GAC/C,IAAMvJ,EAAa,GAoGnB,OAlGAA,EAAWrD,YAAcA,EAEzBqD,EAAWpD,MAAQ,CACf4M,UAAW,CACP5M,MAAO2M,EAAKC,UACZ1M,QAASyM,EAAKC,UACdzM,IAAK,EACLC,IAAK,GAELoF,SAAU,SAACxF,GACP4L,IAAQgB,UAAY5M,GAGxBD,YAAa,qCAEjB8M,MAAO,CACH7M,MAAO2M,EAAKE,MACZ3M,QAASyM,EAAKE,MACdxM,KAAM,QAENmF,SAAU,SAACxF,GACP4L,IAAQiB,MAAMC,IAAI9M,IAGtBD,YAAa,uBAKJ,YAAd4M,EAAKtM,OACJ+C,EAAWpD,MAAM0L,EAAI,CACjB1L,MAAO2M,EAAKtG,SAASqF,EACrBxL,QAASyM,EAAKtG,SAASqF,EACvBvL,KAAM,EACNC,IAAK,EAELoF,SAAU,SAACxF,GACP4L,IAAQvF,SAASqF,EAAI1L,GAGzBD,YAAa,6BAGjBqD,EAAWpD,MAAM2L,EAAI,CACjB3L,MAAO2M,EAAKtG,SAASsF,EACrBzL,QAASyM,EAAKtG,SAASsF,EACvBxL,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP4L,IAAQvF,SAASsF,EAAI3L,GAGzBD,YAAa,6BAGjBqD,EAAWpD,MAAM4K,EAAI,CACjB5K,MAAO2M,EAAKtG,SAASuE,EACrB1K,QAASyM,EAAKtG,SAASuE,EACvBzK,KAAM,EACNC,IAAK,EAELoF,SAAU,SAACxF,GACP4L,IAAQvF,SAASuE,EAAI5K,GAGzBD,YAAa,8BAIJ,UAAd4M,EAAKtM,OACJ+C,EAAWpD,MAAM+M,SAAW,CACxB/M,MAAO2M,EAAKI,SACZ7M,QAASyM,EAAKI,SACd5M,IAAK,IACLC,IAAK,EAELoF,SAAU,SAACxF,GACP4L,IAAQmB,SAAW/M,GAGvBD,YAAa,kCAGjBqD,EAAWpD,MAAMgN,MAAQ,CACrBhN,MAAO2M,EAAKK,MACZ9M,QAASyM,EAAKK,MACd7M,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP4L,IAAQoB,MAAQhN,GAGpBD,YAAa,8DAIdqD,GAGL6J,E,kDACF,aAAe,IAAD,8BACV,eAAM,WAAQ,MAAO,CACjBC,UAAW,CACPlN,MAAO,GACPE,QAAS,GACTC,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAKsL,SAAS4B,UAAYlN,GAG9BD,YAAa,kCAEjBoN,UAAW,CACPnN,MAAO,GACPE,QAAS,GACTC,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAKsL,SAAS6B,UAAYnN,GAG9BD,YAAa,mEAEjBqN,UAAW,CACPpN,MAAO,IACPE,QAAS,IACTC,IAAK,EACLC,IAAK,GACLG,KAAM,KAENiF,SAAU,SAACxF,GACP,EAAKsL,SAAS+B,YAAc,IAAI1C,KAAc3K,EAAOA,IAGzDD,YAAa,+BAEjBuN,aAAc,CACVtN,MAAO,CACHiC,OAAQ,CACJjC,MAAO,GACPE,QAAS,GACTC,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAKsL,SAASiC,kBAAoBvN,EAClC,EAAKsL,SAASkC,kBAAoBxN,EAAQ,GAG9CD,YAAa,mCAEjB0N,WAAY,CACRzN,MAAO,GACPE,QAAS,GACTC,IAAK,EACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAK0N,SAASpM,MAAQtB,GAG1BD,YAAa,yCAIzB4N,IAAK,CACD3N,MAAO,CACH6M,MAAO,CACH7M,MAAO,UACPE,QAAS,UACTG,KAAM,QAENmF,SAAU,SAACxF,GACP,EAAK6K,MAAM8C,IAAId,MAAMC,IAAI9M,GACzB,EAAK6K,MAAMC,WAAWgC,IAAI9M,IAG9BD,YAAa,uCAEjB6N,KAAM,CACF5N,MAAO,IACPE,QAAS,IACTC,IAAK,KACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAK6K,MAAM8C,IAAIC,KAAO5N,GAG1BD,YAAa,kDAEjB8N,IAAK,CACD7N,MAAO,IACPE,QAAS,IACTC,IAAK,GACLC,IAAK,EAELoF,SAAU,SAACxF,GACP,EAAK6K,MAAM8C,IAAIE,IAAM7N,GAGzBD,YAAa,gDAIzB+N,SAAU,CACN9N,MAAO,CACH+N,aAAcrB,GACV,kBAAM,EAAKqB,eACX,sCACA,CACI1N,KAAM,UACNwM,MAAO,UACPD,UAAW,KAGnBoB,iBAAkBtB,GACd,kBAAM,EAAKsB,mBACX,yEACA,CACI3N,KAAM,cACNwM,MAAO,UACPD,UAAW,IACXvG,SAAU,IAAIsE,KAAc,EAAG,GAAI,KAG3CsD,WAAYvB,GACR,kBAAM,EAAKuB,aACX,qFACA,CACI5N,KAAM,QACNwM,MAAO,UACPD,UAAW,IACXI,MAAO,EACPD,SAAU,EACV1G,SAAU,IAAIsE,KAAc,EAAG,GAAI,QAK/C5K,YAAa,gCAIhB6N,KAAO,IACZ,EAAKC,IAAM,GAEX,EAAK5H,aAAc,EAtJT,E,8CAyJd,SAAWiI,EAAelI,GACtBV,KAAKU,OAASA,EAGdV,KAAKiF,SAAW,IAAII,KAAoB,CACpC3E,OAAQA,EACRmI,WAAW,EACXC,gBAAiB,qBAErB9I,KAAKiF,SAAS8D,yBAA0B,EAGxC/I,KAAKoF,OAAS,IAAIC,IACd,GACA3E,EAAOyB,MAAQzB,EAAO0B,OACtBpC,KAAKsI,KACLtI,KAAKuI,KAETvI,KAAKoF,OAAOrE,SAASyG,IAAI,EAAG,GAAK,KAGjCxH,KAAKgJ,SAAW,IAAIC,IAAkBjJ,KAAKoF,OAAQ1E,GACnDV,KAAKgJ,SAASE,cAAgB,EAC9BlJ,KAAKgJ,SAASG,qBAAuB,IAGrCnJ,KAAKuF,MAAQ,IAAIF,KACjBrF,KAAKuF,MAAMC,WAAa,IAAIH,IAAYrF,KAAK2C,SAAS,cACtD3C,KAAKuF,MAAM8C,IAAM,IAAIhD,IAAUrF,KAAK2C,SAAS,aACzC3C,KAAK2C,SAAS,YACd3C,KAAK2C,SAAS,YAMlB,IAAMuC,EAAU,IAAIG,IAAoBuD,GACxC1D,EAAQkE,aAAc,EACtBlE,EAAQmE,UAAYhE,IACpBH,EAAQoE,UAAYjE,IACpBrF,KAAKkF,QAAUA,EAGflF,KAAKuJ,eAAiB,IAAIlE,KAAqB2B,GAC/ChH,KAAKuJ,eAAetC,SAAS9E,MAAMzH,MAAQgG,EAAO8I,YAClDxJ,KAAKuJ,eAAetC,SAAS7E,OAAO1H,MAAQgG,EAAO+I,aAEnD,IAAMC,EAAa,IAAIhE,IACnB1F,KAAKuJ,eACL,YAGJvJ,KAAK2J,kBAAoB,IAAI3E,EAAiBhF,KAAKiF,SAAUC,EAASxE,EAAO8I,YAAa9I,EAAO+I,aAAc,CAC3GC,IAIJ,IAAMtB,EAAW,IAAI1C,IAAwB,CACzCkE,WAAYlE,IAA0BmE,SAE1C7J,KAAKoI,SAAWA,EAEhBpI,KAAK8J,kBAAoB,IAAI9E,EAAiBhF,KAAKiF,SAAUC,EAASxE,EAAO8I,YAAa9I,EAAO+I,aAAc,CAC3GrB,IAGJ,IAAM2B,EAAY/J,KAAK2J,kBAAkBK,sBACnCC,EAAYjK,KAAK8J,kBAAkBE,sBAInCE,EAAW,IAAI7E,IAA0B,EAAG,EADnC,SAETW,EAAW,IAAIX,IAA2B,CAC5CkC,MAAO,UACPtB,IAAKf,EAEL0C,UAAW5H,KAAK2C,SAAS,aACzBkF,UAAW7H,KAAK2C,SAAS,aAEzBoH,UAAWA,EACXhC,YAAa,IAAI1C,KACbrF,KAAK2C,SAAS,aACd3C,KAAK2C,SAAS,cAGlBwH,gBAAiBF,EACjBhC,kBAAmBjI,KAAK2C,SAAS,uBACjCuF,kBAAmBlI,KAAK2C,SAAS,uBAAyB,IAGxDuD,EAAQ,IAAIb,IAAW6E,EAAUlE,GAgDvC,OA/CAE,EAAMkE,SAAShE,GAAKhM,KAAKiQ,GAAK,EAE9BrK,KAAKgG,SAAWA,EAGhBhG,KAAKyI,aAAe,IAAIpD,IACpBrF,KAAK2C,SAAS,+BACd3C,KAAK2C,SAAS,oCAGlB3C,KAAK0I,iBAAmB,IAAIrD,IACxBrF,KAAK2C,SAAS,mCACd3C,KAAK2C,SAAS,wCAElB3C,KAAK0I,iBAAiB3H,SAASyG,IAC3BxH,KAAK2C,SAAS,+BACd3C,KAAK2C,SAAS,+BACd3C,KAAK2C,SAAS,gCAGlB3C,KAAK2I,WAAa,IAAItD,KAClBrF,KAAK2C,SAAS,6BACd3C,KAAK2C,SAAS,iCACd3C,KAAK2C,SAAS,gCACd3C,KAAK2C,SAAS,8BAElB3C,KAAK2I,WAAW5H,SAASyG,IACrBxH,KAAK2C,SAAS,yBACd3C,KAAK2C,SAAS,yBACd3C,KAAK2C,SAAS,0BAGlB3C,KAAKuF,MAAMgB,IACPL,EACAlG,KAAKyI,aACLzI,KAAK0I,iBACL1I,KAAK2I,YAIT3I,KAAKyF,SAAW,IAAI6E,IAAetK,KAAKiF,UACxCjF,KAAKyF,SAASK,QAAQ,IAAIyE,IAAevK,KAAKuF,MAAOvF,KAAKoF,SAC1DpF,KAAKyF,SAAS+E,cAAcvJ,OAAOwJ,kBAEnCzK,KAAKW,aAAc,EAEnBX,KAAK0K,gBACE,I,2BAGX,WACI,OAAO1K,KAAKW,c,oBAGhB,SAAOoC,GACH/C,KAAKgJ,SAAS2B,SACd3K,KAAKkF,QAAQkE,aAAc,I,oBAG/B,SAAOrG,GAOH,GANA/C,KAAK2J,kBAAkB7C,OAAO/D,GAC9B/C,KAAK8J,kBAAkBhD,OAAO/D,GAE9B/C,KAAKyF,SAASqB,OAAO/D,GAGlB/C,KAAKqD,YAAa,CACjBrD,KAAKqD,aAAc,EACnB,IAAMS,EAAc9D,KAAKU,OAAOqD,UAAU,aAC1C/D,KAAKsD,aAAaQ,M,0BAM1B,SAAaR,GACTtD,KAAKqD,aAAc,EACnBrD,KAAKsD,aAAeA,I,0BAGxB,WACI,GAAItD,KAAKW,YAAT,CAEA,IAAMwB,EAAQnC,KAAKU,OAAO8I,YACpBpH,EAASpC,KAAKU,OAAO+I,aAErBmB,EAAc5K,KAAKiF,SAAS4F,QAAQ,IAAIxF,MAExCyF,EAAU,IAAIzF,KAAclD,EAAOC,GAEtCwI,EAAYG,OAAOD,KAEtB9K,KAAKiF,SAAS4B,QAASiE,EAAQ1E,EAAG0E,EAAQzE,GAAG,GAC7CrG,KAAKyF,SAASoB,QAASiE,EAAQ1E,EAAG0E,EAAQzE,GAE1CrG,KAAKuJ,eAAetC,SAAS9E,MAAMzH,MAAQoQ,EAAQ1E,EACnDpG,KAAKuJ,eAAetC,SAAS7E,OAAO1H,MAAQoQ,EAAQzE,EAEpDrG,KAAKoF,OAAO4F,OAASF,EAAQ1E,EAAI0E,EAAQzE,EACzCrG,KAAKoF,OAAOwB,yBAEZ5G,KAAK2J,kBAAkB9C,QAASiE,EAAQ1E,EAAG0E,EAAQzE,GACnDrG,KAAK8J,kBAAkBjD,QAASiE,EAAQ1E,EAAG0E,EAAQzE,S,GA3V5BvG,G,QCjHzBmL,E,WACF,aAAe,oBACXjL,KAAKkL,eAAiBC,KAAKC,MAK3BpL,KAAKqL,kBAAoB,EAIzBrL,KAAKsL,UAAY,GAGjBtL,KAAKuL,SAAU,EAGfvL,KAAKwL,WAAaxL,KAAKkL,eACvBlL,KAAKyL,sBAAwB,EAE7BzL,KAAK0L,iBAAmB,EAExB1L,KAAK2L,eAAiB,GACtB3L,KAAK4L,iBAAmB,EAGxB5L,KAAK6L,WAAY,E,+CAGrB,SAAYhH,GACR7E,KAAKsL,UAAY,CAACzG,K,yBAGtB,SAAYA,GACR7E,KAAK8L,eAAejH,GACpB7E,KAAKsL,UAAUS,KAAKlH,K,4BAGxB,SAAeA,GACX7E,KAAKsL,UAAYtL,KAAKsL,UAAUU,QAAO,SAACC,GACpC,MAAG,GAAGA,GAAM,GAAGpH,O,gCAQvB,WACI7E,KAAKsL,UAAY,K,uBAGrB,WACI,OAAOtL,KAAKuL,U,mBAGhB,WAAS,IAAD,OAEJ,IAAGvL,KAAKkM,YAAR,CAEAlM,KAAKuL,SAAU,GAEA,SAATZ,IAEF,IAAMS,EAAMD,KAAKC,MACXrI,GAASqI,EAAM,EAAKF,gBAAkB,IAK5C,EAAKI,UAAUnM,SAAQ,SAAA0F,GAAQ,OAAIA,EAAS9B,MAG5C,EAAKmI,eAAiBE,EAGtB,EAAKC,iBAAmBc,sBAAsBxB,GAG9C,EAAKc,wBAGFL,EAAM,EAAKI,WAAa,MACvB,EAAKE,iBAAmB,EAAKD,sBAC7B,EAAKA,sBAAwB,EAC7B,EAAKD,WAAaJ,EAGlB,EAAKQ,iBACD,EAAKD,eAAiB,EAAKD,kBAC1B,EAAM,EAAKC,gBAAkB,EAAKC,kBAK/CjB,M,kBAGJ,WACI3K,KAAKuL,SAAU,EAEZvL,KAAK6L,WAAW7L,KAAKoM,gBACxBC,qBAAqBrM,KAAKqL,oB,0BAG9B,WACI,OAAOrL,KAAK0L,mB,iCAGhB,WACI,OAAO1L,KAAK4L,mB,4BAGhB,SAAeU,EAAW5L,GAAS,IAAD,OAE9BV,KAAKuM,OAGLvM,KAAK6L,WAAY,EAGjB,IAAM9I,EAAS,EAAMuJ,GAGD,SAAdE,IAIF,EAAKlB,UAAUnM,SAAQ,SAAA0F,GAAQ,OAAIA,EAAS9B,MAE5C0J,mBAAS/L,GAAQgM,MAAM,WAEnB,EAAKrB,iBAAmBc,sBAAsBK,MAItDA,K,2BAGJ,WAEQxM,KAAK6L,YACT7L,KAAK6L,WAAY,EAGjBc,2BAGA3M,KAAKuM,OAGLvM,KAAKkL,eAAiBC,KAAKC,MAG3BpL,KAAK4M,a,aC5JPC,E,WAKF,aAAe,oBACX7M,KAAKU,OAAS,KACdV,KAAKqC,GAAK,KACVrC,KAAKW,aAAc,EAGnBX,KAAK8M,iBAAmB,IAAIC,QAG5B/M,KAAKgN,uBAAyB,KAC9BhN,KAAKiN,4BAA8B,K,8CAIvC,SAAWvM,GAKP,GAHAkB,QAAQC,IAAI,+BAGRnB,EAEA,OADAkB,QAAQC,IAAI,kCACL,EAIX,IAAIQ,EAAK3B,EAAOwM,WAAW,UAkB3B,OAfI7K,EAKArC,KAAKmN,WAAY,GAJjBvL,QAAQC,IAAI,gDACZQ,EAAK3B,EAAOwM,WAAW,SACvBlN,KAAKmN,WAAY,GAMjB9K,IACAT,QAAQC,IAAI,2DACZQ,EAAK3B,EAAOwM,WAAW,uBAIvB7K,GAMJrC,KAAKgN,uBAAyB3K,EAAG+K,aAAa,0BACzCpN,KAAKgN,uBAINhN,KAAKqN,qBAAsB,GAH3BzL,QAAQC,IAAI,uEACZ7B,KAAKqN,qBAAsB,GAK/BrN,KAAKsN,gBAAkB,EAEvBtN,KAAKU,OAASA,EACdV,KAAKqC,GAAKA,EACVrC,KAAKW,aAAc,GAEZ,IAnBH4M,MAAM,wCACC,K,6BAqBf,WACI,OAAOvN,KAAKmN,Y,uCAGhB,WACI,OAAOnN,KAAKqN,sB,2BAGhB,WACI,OAAOrN,KAAKW,c,oCAOhB,SAAuB/B,EAAS4O,GAA4C,IAA1BC,EAAyB,uDAAN,KAEjEzN,KAAK0N,gBACD9O,EACA4O,EACA,EACAxN,KAAKqC,GAAGK,MACR,EAAIiL,aAAaC,kBACjB,GAIDH,GACCzN,KAAK0N,gBACD9O,EACA6O,EACA,EACAzN,KAAKqC,GAAGK,MACR,EAAIiL,aAAaC,kBACjB,EAAID,aAAaC,qB,kCAM7B,WAAwF,IAAnEhP,EAAkE,uDAAxD,KAAM4O,EAAkD,uDAA/B,KAAMC,EAAyB,uDAAN,KACvEI,EACN,EAEK,EAAM,EAAS,EAAG,GAClB,GAAM,EAAS,EAAG,EAClB,GAAM,EAAS,EAAG,GAGlB,EAAM,EAAS,EAAG,EAClB,EAAM,EAAS,EAAG,EAClB,GAAM,EAAS,EAAG,GAIvB7N,KAAK8N,WAAa9N,KAAK+N,aAAa/N,KAAKqC,GAAG2L,aAAcH,EAAkB7N,KAAKqC,GAAG4L,aAGjFrP,GAAW4O,GACVxN,KAAKkO,uBAAuBtP,EAAS4O,EAAkBC,K,0BAK/D,SAAaU,EAAYC,EAAMC,GAC3B,IAAIC,EAAStO,KAAKqC,GAAG0L,eAGrB,OAFA/N,KAAKuO,WAAWJ,EAAYG,GAC5BtO,KAAKqC,GAAGmM,WAAWL,EAAY,IAAIR,aAAaS,GAAOC,GAChDC,I,+BAIX,SAAkBG,GACd,IAAMC,EAAK1O,KAAKqC,GAAGO,oBAanB,OAZA5C,KAAKqC,GAAGW,gBAAgBhD,KAAKqC,GAAGsM,YAAaD,GAC7C1O,KAAKqC,GAAGuM,qBACJ5O,KAAKqC,GAAGsM,YACR3O,KAAKqC,GAAGwM,kBACR7O,KAAKqC,GAAGyM,WACRL,EACA,GAEDzO,KAAK+O,mBACJ/O,KAAKqC,GAAG2M,YAAY,CAAChP,KAAKqC,GAAGwM,oBAG1BH,I,2BAIX,SAAcvM,EAAOC,GAA6F,IAArF6M,EAAoF,uDAA3EjP,KAAKqC,GAAGG,KAAM0M,EAA6D,uDAA5ClP,KAAKqC,GAAGG,KAAMzH,EAA8B,uDAAvBiF,KAAKqC,GAAG8M,cAExFjK,EAAUlF,KAAKqC,GAAGE,gBACxBvC,KAAKqC,GAAG+M,YAAYpP,KAAKqC,GAAGyM,WAAY5J,GAGxC,IAAMmK,EAAQ,EACRC,EAAS,EACTlB,EAAO,KAiBb,OAhBApO,KAAKqC,GAAGkN,WAAWvP,KAAKqC,GAAGyM,WACvBO,EAAOH,EACP/M,EAAOC,EAAQkN,EACfL,EAAQlU,EAAMqT,GAGfrT,IAASiF,KAAKqC,GAAGK,MAChB1C,KAAKqC,GAAGmN,cAAcxP,KAAKqC,GAAGyM,WAAY9O,KAAKqC,GAAGoN,mBAAoBzP,KAAKqC,GAAGqN,SAE9E1P,KAAKqC,GAAGmN,cAAcxP,KAAKqC,GAAGyM,WAAY9O,KAAKqC,GAAGoN,mBAAoBzP,KAAKqC,GAAGqB,SAC9E1D,KAAKqC,GAAGmN,cAAcxP,KAAKqC,GAAGyM,WAAY9O,KAAKqC,GAAGsN,mBAAoB3P,KAAKqC,GAAGqB,UAGlF1D,KAAKqC,GAAGmN,cAAcxP,KAAKqC,GAAGyM,WAAY9O,KAAKqC,GAAGuN,eAAgB5P,KAAKqC,GAAGwN,eAC1E7P,KAAKqC,GAAGmN,cAAcxP,KAAKqC,GAAGyM,WAAY9O,KAAKqC,GAAGyN,eAAgB9P,KAAKqC,GAAGwN,eAEnE3K,I,gCAIX,SAAmB6K,GAA+F,IAAD,OAAzFC,EAAyF,uDAAlFhQ,KAAKqC,GAAGwN,cAAeI,EAA2D,uDAA/CjQ,KAAKqC,GAAGqN,OAAQQ,EAA+B,uDAAtB,KAAMC,EAAgB,uDAAN,KAEjGjL,EAAUlF,KAAKuC,cAAc,EAAG,EAAGvC,KAAKqC,GAAGG,KAAMxC,KAAKqC,GAAGG,KAAMxC,KAAKqC,GAAG8M,eAGzEiB,EAAQ,IAAIC,MAqBhB,OApBAD,EAAME,OAAS,WAEX,EAAKjO,GAAG+M,YAAY,EAAK/M,GAAGyM,WAAY5J,GACxC,EAAK7C,GAAGkN,WAAW,EAAKlN,GAAGyM,WAAY,EAAG,EAAKzM,GAAGG,KAAM,EAAKH,GAAGG,KAAM,EAAKH,GAAG8M,cAAeiB,GAG7F,EAAK/N,GAAGmN,cAAc,EAAKnN,GAAGyM,WAAY,EAAKzM,GAAGuN,eAAgBI,GAClE,EAAK3N,GAAGmN,cAAc,EAAKnN,GAAGyM,WAAY,EAAKzM,GAAGyN,eAAgBE,GAClE,EAAK3N,GAAGmN,cAAc,EAAKnN,GAAGyM,WAAY,EAAKzM,GAAGoN,mBAAoBQ,GACtE,EAAK5N,GAAGmN,cAAc,EAAKnN,GAAGyM,WAAY,EAAKzM,GAAGsN,mBAAoBM,GAGtEC,GAAUA,EAAOE,EAAMjO,MAAOiO,EAAMhO,SAExCgO,EAAMG,QAAU,WAEZJ,GAAWA,KAGfC,EAAML,IAAMA,EACL7K,I,mCASX,SAAsBsL,GAGlB,IAH2B,EAGrBC,EAAW,GAHU,cAIkBD,GAJlB,IAI3B,2BAAsD,CAAC,IAAD,yBAA1CE,EAA0C,KAA5BC,EAA4B,KAC5CC,EAAK5Q,KAAK6Q,cAAcH,EAAc1Q,KAAKqC,GAAGyO,eAC9CC,EAAK/Q,KAAK6Q,cAAcF,EAAgB3Q,KAAKqC,GAAG2O,iBAChDpS,EAAUoB,KAAKiR,qBAAqBL,EAAIG,GAC9CN,EAAS1E,KAAK,CAAC6E,EAAIG,EAAInS,KARA,8BAY3B,cAAyB6R,EAAzB,eAAmC,CAA9B,0BAAOG,EAAP,KAAWG,EAAX,KACD/Q,KAAKkR,eAAeN,GACpB5Q,KAAKkR,eAAeH,GAIxB,cAA4BN,EAA5B,eAAsC,CAAjC,IAAW7R,EAAX,uBACDoB,KAAKqC,GAAG8O,YAAYvS,GAIxB,cAAgC6R,EAAhC,eAA0C,CAArC,0BAAOG,EAAP,KAAWG,EAAX,KAAenS,EAAf,KACD,IAAKoB,KAAKqC,GAAG+O,oBAAoBxS,EAASoB,KAAKqC,GAAGgP,aAK9C,OAJAzP,QAAQgC,MAAM,gBAAkB5D,KAAKqC,GAAGiP,kBAAkB1S,IAC1DgD,QAAQgC,MAAM,gBAAkB5D,KAAKqC,GAAGkP,iBAAiBX,IACzDhP,QAAQgC,MAAM,gBAAkB5D,KAAKqC,GAAGkP,iBAAiBR,IAElD,KAKf,OAAON,EAASxK,KAAI,4C,kCAGxB,SAAqByK,EAAcC,GAC/B,OAAO3Q,KAAKwR,sBAAsB,CAAC,CAACd,EAAcC,KAAkB,K,2BAGxE,SAAcrU,EAAQvB,GAClB,IAAM0W,EAASzR,KAAKqC,GAAGqP,aAAa3W,GAEpC,OADAiF,KAAKqC,GAAGsP,aAAaF,EAAQnV,GACtBmV,I,4BAGX,SAAeA,GACPA,EAAOG,WACX5R,KAAKqC,GAAGwP,cAAcJ,GACtBA,EAAOG,UAAW,K,kCAGtB,SAAqBhB,EAAIG,GACrB,IAAMnS,EAAUoB,KAAKqC,GAAGyP,gBAGxB,OAFA9R,KAAKqC,GAAG0P,aAAanT,EAASgS,GAC9B5Q,KAAKqC,GAAG0P,aAAanT,EAASmS,GACvBnS,I,6BAOX,SAAgB+C,GACZ3B,KAAKqC,GAAGW,gBAAgBhD,KAAKqC,GAAGsM,YAAahN,K,kCAIjD,SAAqB/C,GAEjBoB,KAAK8B,iBAAiBlD,GAGtBoB,KAAKuO,WAAWvO,KAAKqC,GAAG2L,aAAchO,KAAK8N,YAG3C9N,KAAKgS,MAAM,EAAK,EAAK,EAAK,GAC1BhS,KAAKiS,KAAK,K,mBAId,SAAMC,EAAGC,EAAGC,EAAGC,GACXrS,KAAKqC,GAAGiQ,WAAWJ,EAAGC,EAAGC,EAAGC,GAC5BrS,KAAKqC,GAAG2P,MAAMhS,KAAKqC,GAAGkQ,iBAAmBvS,KAAKqC,GAAGmQ,oB,kBAIrD,SAAKC,GACDzS,KAAKqC,GAAGqQ,WAAW1S,KAAKqC,GAAGsQ,UAAY,EAAGF,K,yBAI9C,SAAYtQ,EAAOC,GACfpC,KAAKqC,GAAGuQ,SAAS,EAAG,EAAGzQ,EAAOC,K,6BAQlC,SAAgBxD,EAASI,EAAM6T,EAAkB9X,EAAM+X,EAAYC,GAC/D,IAAIhV,EAAWiC,KAAKqC,GAAG2Q,kBAAkBpU,EAASI,GAGlD,GAFGjB,EAAWiC,KAAKsN,kBAAiBtN,KAAKsN,gBAAkBvP,IAE1C,IAAdA,EACC,OAAQ,EAGZiC,KAAKqC,GAAG4Q,oBACJlV,EACA8U,EACA9X,EACAiF,KAAKqC,GAAG6Q,MACRJ,EACAC,GAEJ/S,KAAKqC,GAAG8Q,wBAAwBpV,K,8BAIpC,SAAiBa,GACVoB,KAAKoT,iBAAmBxU,IAC3BoB,KAAKoT,eAAiBxU,EACtBoB,KAAKqC,GAAGgR,WAAWzU,M,wBAOvB,SAAWA,EAASI,EAAMjE,EAAML,GAC5BsF,KAAK8B,iBAAiBlD,GAGtB,IAAM0U,EAAM,CAAE1U,UAASI,QACnBjB,EAAWiC,KAAK8M,iBAAiByG,IAAID,GAClB,qBAAbvV,IACNA,EAAWiC,KAAKqC,GAAGmR,mBAAmB5U,EAASI,GAC/CgB,KAAK8M,iBAAiBtF,IAAI8L,EAAKvV,IAInCiC,KAAKqC,GAAG,UAAYtH,GAAMgD,EAAUrD,K,wBAGxC,SAAWwK,EAASuO,GAEhBzT,KAAKqC,GAAGqR,cAAc1T,KAAKqC,GAAG,UAAYoR,IAG1CzT,KAAKqC,GAAG+M,YAAYpP,KAAKqC,GAAGyM,WAAY5J,K,2BAO5C,SAAcA,GACVlF,KAAKqC,GAAGL,cAAckD,K,+BAG1B,SAAkBvD,GACd3B,KAAKqC,GAAGJ,kBAAkBN,K,mBAM9B,WACI3B,KAAKqC,GAAGsR,U,wBAIZ,SAAWxF,EAAYG,GACnBtO,KAAKqC,GAAGkM,WAAWJ,EAAYG,K,mBAInC,WACI,OAAOtO,KAAKqC,O,KCvZL,2TCAA,MAA0B,uCC4c1BuR,EAFH,I,WA9aR,aAAe,oBAEX5T,KAAKW,aAAc,EACnBX,KAAK6T,YAAc,KACnB7T,KAAKoB,QAAS,EAEdpB,KAAKU,OAAS,KAGdV,KAAK8T,UAAW,EAChB9T,KAAK+T,OAAS,KAEd/T,KAAKgU,iBAAmB,KAGxBhU,KAAKnB,IAAM,IAAIgO,EACf7M,KAAKiU,GAAK,IAAIhJ,EAEdjL,KAAKkU,GAAK,IAAIlQ,EACdhE,KAAKmU,IAAM,IAAI3T,EACfR,KAAKoU,GAAM,IAAIjR,EACfnD,KAAKqU,IAAM,IAAI1M,EAEf3H,KAAKsU,UAAW,EAEhBtU,KAAK6T,YAAc,CACfK,GAAIlU,KAAKkU,GACTC,IAAKnU,KAAKmU,IACVC,GAAKpU,KAAKoU,GACVC,IAAKrU,KAAKqU,KAGdrU,KAAKuU,gBAAkB,IAAIC,IAG3BxU,KAAKyU,SAAW,K,8CAGpB,SAAW/T,EAAQgU,EAAUD,GACzB,IAAGzU,KAAKW,YAAR,CAGA,IAAKX,KAAKnB,IAAI8V,WAAWjU,GACrB,MAAM,IAAIkU,MAAM,4BAIpB,IAAMnE,EAAWzQ,KAAKnB,IAAI2S,sBAAsB,CAC5C,CAACqD,EC5EE,m5PD6EH,CAACA,EE7EE,uhKFgFP,IAAIpE,EACA,MAAM,IAAImE,MAAM,iCAGpB,kBAAuCnE,EAAvC,GAAOqE,EAAP,KAAuBC,EAAvB,KAQA,GALA/U,KAAKnB,IAAImW,uBACThV,KAAKnB,IAAIqP,uBAAuB4G,EAAgB,gBAChD9U,KAAKnB,IAAIqP,uBAAuB6G,EAAc,eAAgB,eAGzD/U,KAAKkU,GAAGS,WAAWjU,EAAQV,KAAKnB,KACjC,MAAM,IAAI+V,MAAM,0CAIpB,IAAK5U,KAAKmU,IAAIQ,WAAWjU,EAAQoU,EAAgB9U,KAAKnB,KAClD,MAAM,IAAI+V,MAAM,2CAKpB,GAHA5U,KAAKmU,IAAIc,UAAUjV,KAAKoB,SAGpBpB,KAAKoU,GAAGO,WAAWjU,EAAQqU,EAAc/U,KAAKnB,IAAKuE,GACnD,MAAM,IAAIwR,MAAM,yCAYpB,OARI5U,KAAKqU,IAAIM,WAAWjU,EAAQgU,IAC5B9S,QAAQgC,MAAM,mDAGlB5D,KAAKyU,SAAWA,EAChBzU,KAAKU,OAASA,EACdV,KAAKW,aAAc,GAEZ,K,2BAGX,WACI,OAAOX,KAAKW,c,qBAOhB,SAAQoC,GACJ,IAAMpB,EAAM3B,KAAKkU,GAAGgB,iBAEdnT,EAAgB/B,KAAKkU,GAAGiB,mBACxBC,EAA0BpV,KAAKkU,GAAGmB,6BAElCrU,EAAahB,KAAKkU,GAAGoB,gBAErB3X,EAAkBqC,KAAKkU,GAAGvR,SAAS,mBAGzC3C,KAAKmU,IAAIrN,OAAOnF,EAAKyT,EAAyBrS,GAI9C/C,KAAKoU,GAAGtN,OAAO/E,EAAef,EAC1BhB,KAAKkU,GAAGvR,SAAS,iBAAkBhF,EACnCqC,KAAKoB,OAAS,EAAM2B,GAGrB/C,KAAKsU,UACJtU,KAAKqU,IAAIvN,OAAO/D,K,mBAMxB,WAAwB,IAAD,OAAjB8B,EAAiB,uDAAN,KAEV7E,KAAKiU,GAAG/H,cAGXlM,KAAKiU,GAAGsB,aAAY,SAACxS,GACjB,EAAKyS,QAAQzS,GAGV,EAAKuR,UACJ,EAAKD,IAAI1J,OAAO5H,GAGpB8B,GAAYA,OAGhB7E,KAAKiU,GAAGrH,W,+BAGZ,SAAkB/H,GACd7E,KAAKiU,GAAGwB,YAAY5Q,K,kCAGxB,SAAqBA,GACjB7E,KAAKiU,GAAGnI,eAAejH,K,sCAG3B,WACI7E,KAAKiU,GAAGyB,uB,kBAIZ,WACI1V,KAAKiU,GAAG1H,S,8BAGZ,WACI,OAAOvM,KAAKiU,K,4BAGhB,WAAgC,IAAjB3H,EAAgB,uDAAJ,GACvBtM,KAAKiU,GAAG0B,eAAerJ,EAAWtM,KAAKU,U,2BAG3C,WACIV,KAAKiU,GAAG7H,kB,0BAKZ,WACIpM,KAAKkU,GAAGxJ,eACR1K,KAAKqU,IAAI3J,eACT1K,KAAKiE,gBAAkBjE,KAAKiE,eAAejE,KAAKsV,mB,+BAGpD,SAAkBzQ,GACd7E,KAAKkU,GAAG0B,kBAAkB/Q,K,0BAK9B,SAAavB,GACLtD,KAAKsU,SAGLtU,KAAKqU,IAAIwB,aAAavS,GAFtBtD,KAAKoU,GAAGyB,aAAavS,K,yBAS7B,SAAYgR,GACJtU,KAAKqU,IAAIyB,kBAEb9V,KAAKsU,SAAWA,K,kCAGpB,SAAqBvR,GACjB,IAAMgT,EAAQ/V,KAAKmU,IAAIxR,SAAS,0BAChC3C,KAAKgW,YAAY,MAAO,yBAA0B5b,KAAKU,IAAIib,GAAS,EAAIhT,O,yBAG5E,SAAYpG,GAAgC,IAAxBsZ,EAAuB,uDAAN,KAE7Bja,EAAQgE,KAAKmU,IAAIxR,SAAS,SAGxBI,EAAQpG,EAASX,EAKvB,GAJAA,GAAS+G,EAIL/C,KAAKgW,YAAY,MAAO,QAASha,IAGjCia,EAAJ,CAGA,IAAIlD,EAAS/S,KAAKkW,wBAAwB,EACrCD,EAAe,GAAKhV,OAAOC,WAAc,GAAK6B,GAC9CkT,EAAe,GAAKhV,OAAOE,YAAc,GAAK4B,IAG7ChC,EAAWf,KAAKmU,IAAIgC,cAC1BnW,KAAKmU,IAAIiC,YAAY,CAACrV,EAAS,GAAKgS,EAAO,GAAIhS,EAAS,GAAKgS,EAAO,Q,kBAGxE,SAAKA,GACD/S,KAAK8T,UAAW,EAEhB,IAAM/S,EAAWf,KAAKmU,IAAIgC,cACpBna,EAAQgE,KAAKmU,IAAIxR,SAAS,SAGhCoQ,EAAS/S,KAAKkW,wBAAwBnD,GAGtC/S,KAAKmU,IAAIiC,YAAY,CAACrV,EAAS,GAAKgS,EAAO,GAAK/W,EAAO+E,EAAS,GAAKgS,EAAO,GAAK/W,M,uBAGrF,SAAU+X,GACN,GAAG/T,KAAK8T,SAAU,OAAO,EACzB9T,KAAK+T,OAASA,EAId,IAAMhT,EAAWf,KAAKmU,IAAIgC,cAK1B,OAJAnW,KAAKgU,iBAAmB,CAACjT,EAAS,GAAIA,EAAS,IAE/Cf,KAAK8T,UAAW,GAET,I,wBAGX,WACI,QAAI9T,KAAK8T,WACT9T,KAAK8T,UAAW,GACT,K,wBAIX,SAAWf,GACP,IAAI/S,KAAK8T,SAAU,OAAO,EAG1B,IAAM9X,EAAQgE,KAAKmU,IAAIxR,SAAS,SAG1B0T,EAAkBrW,KAAKkW,wBAAwB,EAChDlW,KAAK+T,OAAO,GAAKhB,EAAO,IAAM/W,GAC9BgE,KAAK+T,OAAO,GAAKhB,EAAO,IAAM/W,IAKnCgE,KAAKmU,IAAIiC,YAAY,CACjBpW,KAAKgU,iBAAiB,GAAKqC,EAAgB,GAC3CrW,KAAKgU,iBAAiB,GAAKqC,EAAgB,O,uBAKnD,WACIrW,KAAKmU,IAAImC,YACTtW,KAAKoU,GAAGkC,YACRtW,KAAKyU,UAAYzU,KAAKyU,a,4BAQ1B,WACI,IAAM8B,EAAW,GAGjB,IAAK,IAAMC,KAAkBxW,KAAK6T,YAAa,CAC3C,IAAM4C,EAAazW,KAAK0W,eAAeF,GAGvCD,EAASC,GAAkBC,EAAWE,gBAG1C,OAAOJ,I,4BAGX,SAAeK,GAEX,IAAK,IAAMJ,KAAkBxW,KAAK6T,YAAa,CAC3C,IAAM4C,EAAazW,KAAK0W,eAAeF,GAEjCK,EAAqBD,EAASJ,GACpC,GAAIK,EAAJ,CAEA,IAAMC,EAAgBL,EAAWE,gBAK3BI,EAAgBvX,EAClBD,EAAyBuX,GACzBD,GAIJJ,EAAWO,cAAcD,IAG7B/W,KAAKyU,UAAYzU,KAAKyU,a,0BAO1B,WACI,OAAOzU,KAAKiU,GAAGgD,iB,iCAGnB,WACI,OAAOjX,KAAKiU,GAAGiD,wB,2BAInB,WACI,OAAOlX,KAAKkU,GAAGoB,kB,4BAGnB,SAAekB,GACX,IAAMC,EAAazW,KAAK6T,YAAY2C,GACpC,IAAIC,EAAY,MAAM,IAAI7B,MAAM,sBAChC,OAAO6B,I,sBAGX,SAASD,EAAgBzY,GACrB,GAAIiC,KAAKW,YACT,OAAOX,KAAK0W,eAAeF,GAC1B7T,SAAS5E,K,wBAEd,SAAWyY,EAAgBzY,GACvB,GAAIiC,KAAKW,YACT,OAAOX,KAAK0W,eAAeF,GAC1BW,WAAWpZ,K,2BAGhB,SAAcyY,GACV,GAAIxW,KAAKW,YACT,OAAOX,KAAK0W,eAAeF,GAAgBG,kB,wBAG/C,WACI,OAAO3W,KAAK8T,W,sBAGhB,WACI,OAAO9T,KAAKoB,S,yBAOhB,SAAYoV,EAAgBzY,EAAUrD,GAClC,GAAIsF,KAAKW,YAAT,CAEAX,KAAKyU,UAAYzU,KAAKyU,WAEtB,IAAM5R,EAAS7C,KAAK0W,eAAeF,GAAgBR,YAAYjY,EAAUrD,GAEnE4Y,EAAMkD,EAAiB,IAAMzY,EAC7B8G,EAAW7E,KAAKuU,gBAAgBhB,IAAID,GAG1C,OAFGzO,GAAUA,EAAS2R,EAAgBzY,EAAUrD,GAEzCmI,K,uBAGX,SAAUzB,GACNpB,KAAKoB,OAASA,EACdpB,KAAKmU,IAAIc,UAAUjV,KAAKoB,U,+BAG5B,SAAkBoV,EAAgBzY,EAAU8G,GACxC,IAAMyO,EAAMkD,EAAiB,IAAMzY,EACnCiC,KAAKuU,gBAAgB/M,IAAI8L,EAAKzO,K,qCAMlC,SAAwB9D,GACpB,IAAMoB,EAAQlB,OAAOC,WACfkB,EAASnB,OAAOE,YAGhB4D,EAAc3C,EAASD,EAG7B,MAAO,CAACpB,EAAS,GAAKoB,EAAOpB,EAAS,GAAKgE,EAAc3C,O,MGtc3DgV,EAAe,SAACC,GAAD,OAAeA,EACjCC,QAAQ,YAAY,SAACC,GAAD,iBAAeA,MACnCD,QAAQ,MAAM,SAACC,GAAD,OAAWA,EAAMC,iBAC/BC,QAEGC,EAAiB,SAACC,EAAS3Y,GAC/B,IAAI4Y,EAAOC,SAASC,cAAc,KAClCF,EAAKG,KAAOJ,EACZC,EAAKI,SAAWhZ,EAChB4Y,EAAKK,SAQDC,EAAW,SAACxd,GAChB,MAAyB,kBAAVA,GAGXyd,EAAkB,SAACla,EAAQma,GAC/B,OAAOja,OAAOka,QAAQpa,GAAQgI,KAAI,WAAgBqS,GAAhB,uBAAEzY,EAAF,KAAQnF,EAAR,YAC9B0d,EAAKvY,EAAMnF,EAAO4d,OAIlBC,EAAQ,SAAC7d,EAAO8d,GAClB,OAAQ9d,EAAM+d,QAAQD,GAAa,I,qBCfxBE,EARD,SAAC,GAAoB,IAAjBC,EAAgB,EAAhBA,UACd,OACI,qBAAKC,UAAU,kBAAf,SACI,qBAAKA,UAAW,gBAAkBD,OCR/B,MAA0B,mCCA1B,OAA0B,sCCA1B,OAA0B,kCCA1B,OAA0B,iCCA1B,OAA0B,uCCmBnCE,I,MAAa,CAAC,CACZC,MAAO,wCACPC,QACI,gCACA,yYAMA,sQAKA,gHAEW,mBAAGC,OAAO,SAASC,IAAI,aAAalB,KAAK,wDAAzC,uBAFX,4BAGc,mBAAGiB,OAAO,SAASC,IAAI,aAAalB,KAAK,6CAAzC,uBAHd,4GAKU,mBAAGiB,OAAO,SAASC,IAAI,aAAalB,KAAK,8CAAzC,2BALV,8HAQA,wdAMA,sVAKA,+IAMR,CACIe,MAAO,UACPC,QACI,gCACA,qCACQ,mDADR,0GAEQ,4CAFR,6CAEoE,2CAFpE,oDAEsI,uCAFtI,qDAGsD,iDAHtD,gEAII,kDAJJ,iIAMA,mDACsB,mBAAGC,OAAO,SAASC,IAAI,aAAalB,KAAK,6CAAzC,uBADtB,gCAE+B,8CAF/B,qBAOR,CACIe,MAAO,QACPC,QACI,gCACA,qCACQ,iDADR,uFAEsC,wCAFtC,kUAMA,uEAC0C,uCAD1C,2FAEQ,uCAFR,oBAEsC,wCAFtC,0EAE2H,sCAF3H,oBAOR,CACID,MAAO,SACPC,QACI,8BACA,qCACQ,kDADR,2RAQR,CACID,MAAO,KACPC,QACI,8BACA,qCACQ,8CADR,oSAUNG,GAAQ,CAAC,CACPJ,MAAO,cACPT,QAAS,CACL,CACAT,KA9GO,8BA+GP7Z,SAAU,SACVob,KAAMC,EACN3e,YAAa,qDACb,CACAmd,KAlHW,uCAmHX7Z,SAAU,aACVob,KAAME,GACN5e,YAAa,qDAIrB,CACIqe,MAAO,eACPT,QAAS,CACL,CACAT,KA5HU,sCA6HV7Z,SAAU,YACVob,KAAMG,GACN7e,YAAa,+CACb,CACAmd,KAhIK,8BAiIL7Z,SAAU,OACVob,KAAMI,GACN9e,YAAa,oDAIrB,CACIqe,MAAO,UACPT,QAAS,CACL,CACAT,KA1IM,wBA2IN7Z,SAAU,QACVob,KAAMK,GACN/e,YAAa,wDAmPVgf,GA5OE,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,gBAEvD,EAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGAC,qBAAU,WACHL,GAAMI,EAAeJ,KACzB,CAACA,IAEJ,IAKMM,EAAsB,SAACxB,GACzBsB,EAAe7f,KAAKU,IAAIV,KAAKS,IAAImf,EAAcrB,EAZvC,GAYwD,KA6D9DyB,EAAkB,WAmBpB,OACI,sBACIxB,UAAU,mCADd,UAGI,oBAAIA,UAAU,QAAd,SAAuBc,IAGnBb,GAAa5S,KAAI,SAACxL,EAAa6d,GAAd,OAxBD,SAAC7d,EAAa6d,GACtC,OACI,sBACIM,UAAU,qBADd,UAII,oBAAIA,UAAU,4BAAd,SACKne,EAAYqe,QAEjB,qBAAKF,UAAU,6BAAf,SACKne,EAAYse,YANZT,GAqBD+B,CAAoB5f,EAAa6d,UAQ/CgC,EAAa,WAgDf,OACI,sBAAK1B,UAAU,8BAAf,UAEI,oBAAIA,UAAU,QAAd,+BAGIM,GAAQjT,KAAI,SAACsU,EAAUjC,GACnB,OArDO,SAACiC,EAAUjC,GAE9B,IAAMkC,EAAc,SAACC,EAAOC,GACxB,OACI,sBACI9B,UAAU,0BADd,UAII,qBAAKA,UAAU,oCAAf,SACI,oBACIA,UAAU,gCACVb,KAAM0C,EAAM7C,KACZoB,OAAO,SACPC,IAAI,aAJR,UAMKwB,EAAMtB,KAAO,qBAAKP,UAAU,OAAO7I,IAAK0K,EAAMtB,KAAMwB,IAAI,KAAQ,KACjE,qBAAK/B,UAAU,sCAAf,SACK6B,EAAM1c,gBAInB,qBAAK6a,UAAU,uCAAf,SACK6B,EAAMhgB,gBAhBN6d,EAAQ,IAAMoC,IAuB/B,OACI,sBAEI9B,UAAU,mBAFd,UAII,oBAAIA,UAAU,0BAAd,SAAyC2B,EAASzB,QAG9CyB,EAASlC,QAAQpS,KAAI,SAACwU,EAAOnC,GACzB,OAAOkC,EAAYC,EAAOnC,QAP7BA,GAsBMsC,CAAeL,EAAUjC,UAkBpD,OACI,sBACIM,UAAW,aACJgB,EAAa,sBAAwB,IAFhD,UAKI,wBACIhB,UAAU,0BACViC,QAvLQ,SAACC,GACjBhB,EAAgBgB,MA0LZ,qBAAKlC,UAAU,qBAAf,SAtBW,WACf,OAAQoB,GACJ,KAAK,EAAG,OAAOI,IACf,KAAK,EAAG,OA9JK,WAEjB,IAAMW,EAAmB,SAACC,GAEtB,IAAMC,EAAY,SAAC3H,GACf,OAAOA,GACH,IAAK,IAAK,MAAO,QACjB,IAAK,IAAK,MAAO,QACjB,IAAK,IAAK,MAAO,OACjB,QAAS,OAAO8D,EAAa9D,KAKjC4H,EAAO,GAWX,OAPIA,EADDxb,MAAMC,QAAQqb,EAASE,MACfF,EAASE,KAAKC,QAAO,SAACC,EAAKhb,GAAN,OAAY6a,EAAUG,GAAO,MAAQH,EAAU7a,MAGpE6a,EAAUD,EAASE,MAK1B,sBAAKtC,UAAU,iBAAf,UACI,qBAAKA,UAAU,uBAAf,SACKsC,IAEL,qBAAKtC,UAAU,8BAAf,SACKoC,EAASvgB,kBAO1B,OACI,sBAAKme,UAAU,gCAAf,UACI,oBAAIA,UAAU,QAAd,gCAEA,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,wBAAf,iBACA,qBAAKA,UAAU,gCAAf,8BAIAe,EAAU1T,KAAI,SAAC+U,EAAU1C,GAAX,OACV,8BAAkByC,EAAiBC,IAAzB1C,SA6GP+C,GACf,KAAK,EAAG,OAAOf,IACf,QAAS,OAAO,MAkBXgB,KAIL,sBAAK1C,UAAU,qBAAf,UAEI,yBACIA,UACI,2DACmB,IAAhBoB,EAAoB,gCAAkC,IAE7Da,QAAS,kBAAMV,GAAqB,IALxC,UAOI,cAAC,EAAD,CAAOxB,UAAW,SAClB,cAAC,EAAD,CAAOA,UAAW,SAClB,cAAC,EAAD,CAAOA,UAAW,YAKtB,sBAAKC,UAAU,yBAAf,UAA0CoB,EAAc,EAAxD,QAGA,yBACIpB,UACI,uDA3NR,IA4NWoB,EAAsB,gCAAkC,IAE/Da,QAAS,kBAAMV,EAAoB,IALvC,UAOI,cAAC,EAAD,CAAOxB,UAAW,UAClB,cAAC,EAAD,CAAOA,UAAW,UAClB,cAAC,EAAD,CAAOA,UAAW,oBCxYhC4C,GAAsBC,0BACtBC,GAA4BD,0BAE5BE,GAA0BF,0BAC1BG,GAAqBH,0BAEdI,GAAyB,WAClC,OAAOC,qBAAWN,KAWTO,GAAwB,WACjC,OAAOD,qBAAWF,KAKTI,GAA8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,EAA4CjC,mBAAS,MAArD,mBAAOkC,EAAP,KAAuBC,EAAvB,KACA,EAAwCnC,mBAAS,MAAjD,mBAAOoC,EAAP,KAAqBC,EAArB,KACMvX,EAAWwX,iBAAO,MAgBxB,OACI,cAACd,GAAoBe,SAArB,CAA8B5hB,MAAO,CAACuhB,EAAgBE,GAAtD,SACI,cAACV,GAA0Ba,SAA3B,CAAoC5hB,MAAO,CAZtB,SAAC6f,EAAUnM,GACpC8N,EAAkB3B,GAClB6B,EAAgBhO,KAUZ,SACI,cAACsN,GAAwBY,SAAzB,CAAkC5hB,MARrB,SAACuR,GAEtBpH,EAAS3F,QAAU+M,GAMX,SACI,cAAC0P,GAAmBW,SAApB,CAA6B5hB,MAlBjB,SAAC6hB,EAAe9hB,GACxCoK,EAAS3F,SAAW2F,EAAS3F,QAAQqd,EAAe9hB,IAiBxC,SACKuhB,WCFVQ,I,MAvCK,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,WACpB,EAA2Bb,KAApBK,EAAP,oBACA,EDEOJ,qBAAWJ,ICFXiB,EAAP,oBACMC,EAAsBb,KAW5B,OACI,qBAAKlD,UAAU,eAAf,SAGIT,EAAgBsE,GAAY,SAAClC,EAAUnM,EAAMkK,GAAjB,OACxB,qBAEIM,UAAW,oCACR2B,IAAa0B,EAAiB,4CAA8C,IAC/EpB,QAAS,SAACC,GAAD,OAlBL,SAACA,EAAGP,EAAUnM,GAC3B0M,GAAGA,EAAE8B,cAAcC,OACnBZ,IAAmB1B,EAAUmC,EAAqB,KAAM,MACtDA,EAAqBnC,EAAUkC,EAAWlC,IAE/CnM,EAAK0O,iBAAmB1O,EAAK0O,gBAAgBb,IAAmB1B,GAapCwC,CAAYjC,EAAGP,EAAUnM,IACzC4O,YAAa,kBAAML,EAAoBpC,EAAUnM,EAAK3T,cAL1D,SAOI,qBACIme,UAAW,0BACR2B,IAAa0B,EAAiB,kCAAoC,IAFzE,SAIK7N,EAAKpP,MAAQoY,EAAamD,MAV1BA,EAAW,IAAMjC,U,UC8D3B2E,I,MAtFK,SAAC,GAAgG,IAA9FC,EAA6F,EAA7FA,MAAOC,EAAsF,EAAtFA,YAAaC,EAAyE,EAAzEA,aAAcld,EAA2D,EAA3DA,SAAUrF,EAAiD,EAAjDA,IAAKC,EAA4C,EAA5CA,IAAKG,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAkBmiB,GAAe,EAA1B7E,UAA0B,EAAf6E,UAC3FC,EAAMjB,mBAKZ,EAA0BtC,mBAASxB,EAAM4E,MAAzC,mBAAOI,EAAP,KAAcC,EAAd,KAKAtD,qBAAU,WACNsD,EAASjF,EAAM4E,QAChB,CAACA,IAIJ,IAAMM,EAAe,SAACrd,GACfA,IAAM+c,MACLK,EAASjF,EAAMnY,IACfF,EAASE,KAKXsd,EAAe,SAACC,GAElBA,EAAMC,iBAGN,IAAM7a,GAAS3I,KAAKyjB,KAAKF,EAAMG,QAAU7iB,EACrCmF,EAAI+c,IAAgBpa,EAGxB3C,EAAIhG,KAAKS,IAAIT,KAAKU,IAAIsF,EAAGvF,GAAMC,GAG5BI,IACCkF,EAAIlF,EAAMigB,QAAO,SAAC9I,EAAGD,GACjB,OAAOhY,KAAK2jB,IAAI3L,EAAIhS,GAAKhG,KAAK2jB,IAAI1L,EAAIjS,GAAKgS,EAAIC,MAIvDoL,EAAard,IAIX4d,EAAoB,SAACL,GACvBF,EAAaL,IAgBjB,OAZAlD,qBAAU,WACN,IAAM+D,EAAUX,EAAIpe,QAKpB,OAHA+e,EAAQC,iBAAiB,QAASR,GAClCO,EAAQC,iBAAiB,WAAYF,GAE9B,WACHC,EAAQE,oBAAoB,QAAST,GACrCO,EAAQE,oBAAoB,WAAYH,OAK5C,sBACIpF,UAAU,eADd,UAGI,sBAAKA,UAAU,uBAAf,UACI,oBAAIA,UAAU,sBAAd,SAAqCsE,IACrC,qBAAKtE,UAAU,sBAAf,SAAsC2E,OAE1C,cAACa,GAAA,EAAD,CAAQxF,UAAU,uBAEdle,MAAO6iB,EACPrd,SAAU,SAAC4a,EAAG1a,GAAJ,OAAUqd,EAAard,IACjCvF,IAAKA,EACLC,IAAKA,EACLG,KAAMA,EACNC,MAAOA,EACPoiB,IAAKA,GAPAD,EAAW,iB,UC5BjBJ,I,MA9CK,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,YAAajd,EAAyB,EAAzBA,SAAUmd,EAAe,EAAfA,SAC3CC,EAAMjB,mBAKZ,EAA0BtC,mBAASoD,KAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAKAtD,qBAAU,WACNsD,EAASL,OACV,CAACA,IAcJ,OACI,sBACIvE,UAAW,gBAAkB2E,EAAQ,wBAA0B,IAC/DD,IAAKA,EAFT,UAII,oBAAI1E,UAAU,sBAAd,SAAqCsE,IACrC,cAACmB,GAAA,EAAD,CACIzF,UAAW,wBAA0B2E,EAAQ,gCAAkC,IAE/Eve,KAAMqe,EACNiB,UAASf,EACTrd,SArBS,SAAC4a,GAClB,GAAIA,EAAE9B,OAAN,CACA,IAAM5Y,EAAI0a,EAAE9B,OAAOsF,QAChBle,IAAM+c,MACLK,EAASpd,GACTF,EAASE,GACT0a,EAAE9B,OAAO6D,UAgBL0B,KAAM,QACNhX,MAAO,WALF8V,Q,SCFNmB,I,MA/BI,SAAC,GAAgD,IAA9CtB,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,YAAajd,EAAyB,EAAzBA,SAAUmd,EAAe,EAAfA,SAGhD,EAA0BtD,mBAASoD,KAAnC,mBAAO5V,EAAP,KAAckX,EAAd,KAGAvE,qBAAU,WACNuE,EAAStB,OACV,CAACA,IAUJ,OACI,sBAAKvE,UAAU,cAAf,UACI,uBAAOA,UAAU,qBAAjB,SAAuCsE,IACvC,cAAC,KAAD,CACItE,UAAU,4BAEVrR,MAAOA,EACPrH,SAdS,SAACwe,GACfA,IAAavB,MACZsB,EAASC,GACTxe,EAASwe,MASArB,QCyENsB,I,MA1FD,SAAC,GAAsD,IAApDxC,EAAmD,EAAnDA,aAAcpd,EAAqC,EAArCA,UAAWse,EAA0B,EAA1BA,SAAU7E,EAAgB,EAAhBA,UAChD,EAAgCuB,oBAAS,GAAzC,mBAAO6E,EAAP,KAAgBC,EAAhB,KAMA3E,qBAAU,WACNtG,EAAIkL,kBAAkB3C,EAAa1F,WAAY4G,GAAU,WACrDwB,GAAcD,QAEnB,CAACA,EAASzC,EAAa1F,WAAY4G,IAGtC,IAAM0B,EAAS5C,EAAa4C,OACtBC,EAAS7C,EAAa6C,OACtBpiB,EAAWuf,EAAavhB,QAmE9B,OACI,qBAAKge,UAAU,kBAAf,SAjBqB,WACrB,IAAI5Z,EAAOqe,EAAS7e,MAAM2d,EAAa8C,WAGvC,OAFAjgB,EAAOA,EAAKA,EAAKzE,OAAS,GAEJ,UAAnBwE,EAAUhE,KAhBS,SAACiE,EAAMqe,GAC7B,OACI,cAAC,GAAD,CAEIH,MAAO9F,EAAapY,GACpBme,YAAa,kBAAM4B,EAAO1B,IAC1Bnd,SAAU,SAACE,GAAD,OAAO4e,EAAO3B,EAAUjd,IAClCid,SAAUA,GAJLA,GAcF6B,CAAkBlgB,EAAMqe,GACP,IAAlBte,EAAUlE,KAAiC,IAAlBkE,EAAUjE,MACzCiE,EAAU9D,MAA2B,IAAnB8D,EAAU9D,MAAoC,OAAnB8D,EAAUhE,MA/B1C,SAACiE,EAAMqe,GACxB,OACI,cAAC,GAAD,CAEIH,MAAO9F,EAAapY,GACpBme,YAAa,kBAAM4B,EAAO1B,IAC1Bnd,SAAU,SAACE,GAAD,OAAO4e,EAAO3B,EAAUjd,IAClCid,SAAUA,GAJLA,GA6BF8B,CAAangB,EAAMqe,GAxDb,SAACte,EAAWC,EAAMqe,GACnC,OAAQ,cAAC,GAAD,CAEJH,MAAO9F,EAAapY,GACpBme,YAAa,kBAAM4B,EAAO1B,IAC1BD,aAAcxgB,EAASygB,GACvBnd,SAAU,SAACE,GAAD,OAAO4e,EAAO3B,EAAUjd,IAClCvF,IAAKkE,EAAUlE,IACfC,IAAKiE,EAAUjE,IACfG,KAEI8D,EAAUV,eAAe,QAAUU,EAAU9D,KAIzB,OAAnB8D,EAAUhE,KAAgB,GAAKgE,EAAUjE,IAAMiE,EAAUlE,KAAO,IAErEK,MAAO6D,EAAU7D,MACjBsd,UAAWA,EACX6E,SAAUA,GAjBLA,GAyDE+B,CAAargB,EAAWC,EAAMqe,GAOpCgC,OCZEC,I,YA3EO,SAAC,GAAgE,IAA7DnD,EAA4D,EAA5DA,aAAcpd,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,KAAMugB,EAA6B,EAA7BA,WAAY/G,EAAiB,EAAjBA,UACjE,EAAgCuB,oBAAS,GAAzC,mBAAOyF,EAAP,KAAiBC,EAAjB,KACM9C,EAAsBb,KAOtB4D,EAAa,SAACC,GAChB,OAAOA,GACCH,EAAY,IAAMG,EAAY,aAAgB,KA6C1D,OACI,sBAAK/G,UAAW8G,EAAW,4BAA3B,UACI,sBACI9G,UAAW8G,EAAW,yBACtB7E,QAxDQ,SAACC,GACdA,GAAGA,EAAE9B,OAAO6D,OACf4C,GAAaD,IAuDLxC,YAAa,kBAAML,EAAoBR,EAAa1F,WAAa,IAAMzX,EAAMD,EAAUtE,cAH3F,UAKI,oBAAIme,UAAW8G,EAAW,wBAA1B,SACKtI,EAAapY,KAElB,cAAC,EAAD,CAAO2Z,UAAW6G,EAAW,KAAO,YAExC,qBAAK5G,UAAW8G,EAAW,0BAA3B,SApDc,SAAhBE,EAAiB7gB,EAAWC,EAAMugB,EAAYM,GAChD,OACI,sBACIjH,UAAW,2BAA6BiH,EAAO,GAAK,QADxD,UAIMA,EAOC,GANA,oBACKjH,UAAU,iCACVoE,YAAa,kBAAML,EAAoBR,EAAa1F,WAAa,IAAM8I,EAAYxgB,EAAUtE,cAFlG,SAIK2c,EAAapY,KAGpBmZ,EAAgBpZ,EAAUrE,OAAO,SAACsE,EAAM8gB,GACrC,IAAMzC,GAAYkC,EAAcA,EAAapD,EAAa8C,UAAa,IAAMjgB,EAE7E,OAAGkZ,EAAS4H,EAAMplB,OACPklB,EAAcE,EAAO9gB,EAAMqe,GAAU,GAI5C,qBACIzE,UAAU,iCAEVoE,YAAa,kBAAML,EAAoBR,EAAa1F,WAAa,IAAM4G,EAAUyC,EAAMrlB,cAH3F,SAKI,cAAC,GAAD,CACI0hB,aAAcA,EACdpd,UAAW+gB,EACXzC,SAAUA,EACV7E,UAAWA,KAPV6E,QApBZkC,GAiDJK,CAAc7gB,EAAW,KAAMwgB,GAAY,UCN7CQ,GA9DU,SAAC,GAAqB,IAAlB/gB,EAAiB,EAAjBA,KAAMoP,EAAW,EAAXA,KAC/B,EAA2BwN,KAApBK,EAAP,oBACMU,EAAsBb,KAkD5B,OACI,sBAAKlD,UAAW,qBAAuB5Z,IAASid,EAAiB,6BAA+B,IAAhG,UACK7N,EAAK4R,OA9CN,qBAAKpH,UAAU,oCAAf,SACI,qBAAKA,UAAU,kCAAf,SACKT,EAAgB/J,EAAKtQ,YAAY,SAACkB,EAAMD,EAAWuZ,GAChD,OAAOJ,EAASnZ,EAAUrE,OAAS,KACnC,qBACIke,UAAU,gCACVoE,YAAa,kBAAML,EAAoBvO,EAAKqI,WAAa,IAAMzX,EAAMD,EAAUtE,cAFnF,SAII,cAAC,GAAD,CACI0hB,aAAc/N,EACdrP,UAAWA,EACXse,SAAUre,EACVwZ,UAjBV,KASYF,UAmBnBH,EAAgB/J,EAAKtQ,YAAY,SAACkB,EAAMD,EAAWuZ,GACtD,GAAIJ,EAASnZ,EAAUrE,OACnB,OACI,qBACIke,UAAU,yCADd,SAII,cAAC,GAAD,CACIuD,aAAc/N,EACdrP,UAAWA,EACXC,KAAMA,EACNugB,WAAYvgB,EACZwZ,UAxCN,KAiCOF,MAqBhBlK,EAAK6R,UC/CHC,I,MAhBA,SAAC,GAA6B,IAA3B1Z,EAA0B,EAA1BA,KAAM2Z,EAAoB,EAApBA,OAAQ1Z,EAAY,EAAZA,MAC5B,OACI,sBAAKmS,UAAU,SAAf,UACI,qBAAKA,UAAU,iBAAf,SACKpS,IAEL,qBAAKoS,UAAU,mBAAf,SACKuH,IAEL,qBAAKvH,UAAU,kBAAf,SACKnS,SC6BF2Z,I,OApCC,WACZ,IAAMC,ETQCxE,qBAAWH,ISPlB,EAA0C3B,mBAAS,MAAnD,mBAAOwC,EAAP,KAAsB+D,EAAtB,KACA,EAAsCvG,mBAAS,MAA/C,mBAAOtf,EAAP,KAAoB8lB,EAApB,KAaA,GAXArG,qBAAU,WAENmG,GACI,SAACtiB,EAAUtD,GACP6lB,EAAiBviB,GACjBwiB,EAAe9lB,UAMvB8hB,EAAe,OAAO,KAS1B,OAEI,sBAAK3D,UAAU,oBAAf,UACI,oBAAIA,UAAU,iBAAd,SATY,SAAC2D,GACjB,IAAMiE,EAAYjE,EAAckE,YAAY,KAC5C,OAA4BrJ,GAAV,IAAfoJ,EAAsCjE,EACrBA,EAAcmE,OAAOF,EAAY,IAMjBG,CAAYpE,KAC5C,qBAAK3D,UAAU,mBAAf,SACKne,SCQFmmB,I,OAhCM,SAAC,GAA0C,IAAxCnE,EAAuC,EAAvCA,WAAYoE,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,YACxC,OACI,qBAAKlI,UAAU,gBAAf,SAEI,eAAC,GAAD,WACI,cAAC,GAAD,CACIpS,KAAMqa,EAAOra,KACb2Z,OAAQU,EAAOV,OACf1Z,MAAOoa,EAAOpa,QAGlB,cAAC,GAAD,CAAagW,WAAYA,IAErBtE,EAAgBsE,GAAY,SAACzd,EAAMoP,EAAMkK,GAAb,OAExB,aADA,CACC,GAAD,CAEItZ,KAAMA,EACNoP,KAAMA,GAFDpP,EAAO,IAAMsZ,MAO9BwI,EACM,cAAC,GAAD,IACA,YCgBPC,I,OA/CA,SAAC,GAAgH,IAA9G/hB,EAA6G,EAA7GA,KAAMgiB,EAAuG,EAAvGA,WAAuG,IAA3FC,gBAA2F,SAAzEpG,EAAyE,EAAzEA,QAAyE,IAAhEqG,mBAAgE,SAA5C3D,EAA4C,EAA5CA,MAAO4D,EAAqC,EAArCA,OAAQ1mB,EAA6B,EAA7BA,YAAauhB,EAAgB,EAAhBA,SAC3G,EAA4BjC,oBAAS,GAArC,mBAAOqH,EAAP,KAAeC,EAAf,KACM1E,EAAsBb,KAE5B5B,qBAAU,WACO,OAAVqD,GACC8D,EAAU9D,KAEf,CAACA,IAEJ,IAAMmC,EAAa,SAACC,GAChB,OAAOA,GACFyB,EAAU,IAAMzB,EAAY,WAAc,KAgBnD,OACI,qBACI/G,UAAW8G,EAAW,oBACtB7E,QAhBY,SAACC,GAGjB,GAFGA,GAAKoG,GAAapG,EAAE9B,OAAO6D,OAE1BmE,GAAgC,qBAAVzD,EAA1B,CAKA,IAAM+D,GAAYF,EAClBC,EAAUC,GACVzG,EAAQC,EAAGwG,QANPzG,EAAQC,IAaRkC,YAAa,WACTL,GAAuBA,EAAoB,UAAY3d,EAAMvE,IAJrE,SAOI,yBACIme,UAAW8G,EAAW,UACtB/a,MAAO,CAAE4c,aAAcJ,GAF3B,UAIKF,EAAW,KAAQG,EAASJ,EAAahiB,EACzCgd,SCvBFwF,I,OAnBG,SAAC,GAAuC,IAApCxiB,EAAmC,EAAnCA,KAAMyiB,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,QACxC,EAA0B3H,mBAAS2H,GAAnC,mBAAOhnB,EAAP,KAAcinB,EAAd,KAMA,OAJAzH,qBAAU,WACNuH,EAAeE,KAChB,CAACF,IAGA,sBAAK7I,UAAU,aAAf,UACI,sBAAKA,UAAU,mBAAf,UACK5Z,EADL,OAGA,qBAAK4Z,UAAU,oBAAf,SACKle,SCOFknB,I,OAnBG,SAAC,GAAiB,IAAfvJ,EAAc,EAAdA,QACjB,OACI,qBAAKO,UAAU,aAAf,SACKT,EAAgBE,GAAS,SAACrZ,EAAMtE,EAAO4d,GAAd,OACtB,qBACIM,UAAU,8BADd,SAII,cAAC,GAAD,CACI5Z,KAAMoY,EAAapY,GACnB0iB,QAAS,EACTD,eAAgB/mB,EAAM+mB,kBALrBnJ,UCuoBVuJ,GA9nBH,SAACC,GAIX,IAAMC,EAAiB1F,mBACjB2F,EAAiB3F,mBACjB4F,EAAiB5F,mBAKvB,EAAoB6F,sBAAW,SAAA9b,GAAC,OAAIA,EAAI,IAAG,GAAlCwY,EAAT,oBAEA,EClC8B,WAK9B,IAAMuD,EAAY9F,iBAAO,IAGnB+F,EAAiB/F,iBAAO,IAGxBgG,EAAchG,iBAAO,IAGrBiG,EAAc,SAACxH,GACnB,IAAMxH,EAAMwH,EAAExH,IACRiK,EAAmB,YAAXzC,EAAE/f,KAIbwiB,IAAUgF,EAAOjP,IACf8O,EAAeljB,QAAQoU,KACxBwH,EAAE8C,iBACFwE,EAAeljB,QAAQoU,GAAKwH,IAKhCqH,EAAUjjB,QAAQoU,GAAOiK,GAIrBgF,EAAS,SAACjP,GACd,OAAgC,EAAzB6O,EAAUjjB,QAAQoU,IAKrBkP,EAAa,SAAbA,EAActH,EAAMuH,EAAQxkB,GAChC,GAAGyB,MAAMC,QAAQub,GAAjB,CAAyB,IAAD,gBACLA,GADK,IACtB,IAAI,EAAJ,qBACEsH,EADqB,QACLC,EAAQxkB,GAFJ,oCAMxBA,EAAOid,GAAQuH,GA+BjB,OAXAvI,qBAAU,WAKR,OAHAjZ,OAAOid,iBAAiB,UAAWoE,GACnCrhB,OAAOid,iBAAiB,QAASoE,GAE1B,WACLrhB,OAAOkd,oBAAoB,UAAWmE,GACtCrhB,OAAOkd,oBAAoB,QAASmE,OAIjC,CAACC,EA3BW,SAACrH,EAAMuH,GACxBD,EAAWtH,EAAMuH,EAAQL,EAAeljB,UAIxB,SAACgc,EAAMuH,GACvBD,EAAWtH,EAAMuH,EAAQJ,EAAYnjB,UAIZ,WACzBf,OAAOka,QAAQgK,EAAYnjB,SAASC,SAAQ,YAAoB,IAAD,mBAAjBmU,EAAiB,KAAZmP,EAAY,KAC1DF,EAAOjP,IAAMmP,SD3BoCC,GAAxD,mBAASC,EAAT,KAAuBC,EAAvB,KAAkCC,EAAlC,KAEA,EAA4B9I,oBAAS,GAArC,mBAAO3Y,EAAP,KAAe6T,EAAf,KACA,EAAsC8E,oBAAS,GAA/C,mBAAO+I,EAAP,KAAoBC,EAApB,KACA,EAA8ChJ,oBAAS,GAAvD,mBAAOiJ,EAAP,KAAwBC,EAAxB,KAEA,EAAgClJ,oBAAS,GAAzC,mBAAOzF,EAAP,KAAiB4O,EAAjB,KASMC,EAAc,SAACrI,GAChBA,GAAGA,EAAE9B,OAAO6D,OACfjJ,EAAIqB,WAAW7T,GACf6T,GAAW7T,IAGPgiB,EAAuB,SAACrgB,GAC5B6Q,EAAIwP,qBAAqBrgB,IAGrBsgB,EAAc,SAAC1mB,GACnBiX,EAAI0P,YAAY3mB,IAGZ2Z,EAAY,SAACwE,GACdA,GAAGA,EAAE9B,OAAO6D,OACfjJ,EAAI0C,YACJsI,KAGI2E,EAAkB,SAACzI,EAAGjP,GACvBiP,GAAGA,EAAE9B,OAAO6D,OACZhR,EACD+H,EAAI+B,eAAe,IAEnB/B,EAAIxH,iBAIFoX,EAAQ,SAACjG,GACb3J,EAAIsP,YAAY3F,GAChB2F,EAAYtP,EAAIU,WAGZmP,EAAW,SAAC3I,GAChB0I,GAAOlP,IAKHoP,EAAa,SAAC5I,GACfA,GAAGA,EAAE9B,OAAO6D,OACf,IAAM8G,GAAWb,EACjBC,EAAeY,GAEf,IAAMC,EAAc,SAAdA,EAAe9I,IAEfA,EAAExH,KAAiB,WAAVwH,EAAExH,KAAgC,UAAXwH,EAAE/f,QACpCgoB,GAAe,GAGf9hB,OAAOkd,oBAAoB,UAAWyF,GACtC7B,EAAU7iB,QAAQif,oBAAoB,QAASyF,GAAa,KAM7DD,IACD5B,EAAU7iB,QAAQgf,iBAAiB,QAAS0F,GAAa,GACzD3iB,OAAOid,iBAAiB,UAAW0F,KAWjCjK,EAAY,CAChB,CACEuB,KAAM,IACNuH,OAAQ,SAAC3H,GACPqI,KAEFU,QAAQ,EACRppB,YAAa,gBAEf,CACEygB,KAAM,IACNuH,OAAQ,SAAC3H,GACPsI,GAAsB,MAExBS,QAAQ,EACRppB,YAAa,4BAEf,CACEygB,KAAM,IACNuH,OAAQ,SAAC3H,GACPsI,EAAqB,MAEvBS,QAAQ,EACRppB,YAAa,4BAEf,CACEygB,KAAM,IACNuH,OAAQ,SAAC3H,GACPuI,EAAY,MAEdQ,QAAQ,EACRppB,YAAa,YAEf,CACEygB,KAAM,IACNuH,OAAQ,SAAC3H,GACPuI,GAAa,MAEfQ,QAAQ,EACRppB,YAAa,WAEf,CACEygB,KAAM,CAAC,YAAa,KACpBuH,OAAQ,WACNqB,EAAe,EAAE,GAAI,KAEvBD,QAAQ,EACRppB,YAAa,aAEf,CACEygB,KAAM,CAAC,aAAc,KACrBuH,OAAQ,WACNqB,EAAe,CAAC,GAAI,KAEtBD,QAAQ,EACRppB,YAAa,cAEf,CACEygB,KAAM,CAAC,UAAW,KAClBuH,OAAQ,WACNqB,EAAe,CAAC,EAAG,MAErBD,QAAQ,EACRppB,YAAa,gBAEf,CACEygB,KAAM,CAAC,YAAa,KACpBuH,OAAQ,WACNqB,EAAe,CAAC,GAAI,MAEtBD,QAAQ,EACRppB,YAAa,kBAEf,CACEygB,KAAM,IACNuH,OAAQ,WACNnM,KAEFuN,QAAQ,EACRppB,YAAa,mCAEf,CACEygB,KAAM,IACNuH,OAAQ,SAAC3H,GACPiJ,EAAqBjJ,IAEvB+I,QAAQ,EACRppB,YAAa,iCAEf,CACEygB,KAAM,IACNuH,OAAQ,WACNc,KAEFM,QAAQ,EACRppB,YAAa,wBAEf,CACEygB,KAAM,IACNuH,OAAQ,WACNiB,KAEFG,QAAQ,EACRppB,YAAa,6BAEf,CACEygB,KAAM,IACNuH,OAAQ,WACNgB,KAEFI,QAAQ,EACRppB,YAAa,mBAIXqpB,EAAiB,SAAC/Q,GACtBa,EAAIoQ,KAAKjR,IAML2K,EAAe,SAACC,GACpB/J,EAAI0P,YAAsC,GAA1BlpB,KAAKyjB,KAAKF,EAAMG,QAAe,CAACH,EAAMsG,QAAStG,EAAMuG,WAKjEC,EAAkB,SAACxG,GACvB/J,EAAIwQ,UAAU,CAACzG,EAAMsG,QAAStG,EAAMuG,WAMhCG,EAAsB,SAAC1G,GAC3B/J,EAAI0Q,cAKAC,EAAmB,SAAC5G,GACxB/J,EAAI4Q,WAAW,CAAC7G,EAAMsG,QAAStG,EAAMuG,WAMjCH,EAAuB,SAACpG,GAI5B/J,EAAIiC,cAAa,SAAC8B,GAChBD,EAAeC,EAAS,kBA8C5BuC,qBAAU,WACR,IAAItG,EAAIkC,gBAAiB,CACvB,IAAMpV,EAASqhB,EAAU7iB,QACnBwV,EAAWsN,EAAe9iB,QAEhC,IAAI0U,EAAIe,WAAWjU,EAAQgU,EAAU,MACnC,MAAM,IAAIE,MAAM,yCAGlBgK,IAGAhL,EAAIhH,OAAM,WACRiW,WAUN4B,2BAAgB,WAEd,IAAM/Z,EAAe,WACnBkJ,EAAIlJ,gBAMN,OAHAzJ,OAAOid,iBAAiB,SAAUxT,GAClCA,IAEO,kBAAMzJ,OAAOkd,oBAAoB,SAAUzT,OAMpDwP,qBAAU,WAERP,EAAUxa,SAAQ,SAACulB,GACbA,EAAQb,OAGVjB,EAAU8B,EAAQxJ,KAAMwJ,EAAQjC,QAFhCE,EAAa+B,EAAQxJ,KAAMwJ,EAAQjC,WAOvCV,EAAU7iB,QAAQgf,iBAAiB,QAASR,GAG5CqE,EAAU7iB,QAAQgf,iBAAiB,YAAaiG,GAChDpC,EAAU7iB,QAAQgf,iBAAiB,UAAWmG,GAC9CtC,EAAU7iB,QAAQgf,iBAAiB,WAAYmG,GAC/CtC,EAAU7iB,QAAQgf,iBAAiB,YAAaqG,GAEhD,IAAMI,EAAa5C,EAAU7iB,QAG7B,OAAO,WACLylB,EAAWxG,oBAAoB,QAAST,GACxCiH,EAAWxG,oBAAoB,YAAagG,GAC5CQ,EAAWxG,oBAAoB,UAAWkG,GAC1CM,EAAWxG,oBAAoB,WAAYkG,GAC3CM,EAAWxG,oBAAoB,YAAaoG,OAOhD,IAAMK,EACJ,cAAC,GAAD,CAEE5lB,KAAM,gBACN6b,QAASkJ,EACTtpB,YAAa,sCAHR,iBAOHoqB,EACJ,cAAC,GAAD,CAEE7lB,KAAM,QACNgiB,WAAY,OACZnG,QAASsI,EACT5F,MAAOnc,EACP3G,YAAa,4BALR,eASHqqB,EACJ,cAAC,GAAD,CAEE9lB,KAAM,YACNgiB,WAAY,aACZnG,QAAS4I,EACTlG,MAAOjJ,EACP7Z,YAAa,kBALR,gBASHsqB,EACJ,cAAC,GAAD,CAEE/lB,KAAM,SACNgiB,WAAY,iBACZnG,QAAS0I,EACT9oB,YAAa,yFAJR,gBAQHuqB,EACJ,cAAC,GAAD,CAEEhmB,KAAM,SACN6b,QApJyB,SAAC8C,GAC5BsE,EAAa/iB,QAAQ+Y,QACrB0F,EAAMf,cAAcC,QAmJlBpiB,YAAa,iCAJf,SAME,uBACE6iB,IAAK2E,EACLlnB,KAAK,OACL4J,MAAO,CAAEsgB,QAAS,QAClB/kB,SAnJoB,SAACyd,GAEzB,IAAMuH,EAAOvH,EAAM3E,OAAOmM,MAAM,GAGhC,GAAGD,EAAM,CAEP,IAAIE,EAAS,IAAIC,WACjBD,EAAO9U,OAAS,SAACgV,GACf1R,EAAI2R,eAAeC,KAAKC,MAAMH,EAAEtM,OAAOnW,SACvC+b,KAGFwG,EAAOM,WAAWR,KAuIhBS,OAAO,sBAVJ,gBAeHC,GACJ,cAAC,GAAD,CAEE5mB,KAAM,SACN6b,QA/K2B,SAAC8C,ItB5Qb,SAACkI,EAAY7mB,GAChC,IAAIoP,EAAO,gCAAkC0X,mBAAmBD,GAChEnO,EAAetJ,EAAMpP,GsB4QnB+mB,CACEP,KAAKQ,UAAUpS,EAAIqS,iBAAkB,KAAM,GAC3C,iBAEFtI,EAAMf,cAAcC,QA0KlBpiB,YAAa,8CAHR,gBAOHyrB,GACJ,cAAC,GAAD,CAEElnB,KAAM,YACN6b,QAASvE,EACT7b,YAAa,0BAHR,mBAOH0rB,GACJ,cAAC,GAAD,CAEEnnB,KAAM,IACNgiB,WAAY,IACZnG,QAAS6I,EACTnG,MAAOuF,EACP3B,OAAQ,GACR1mB,YAAa,gEANR,cAUH2rB,GACJ,cAAC,GAAD,CAEEpnB,KAAK,gBACLgiB,WAAW,gBACXnG,QAnXmB,SAACC,GACnBA,GAAGA,EAAE9B,OAAO6D,OACfoG,GAAoBD,IAkXlBvoB,YAAa,mBAJR,iBAQH4rB,GAAsB,SAAClN,EAAMwB,EAAK/C,EAAMnd,GAK5C,OAAO,cAAC,GAAD,CAEHuE,KAAM2b,EACNsG,UAAU,EACVpG,QARgB,WAClB5Z,OAAOqlB,KAAK1O,EAAM,WAQhBnd,YAAaA,EALV,SAOH,qBAAKme,UAAU,YAAY7I,IAAKoJ,EAAMwB,IAAKA,KANtC/C,IAUL2O,GAAkBF,GAAoB/M,GAAe,YAvevC,sCAuemE,2DACjFkN,GAAmBH,GAAoBjN,EAAY,SAzepC,8DAye8D,mCAC7EqN,GAAcJ,GAAoB7M,GAAW,QAxenC,wBAweuD,+CAKjEyF,GACJ,qBACErG,UAAU,sBADZ,SAIE,sBAAMA,UAAU,YAAhB,gBAFK,aAYH8N,GAAY,WAChB,IAAMrO,EAAU,CACd/L,UAAW,CACTmV,eAAgB,SAACzC,GACfpL,EAAI+S,mBAAkB,WACpB3H,EAAOpL,EAAIqD,qBAIjB2P,aAAc,CACZnF,eAAgB,SAACzC,GACfpL,EAAI+S,mBAAkB,WACpB3H,EAAO5kB,KAAKme,MAAM3E,EAAIsD,6BAI5BlW,WAAY,CACVygB,eAAgB,SAACzC,GACfpL,EAAIgC,mBAAkB,SAAC5U,GACrBge,EAAO5kB,KAAKme,MAAMvX,EAAW,IAAM,IAAM5G,KAAKme,MAAMvX,EAAW,WAMvE,OACE,cAAC,GAAD,CACEqX,QAASA,KAyCTwO,GAAmB,CACvBrgB,KAAM,CACJ2f,GACAlH,GACA6F,EACAF,EACAC,GAEF1E,OAAQ,CACN+F,GACAjH,GACA+F,EACAY,IAEFnf,MAAO,CACL2f,GACAG,GACAC,GACAC,KAIE7d,GACJ,wBACEgQ,UAAW,UAAYtE,EAAW,kBAAoB,IACtDgJ,IAAKyE,IAIH+E,GACJ,wBACElO,UAAW,UAAatE,EAA+B,GAApB,mBACnCgJ,IAAK0E,IAIT,OAEI,cADA,CACA,OAAKpJ,UAAU,mBAAf,UACKhF,EAAIkC,gBAEL,cAAC,GAAD,CACE2G,WA7EsB,WAC9B,IAAM7B,EAAiB,SAACnE,EAAYuJ,EAAQC,EAAOjhB,EAAMvE,EAAaoK,GACpE,MAAO,CACL/G,WAAY8V,EAAI+C,cAAcF,GAC9BsI,OAAQ,SAAC/f,GAAD,OAAU4U,EAAIjR,SAAS8T,EAAYzX,IAC3CggB,OAAQ,SAAChgB,EAAMtE,GAAP,OAAiBkZ,EAAIoC,YAAYS,EAAYzX,EAAMtE,IAC3DE,QAAS,SAACoE,GAAD,OAAU4U,EAAIuD,WAAWV,EAAYzX,IAC9CyX,WAAYA,EACZwI,UAAW,IACXe,OAAQA,EACRC,MAAOA,EAEPjhB,KAAMA,EACNvE,YAAaA,EAEbqiB,gBAAiBjY,IAIrB,MAAO,CACLK,QAAS0V,EAAe,MAAO,KAAM,KAAM,UAAW,+DACtDrT,MAAOqT,EAAe,KAAM,KAAM,KAAM,QAAS,sEACjD9T,OAAQ8T,EAAe,KACrB8L,KACA,CAAC9B,EAAeC,EAAaE,GAC7B,SACA,gEAEFgC,MAAOnM,EAAe,MAAO,KAAM,KAAM,KAAM,wBAAwB,SAACoM,GAClEA,GAAUxD,GAAM,OAgDJyD,GACZpG,OAAQgG,GACR/F,YAAakC,IALQ,GAUvBpa,GACAke,GAGA,cAAC,GAAD,CACEpN,UAAW,WACXE,WAAYkJ,EACZnJ,UAAWA,EACXG,gBAAiB,kBAAM4J,WEzoBnCwD,IAASpgB,OACP,cAAC,IAAMqgB,WAAP,UACE,cAAC,GAAD,MAEFtP,SAASuP,eAAe,U","file":"static/js/main.c47c5815.chunk.js","sourcesContent":["/////////////\n// TEXTURE //\n/////////////\n\nconst randomElement = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\n// Helper function for creating noise settings\nconst noiseSettings = (description) => {\n    return {\n        value: {\n            frequency: {\n                value: Math.random() * 0.4 + 0.25,\n                default: 1.0,\n                min: 0.0000001,\n                max: 2.0000,\n                type: \"1f\",\n\n                description: \"Speed of change across space\"\n            },\n            octaves: {\n                value: randomElement([3, 5]),\n                default: 3,\n                type: \"1i\",\n                min: 1,\n                max: 5,\n                step: 2,\n                marks: [1, 3, 5],\n\n                description: \"Number of noise layers\"\n            },\n            lacunarity: {\n                value: Math.random() * 6 + 2.0,\n                default: 2.0,\n                type: \"1f\",\n                min: 0.1,\n                max: 10.0,\n\n                description: \"Frequency multiplier for each layer\"\n            },\n            persistence: {\n                value: Math.random() * 0.3,\n                default: 0.5,\n                type: \"1f\",\n                min: 0.1,\n                max: 5.0,\n\n                description: \"Amplitude multiplier for each layer\"\n            },\n            amplitude: {\n                value: 1.0,\n                default: 1.0,\n                type: \"1f\",\n                min: 0.1,\n                max: 10.0,\n\n                description: \"The strength (height) of the noise\"\n            },\n            modifications: {\n                value: {\n                    ridgeThreshold: {\n                        value: 1 - Math.pow(Math.random(), 2),\n                        default: 1.0,\n                        type: \"1f\",\n                        min: 0.5,\n                        max: 1.0,\n\n                        description: \"The smoothness/sharpness of the noise peaks (low values sharpens the peaks)\"\n                    },\n                    pow: {\n                        value: Math.random() * 2 + 1.0,\n                        default: 1.0,\n                        type: \"1f\",\n                        min: -1.0,\n                        max: 5,\n\n                        description: \"Applies a power operator to the noise\"\n                    },\n                    mod: {\n                        value: 1.0,\n                        default: 1.0,\n                        type: \"1f\",\n                        min: 1.0,\n                        max: 5,\n\n                        description: \"Applies a modulus operator to the noise\"\n                    },\n                    xStretch: {\n                        value: 1.0,\n                        default: 1.0,\n                        type: \"1f\",\n                        min: 0.001,\n                        max: 10,\n\n                        description: \"Stretches the noise in the X direction\"\n                    },\n                    yStretch: {\n                        value: 1.0,\n                        default: 1.0,\n                        type: \"1f\",\n                        min: 0.001,\n                        max: 10,\n\n                        description: \"Stretches the noise in the Y direction\"\n                    },\n                },\n                description: \"Various modifications that can be applied to the noise\"\n            }\n        },\n        isUniform: true,\n        description: description,\n    }\n};\n\n// Helper function for creating time settings\nconst timeSettings = (value, description, def = null) => {\n    return {\n        value: value,\n        default: def || value,\n        min: 0.0,\n        max: 1,\n\n        description: description\n    }\n};\n\n// Default attributes for texture controller\nconst getTextureAttributes = () => {\n    return {\n        scale: {\n            value: Math.random() * 2 + 2.0,\n            default: 1.0,\n            isUniform: true,\n            type: \"1f\",\n\n            min: 0.001,\n            max: 10,\n            actualMax: 1000,\n\n            description: \"Zooms the entire texture (can also be controlled using the mouse wheel)\"\n        },\n        iterations: {\n            value: randomElement([1, 2, 3]),\n            default: 2,\n            isUniform: true,\n            type: \"1i\",\n\n            min: 0,\n            max: 4,\n\n            description: \"Number of domain warping steps/iterations\"\n        },\n        warpAmount: {\n            value: Math.random() * 1 + 0.5,\n            default: 1.0,\n            isUniform: true,\n            type: \"1f\",\n\n            min: 0.0,\n            max: 5,\n\n            description: \"Strength/amount of the domain warping effect\"\n        },\n        animationSpeed: {\n            value: {\n                general: timeSettings(0.05, \"General animation speed\"),\n                source: timeSettings(1.0, \"Animation speed for the source layer\"),\n                angleControl: timeSettings(1.0, \"Animation speed for the angle layer\"),\n                amountControl: timeSettings(1.0, \"Animation speed for the amount layer\")\n            },\n            description: \"Controllers for animation speed of the entire animation and the three layers separately\",\n            isUniform: false,\n        },\n\n        source: noiseSettings(\"Noise controller for the source pattern: the domain warp effect is applied to this noise\"),\n        angleControl: noiseSettings(\"Noise controller for angle pattern: this controls the angle/rotation of the domain warp at a given point\"),\n        amountControl: noiseSettings(\"Noise controller for amount pattern: this controls the intensity of the domain warp at a given point\")\n    };\n}\n\n///////////\n// COLOR //\n///////////\n\nconst componentController = (source, angle, amount, description, defaults=[1.0, 1.0, 1.0]) => {\n    return {\n        value: {\n            mult: {\n                value: 0,\n                default: 0,\n                type: \"1i\",\n                min: 0,\n                max: 1,\n\n                description: \"If activated, the three components will be multiplied together instead of summed\"\n            },\n            source: {\n                value: source,\n                default: defaults[0],\n                type: \"1f\",\n                min: -1,\n                max: 1,\n\n                description: \"The influence of the source pattern\"\n            },\n            angle: {\n                value: angle,\n                default: defaults[1],\n                type: \"1f\",\n                min: -1,\n                max: 1,\n                description: \"The influence of the angle pattern\"\n            },\n            amount: {\n                value: amount,\n                default: defaults[2],\n                type: \"1f\",\n                min: -1,\n                max: 1,\n                description: \"The influence of the amount pattern\"\n            }\n        },\n        description: description,\n        isUniform: true\n    };\n};\n\nconst getColorAttributes = () => {\n    return {\n        power: {\n            value: 1.0,\n            default: 1.0,\n            isUniform: true,\n            type: \"1f\",\n\n            min: 0.001,\n            max: 10,\n\n            description: \"Applies a power operator to the brightness of the color\"\n        },\n        general: {\n            value: {\n                hue: {\n                    value: Math.random(),\n                    default: 0.0,\n                    type: \"1f\",\n\n                    min: -0.5,\n                    max: 0.5,\n\n                    description: \"Hue shift of the output color\"\n                },\n                saturation: {\n                    value: Math.random() * 0.5 + 0.5,\n                    default: 0.7,\n                    isUniform: true,\n                    type: \"1f\",\n\n                    min: 0.001,\n                    max: 10,\n\n                    description: \"Saturation of the output color\"\n                },\n                brightness: {\n                    value: 1.0,\n                    default: 1.0,\n                    isUniform: true,\n                    type: \"1f\",\n\n                    min: 0.001,\n                    max: 4,\n\n                    description: \"Brightness of the output color\"\n                },\n                red: {\n                    value: 1.0,\n                    default: 1.0,\n                    isUniform: true,\n                    type: \"1f\",\n\n                    min: 0.001,\n                    max: 4,\n                    description: \"Multiplier applied to the red channel of the output color\"\n                },\n                green: {\n                    value: 1.0,\n                    default: 1.0,\n                    isUniform: true,\n                    type: \"1f\",\n\n                    min: 0.001,\n                    max: 4,\n                    description: \"Multiplier applied to the green channel of the output color\"\n                },\n                blue: {\n                    value: 1.0,\n                    default: 1.0,\n                    isUniform: true,\n                    type: \"1f\",\n\n                    min: 0.001,\n                    max: 4,\n                    description: \"Multiplier applied to the blue channel of the output color\"\n                }\n            },\n            description: \"General color settings\",\n            isUniform: true\n        },\n        hueController:        componentController(1.0 * Math.random() - 0.5, 1.0 * Math.random() - 0.5, 1.0 * Math.random() - 0.5,\n                                                  \"Controls how the three layers influence the hue of the output color\",\n                                                 [1.0, 1.0, 0.0]),\n        saturationController: componentController(1.0 * Math.random(), 1.0 * Math.random(), 1.0 * Math.random(),\n                                                  \"Controls how the three layers influence the saturation of the output color\",\n                                                 [0.0, 1.0, -0.5]),\n        brightnessController: componentController(1.0, 0.0, 0.0,\n                                                  \"Controls how the three layers influence the brightness of the output color\",\n                                                 [1.0, 0.0, 0.0]),\n    }\n};\n\n\n////////////\n// RENDER //\n////////////\nconst getRenderAttributes = () => {\n    return {\n        resolution: {\n            value: 1.0,\n            default: 1.0,\n            isUniform: false,\n            type: \"1f\",\n\n            min: 0.1,\n            max: 3,\n\n            description: \"Multiplier for the width and height of the canvas\"\n        },\n        ditheringAmount: {\n            value: 1.0 / 255.0,\n            default: 1.0 / 255.0,\n            isUniform: false,\n\n            min: 0.0,\n            max: 0.2,\n            description: \"Applies dithering (blue noise) to the final color\"\n        },\n        multisampling: {\n            value: 0,\n            default: 0,\n            isUniform: false,\n            type: \"1i\",\n\n            min: 0,\n            max: 1,\n\n            description: \"Activates multisampling: will use four samples per pixel instead of one\"\n        },\n    }\n}\n\n\n//////////\n// UTIL //\n//////////\n\n// HELPER FUNCTIONS FOR MANAGING ATTRIBUTES\n\n// Used to fetch the attribute data of a specific location\nconst getAttribute = (attributes, location) => {\n    // Helper function for checking if an object contains a specific property\n    const hasProperty = (object, property) => {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    }\n\n    var subLocations = location.split(\".\");\n\n    // Check if attribute exists in main attributes object\n    if(!hasProperty(attributes, subLocations[0])) return undefined;\n\n    // Get the current attribute\n    var currentAttribute = attributes[subLocations[0]];\n\n    // If there's more sub-locations in the query, iterate through them\n    // until the bottom level is found\n    for(var i = 1; i < subLocations.length; i++) {\n        // Verify that the new attribute is an object (if not, the query is invalid)\n        if(!(typeof currentAttribute === \"object\")) return undefined;\n\n        // Check if the attribute contains the requested attribute \n        if(!hasProperty(currentAttribute.value, subLocations[i])) return undefined;\n\n        // Get the value property of the attribute, since this will contain the next iteration\n        currentAttribute = currentAttribute.value[subLocations[i]];\n    }\n\n    // Returns an array where the first element specifies if the attribute has a corresponding\n    // shader uniform, and the second element is the data itself\n    return [attributes[subLocations[0]].isUniform, currentAttribute];\n}\n\n// Sets uniforms for all attributes that have one\nconst setUniforms = (attributes, program, GLC) => {\n    // Helper function for setting a specific uniform, if it exists\n    // Recursively sets all sub-attributes\n    const setUniform = (attribute, name) => {\n        // Return if the value has no corresponding uniform, or if the texture controller is not initialized\n        // Also, if the root level object is a uniform, assume all children are too\n        if(!attribute.isUniform) return;\n\n        // Recursively sets all sub-attributes' corresponding uniforms \n        const setAll = (current, location) => {\n            // If the value property of the attribute is an object, then\n            // more sub-attributes exist\n            if(typeof current.value === \"object\") {\n                // Iterate over all sub-attributes\n                for(var name in current.value) {\n                    if(Object.prototype.hasOwnProperty.call(current.value, name)) {\n                        // And set all their corresponding uniforms\n                        // The \".\" symbol is used to construct the uniform location\n                        setAll(current.value[name], location + \".\" + name);\n                    }\n                }\n            // If the value property is not an object, a leaf has been reached and we can set\n            // the attribute uniform directly\n            } else {\n                GLC.setUniform(program, location, current.type, current.value);\n            }\n        };\n\n        setAll(attribute, name);\n    }\n\n    // Iterate over all attributes and set their coorresponding uniforms\n    for (var name in attributes) {\n        if(Object.prototype.hasOwnProperty.call(attributes, name)) {\n            setUniform(attributes[name], name);\n        }\n    }\n}\n\n// Do an operation for each attribute\nconst forEach = (attributes, operation, stopCondition) => {\n    const performOperation = (current) => {\n        if(stopCondition && stopCondition(current)) return;\n\n        if(typeof current.value === \"object\") {\n            for(var name in current.value) {\n                if(Object.prototype.hasOwnProperty.call(current.value, name)) {\n                    performOperation(current.value[name]);\n                }\n            }\n        } else {\n            operation(current);\n        }\n    }\n\n    for (var name in attributes) {\n        if(Object.prototype.hasOwnProperty.call(attributes, name)) {\n            performOperation(attributes[name], name);\n        }\n    }\n\n    return attributes;\n};\n\nconst resetAttributesToDefault = (attributes) => {\n    return forEach(attributes, (current) => current.value = current.default);\n}\n\n// Returns the value of a specified attribute\nconst getAttributeValue = (attributes, location) => {\n    const [, v] = getAttribute(attributes, location);\n    if(typeof v === \"undefined\") return undefined;\n    return v.value;\n}\n\n// Returns the default of a specified attribute\nconst getAttributeDefault = (attributes, location) => {\n    const [, v] = getAttribute(attributes, location);\n    if(typeof v === \"undefined\") return undefined;\n    return v.default;\n}\n\n// Updates an attribute value and the corresponding uniform (if one exists)\nconst updateAttributeValue = (attributes, program, location, value, GLC) => {\n    // Find the requested attribute, or return if it does not exist\n    const [isUniform, attribute] = getAttribute(attributes, location);\n    if(typeof attribute === \"undefined\") return false;\n\n    // Check if the value exceeds the actual maximum value, if one exists\n    if(attribute.actualMax && value > attribute.actualMax) value = attribute.actualMax;\n\n    // Do nothing if the value is unchanged\n    if(attribute.value === value) return false;\n\n    // Set the new value, and set the corresponding uniform\n    attribute.value = value;\n    if(isUniform && program && GLC) {\n        GLC.setUniform(program, location, attribute.type, attribute.value);\n    } \n\n    // Call onChange callback, if one exists\n    if(typeof attribute.onChange === \"function\") {\n        attribute.onChange(value);\n    }\n\n    return true;\n}\n\n// Merges two attribute objects\n// \"current\" will define the structure, \"changes\" will overwrite values in the base\nconst mergeAttributes = (current, changes) => {\n    // Check if the current object is a single value or an array. In that case, update, if \n    // an updated value exists\n    if(typeof current !== \"object\" || Array.isArray(current)) return changes || current;\n\n    // If the changes are null or undefined, use the current object\n    if(!changes) return current;\n\n    var updated = {};\n\n    // Iterate over all the properties in the current object, and merge each\n    // property with the corresponding property in the changes object\n    for(var prop in current) {\n        if(Object.prototype.hasOwnProperty.call(current, prop)) {\n            updated[prop] = mergeAttributes(current[prop], changes[prop]);\n        }\n    }\n\n    return updated;\n}\n\n// Helper class for defining a attribute controller\n// Also has support for handling, although \"program\" can remain null\nclass AttributeController {\n    constructor(attributeGetter) {\n        this._attributeGetter = attributeGetter;\n        this.attributes = this._attributeGetter();\n        this.program = null;\n        this.GLC = null;\n    }\n\n    // Updates a value and it's corresponding uniform (if such exists)\n    updateValue(location, value) {\n        return updateAttributeValue(this.attributes, this.program, location, value, this.GLC)\n    }\n\n    // Returns the value at a specified location\n    getValue(location) {\n        return getAttributeValue(this.attributes, location);\n    }\n\n    // Returns the default (initial) value\n    getDefault(location) {\n        return getAttributeDefault(this.attributes, location);\n    }\n\n    // Returns all attributes\n    getAttributes() {\n        return this.attributes;\n    }\n\n    _update() {\n        // Update uniforms\n        if(this.GLC && this.program) {\n            setUniforms(this.attributes, this.program, this.GLC);\n        }\n\n        // Callbacks\n        forEach(this.attributes, attribute => {\n            attribute.onChange && attribute.onChange(attribute.value);\n        });\n    }\n\n    // Sets all attributes, and updates uniforms (if such exist)\n    setAttributes(attributes) {\n        this.attributes = attributes;\n        this._update();\n    }\n\n    // Resets all values to their defaults\n    reset() {\n        this.attributes = resetAttributesToDefault(this.attributes);\n        this._update();\n    }\n\n    // Randomizes the values (by fetching new attributes)\n    randomize() {\n        this.attributes = this._attributeGetter();\n        this._update();\n    }\n}\n\nexport { \n    getTextureAttributes, \n    getColorAttributes, \n    getRenderAttributes,\n    getAttribute, \n    getAttributeValue, \n    getAttributeDefault,\n    resetAttributesToDefault,\n    setUniforms, \n    updateAttributeValue, \n    mergeAttributes, \n\n    AttributeController\n}","//import GLC from '../GLC'\n\nimport { \n    getTextureAttributes, \n    AttributeController, \n} from '../ControllerAttributes';\n\nclass TextureController extends AttributeController {\n    ////////////////////\n    // INITIALIZATION //\n    ////////////////////\n    constructor() {\n        super(getTextureAttributes);\n\n        // Helper function for calculating a random offset\n        // The random offset is used to ensure that the different noise\n        // functions do not have the same origin. This also doubles as a random seed\n        const randomOffset = () => {\n            return [Math.random() * 1000, Math.random() * 1000, 1.0];\n        };\n\n        // A reference to the canvas element that holds the WebGL context\n        this.canvas = null;\n        this.GLC = null;\n\n        // Set to true once the controller is initialized\n        // Many actions are unavailable until then\n        this.initialized = false;\n\n        // Shader program for rendering the texture\n        this.program = null;\n\n        // Random offsets for each layer\n        this.sourceOffset = randomOffset();\n        this.angleOffset  = randomOffset();\n        this.amountOffset = randomOffset();\n\n        // The position of the internal view and the dimensions of the canvas\n        this.position = [0, 0];\n        this.dimensions = [window.innerWidth, window.innerHeight];\n\n        // Time and pause state for animation\n        this.paused = false; // No time is updated if paused is set to true\n        this.sourceTime = 0.0;\n        this.angleControlTime = 0.0;\n        this.amountControlTime = 0.0;\n\n        this.previousResolution = 1.0;\n\n        // Values used for multisampling\n        // A framebuffer is used and a texture with double the size of the canvas is \n        // bound as render texture. This texture is then downsampled using linear filtering\n        // to achieve a multisampling effect\n        this.multisamplingMultiplier = 2.0; \n        this.multisamplingDimensions = [-1, -1];\n        this.fbo = -1;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    // Initializes the WebGL context and loads the GPU with vertex data\n    initialize(canvas, program, GLC) {\n        if(this.initialized) {\n            console.log(\"The texture controller is already initialized\");\n            return true;\n        }\n\n        console.log(\"Initializing texture controller\");\n\n        this.GLC = GLC;\n        this.canvas = canvas;\n\n        // COMPILE SHADERS\n        console.log(\"Compiling shaders\");\n\n        // Create the shader program using the imported shaders\n        this.program = program;\n\n        // SET SHADER UNIFORMS \n        console.log(\"Setting uniforms\");\n\n        this.GLC.setShaderProgram(this.program);\n        this._update();\n\n        // Finally, set internal states\n        console.log(\"Done initializing texture controller\");\n\n        this.initialized = true;\n\n        // Update necessary values\n        //this._handleUpdate(true);\n\n        return true;\n    };\n\n    // Initialize a frame buffer using the current dimensions\n    // Used for multisampling\n    _setupFramebuffer() {\n        // If initialzied, delete the existing texture and frame buffer\n        if(this.renderTexture) {\n            this.GLC.deleteTexture(this.renderTexture);\n            this.GLC.deleteFramebuffer(this.fbo);\n        }\n\n        // Calculate the dimensions of the multisample texture\n        this.multisamplingDimensions = [\n            this.dimensions[0] * this.multisamplingMultiplier,\n            this.dimensions[1] * this.multisamplingMultiplier\n        ];\n\n        const createRenderTexture = (width, height) => {\n            const gl = this.GLC.getGL();\n            return this.GLC.createTexture(width, height, gl.RGBA, gl.RGBA32F, gl.FLOAT);\n            //return GLC.createTexture(width, height, gl.RGBA, gl.RGBA8, gl.UNSINGED_BYTE);\n        };\n\n        // Create the render texture\n        this.renderTexture = \n            this.getValue(\"multisampling\") \n            ? createRenderTexture(this.multisamplingDimensions[0], this.multisamplingDimensions[1])\n            : createRenderTexture(this.dimensions[0], this.dimensions[1]);\n\n        // Create the frame buffer\n        this.fbo = this.GLC.createFramebuffer(this.renderTexture);\n    }\n\n    /////////////////////\n    // DATA MANAGEMENT //\n    /////////////////////\n    getDimensions() {\n        return this.dimensions;\n    }\n\n    getPosition() {\n        return this.position;\n    }\n\n    // Updates a value and it's corresponding uniform (if such exists)\n    updateValue(location, value) {\n        //TODO create some form of callback to sliders that force them to re-read when a value is changed?!\n        const result = super.updateValue(location, value);\n        //updateAttributeValue(this.attributes, this.program, location, value, this.GLC)\n\n        if(location === \"multisampling\") { //TODO ugly \n            this._handleUpdate(true);\n        }\n\n        return result;\n    }\n\n    // Set position of internal view\n    setPosition(position) {\n        if(!this.initialized) return;\n\n        // Update controller reference\n        this.position[0] = position[0];\n        this.position[1] = position[1];\n        \n        // And set the corresponding uniform\n        this.GLC.setShaderProgram(this.program);\n        this.GLC.setUniform(this.program, \"position\", \"2fv\", position);\n    }\n\n    // Pauses and unpauses the animation\n    setPaused(paused) {\n        this.paused = paused;\n    }\n\n    ///////////////\n    // RENDERING //\n    ///////////////\n\n    // Render to the canvas\n    render(fbo, dimensions, delta) {\n        const GLC = this.GLC;\n        GLC.setShaderProgram(this.program);\n\n        // Do not increment time if the animation is paused\n        if(!this.paused) {\n            // Increment the \"time\" based on the time passed since last frame \n            const animationSpeed = this.getValue(\"animationSpeed.general\");\n            this.sourceTime        += animationSpeed * this.getValue(\"animationSpeed.source\") * delta;\n            this.angleControlTime  += animationSpeed * this.getValue(\"animationSpeed.angleControl\") * delta;\n            this.amountControlTime += animationSpeed * this.getValue(\"animationSpeed.amountControl\") * delta;\n        }\n\n        // Update shader uniforms\n        GLC.setUniform(this.program, \"source.offset\",        \"3fv\", [this.sourceOffset[0], this.sourceOffset[1], this.sourceTime]);\n        GLC.setUniform(this.program, \"angleControl.offset\",  \"3fv\", [this.angleOffset[0],  this.angleOffset[1], this.angleControlTime]);\n        GLC.setUniform(this.program, \"amountControl.offset\", \"3fv\", [this.amountOffset[0], this.amountOffset[1], this.amountControlTime]);\n\n        //GLC.bindFramebuffer(this.fbo);\n        GLC.bindFramebuffer(fbo);\n\n        GLC.setViewport(dimensions[0], dimensions[1]);\n        GLC.setUniform(this.program, \"viewport\", \"2fv\", dimensions);\n\n        // Render to render texture\n        GLC.renderFullScreenQuad(this.program);\n\n        return this.renderTexture;\n    }\n}\n\n// Initialize a global instance of the texture controller, and export\nexport {\n    TextureController\n};","import { \n    getColorAttributes, \n    setUniforms, \n\n    AttributeController\n} from '../ControllerAttributes';\n\nclass ColorController extends AttributeController {\n    ////////////////////\n    // INITIALIZATION //\n    ////////////////////\n    constructor() {\n        super(getColorAttributes);\n        // A reference to the canvas element that holds the WebGL context\n        this.canvas = null;\n        this.GLC = null;\n\n        // Set to true once the controller is initialized\n        this.initialized = false;\n\n        // Shader program for applying color \n        this.program = null;\n\n        // Dithering texture\n        this.ditheringTexture = null;\n\n        // Used for saving the canvas as an image\n        this.captureNext = false; // True if next frame should be captured\n        this.dataCallback = null; // The callback function that should be used to return the contents \n                                  // of the render\n\n        this.time = 0.0;\n    }\n\n    // Used to capture the next frame of animation\n    // The data callback function will be used to return the result\n    captureFrame(dataCallback) {\n        this.captureNext = true;\n        this.dataCallback = dataCallback;\n    }\n\n    // Initializes the color controller\n    initialize(canvas, program, GLC, ditheringTexture) {\n        if(this.initialized) {\n            console.log(\"The color controller is already initialized\");\n            return true;\n        }\n\n        console.log(\"Initializing color controller\");\n\n        this.GLC = GLC;\n        this.canvas = canvas;\n        this.program = program;\n\n        this.GLC.setShaderProgram(this.program);\n        setUniforms(this.attributes, this.program, this.GLC);\n\n        // Create texture for dithering\n        this.ditheringTexture = this.GLC.createImageTexture(\n            ditheringTexture,\n            this.GLC.getGL().REPEAT,  // Repeat to ensure that a texture of any size can be used\n            this.GLC.getGL().NEAREST, // No linear filtering, although sampling shader should sample at scale\n            // Callback for when the image is loaded\n            (width, height) => {\n                // Bind texture and set related values\n                this.GLC.setUniform(this.program, \"hasDitheringTexture\", \"1i\", 1);\n                this.GLC.setTexture(this.ditheringTexture, 1);\n                this.GLC.setUniform(this.program, \"ditheringTexture\", \"1i\", 1);\n                this.GLC.setUniform(this.program, \"ditheringTextureDimensions\", \"2fv\", [width, height]);\n            },\n            // Callback if image fails loading\n            () => {\n                console.error(\"Dithering texture failed to load\");\n            }\n        );\n\n        this.initialized = true;\n\n        return true;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    // Renders and modifies a source textures and exports the result to default frame buffer\n    render(sourceTexture, dimensions, multisampling, ditheringAmount, delta) {\n        this.time += delta;\n        const GLC = this.GLC;\n\n        // Bind the default frame buffer\n        GLC.bindFramebuffer(null);\n        GLC.setViewport(dimensions[0], dimensions[1]);\n        this.GLC.setUniform(this.program, \"viewport\", \"2fv\", dimensions);\n        this.GLC.setUniform(this.program, \"time\", \"1f\", this.time);\n        this.GLC.setUniform(this.program, \"ditheringAmount\", \"1f\", ditheringAmount);\n\n        // Use the post processing program, which will sample the texture which we previously rendered to\n        GLC.setShaderProgram(this.program);\n\n        // Bind and activate the texture\n        GLC.setTexture(sourceTexture, 0);\n\n        // Tell the shader we bound the texture to texture unit 0\n        GLC.setUniform(this.program, \"texture\", \"1i\", 0);\n\n        GLC.setUniform(this.program, \"multisampling\", \"1i\", multisampling);\n\n        GLC.renderFullScreenQuad(this.program);\n\n        // Capture the frame if requested\n        if(this.captureNext) {\n            this.captureNext = false;\n            var captureData = this.canvas.toDataURL(\"image/png\");\n            this.dataCallback(captureData);\n        }\n    }\n}\n\nexport {\n    ColorController,\n};","import { \n    getRenderAttributes, \n    AttributeController, \n} from '../ControllerAttributes';\n\nclass RenderController extends AttributeController {\n    constructor() {\n        super(getRenderAttributes);\n        this.initialized = false;\n\n        // Render dimensions\n        this.dimensions = [window.innerWidth, window.innerHeight];\n\n        // Resolution controls the relationship between the canvas size and the\n        // actual texture resolution\n        this.previousResolution = 1.0;\n        this.resolution = 1.0;\n\n        this.canvas = null;\n\n        this.resizeCallback = null;\n        \n        // Multisample handling\n        this.multisamplingMultiplier = 2.0; \n        this.multisamplingDimensions = [-1, -1];\n\n        // FBO and texture control\n        this.fbo = null;\n        this.renderTexture = null;\n\n        this.initialized = false;\n    }\n    \n    initialize(canvas, GLC) {\n        if(this.initialized) {\n            console.log(\"The render controller is already initialized\");\n            return true;\n        }\n\n        this.canvas = canvas;\n        this.GLC = GLC;\n\n        // Update dimensions and create a new FBO\n        this._handleUpdate(true);\n\n        this.initialized = true;\n\n        return true;\n    }\n\n    // Initialize a frame buffer using the current dimensions\n    // Used for multisampling\n    _setupFramebuffer() {\n        // If initialzied, delete the existing texture and frame buffer\n        if(this.renderTexture) {\n            this.GLC.deleteTexture(this.renderTexture);\n            this.GLC.deleteFramebuffer(this.fbo);\n        }\n\n        // Calculate the dimensions of the multisample texture\n        this.multisamplingDimensions = [\n            this.dimensions[0] * this.multisamplingMultiplier,\n            this.dimensions[1] * this.multisamplingMultiplier\n        ];\n\n        const createRenderTexture = (width, height) => {\n            const gl = this.GLC.getGL();\n\n            // If float color buffers are supported, use them since this \n            // will provide more precision\n            if(this.GLC.floatColorBufferSupported()) {\n                return this.GLC.createTexture(width, height, gl.RGBA, gl.RGBA32F, gl.FLOAT);\n            } else {\n                return this.GLC.createTexture(width, height, gl.RGBA, gl.RGBA8, gl.UNSINGED_BYTE);\n            }\n\n        };\n\n        // Create the render texture\n        this.renderTexture = \n            this.getValue(\"multisampling\") \n            ? createRenderTexture(this.multisamplingDimensions[0], this.multisamplingDimensions[1])\n            : createRenderTexture(this.dimensions[0], this.dimensions[1]);\n\n        // Create the frame buffer\n        this.fbo = this.GLC.createFramebuffer(this.renderTexture);\n    }\n\n    // Updates a value and it's corresponding uniform (if such exists)\n    updateValue(location, value) {\n        //TODO create some form of callback to sliders that force them to re-read when a value is changed?!\n        const result = super.updateValue(location, value);\n        //updateAttributeValue(this.attributes, this.program, location, value, this.GLC)\n\n        if(location === \"multisampling\" || location === \"resolution\") { //TODO ugly \n            this._handleUpdate(true);\n        }\n\n        return result;\n    }\n\n    getDimensions() {\n        return this.dimensions;\n    }\n\n    getRenderTextureDimensions() {\n        // The size of the render texture depends on if multisampling is used or not\n        return this.getValue(\"multisampling\") \n            ? this.multisamplingDimensions\n            : this.dimensions;\n    }\n\n    getRenderTexture() {\n        return this.renderTexture;\n    }\n\n    getFrameBuffer() {\n        return this.fbo;\n    }\n\n\n    //////////////\n    // RESIZING //\n    //////////////\n\n    _handleUpdate(forceFramebufferSetup = false) {\n        //TODO add some kind of hook for only updating resolution/scale when necessary\n        const oldWidth = this.dimensions[0];\n        const oldHeight = this.dimensions[1];\n\n        const resolution = this.getValue(\"resolution\");\n\n        // Set the dimensions to that of the inner window size, since the canvas covers everything\n        const newWidth      = resolution * window.innerWidth;\n        const newHeight     = resolution * window.innerHeight;\n        const newDimensions = [newWidth, newHeight];\n\n        // Update values\n        this.GLC.setViewport(newWidth, newHeight);\n        this.canvas.style.width = window.innerWidth;\n        this.canvas.style.height = window.innerHeight;\n\n        this.canvas.width = newWidth;\n        this.canvas.height = newHeight;\n\n        this.dimensions = newDimensions;\n        this.previousResolution = resolution;\n\n        // Re-create the framebuffer and render texture to fit the new size\n        if(forceFramebufferSetup || oldWidth !== newWidth || oldHeight !== newHeight || resolution !== this.previousResolution) {\n            this._setupFramebuffer();\n            this.resizeCallback && this.resizeCallback(this.dimensions);\n        }\n    }\n\n    handleResize() {\n        if(!this.initialized) return;\n        this._handleUpdate();\n    }\n\n    addResizeCallback(callback) {\n        callback(this.dimensions);\n\n        const previousCallback = this.resizeCallback;\n        this.resizeCallback = (dimensions) => {\n            previousCallback && previousCallback(dimensions);\n            callback(dimensions);\n        }\n    }\n\n    screenSpaceToViewSpace(position) {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        // Calculate the proportions of the screen\n        const proportions = height / width;\n\n        // Scale and correct for proportions\n        return [position[0] / width, position[1] * proportions / height];\n    }\n}\n\nexport {\n    RenderController\n};","import * as THREE from 'three';\nimport * as POSTPROCESSING from 'postprocessing';\n\n// Class for rendering a texture using a custom shader\n// Useful for applying effects or filters to a texture\nexport class TextureProcessor {\n    constructor(renderer, texture, width, height, passes) {\n        this.renderer = renderer;\n\n        // Create Camera\n        this.camera = new THREE.OrthographicCamera(\n           -width / 2,\n            width / 2,\n            height / 2,\n           -height / 2,\n           -1000,\n            1000,\n        );\n        this.camera.position.z = 100;\n\n        // Create scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color('#ff0000');\n\n        // Create render target\n        this.composer = new POSTPROCESSING.EffectComposer(this.renderer, {\n            frameBufferType: THREE.HalfFloatType\n        });\n        this.composer.autoRenderToScreen = false;\n        //this.composer.autoRenderToScreen = true;\n        const renderPass = new POSTPROCESSING.RenderPass(this.scene, this.camera);\n        this.composer.addPass(renderPass);\n        passes.forEach(pass => {\n            this.composer.addPass(pass);\n        });\n\n        // Create material\n        const material = new THREE.MeshBasicMaterial({\n            map: texture\n        });\n\n        // Create plane\n        const plane = new THREE.PlaneBufferGeometry(1, 1);\n\n        // Create plane mesh\n        this.quad = new THREE.Mesh(plane, material);\n        this.quad.position.z = -100;\n        this.quad.scale.x = width;\n        this.quad.scale.y = height;\n\n        const light = new THREE.AmbientLight(\"#ffffff\", 5);\n\n        this.scene.add(this.quad, light);\n    }\n\n    setSize(width, height) {\n        // Update camera\n        this.camera.left   = -width / 2;\n        this.camera.right  =  width / 2;\n        this.camera.top    =  height / 2;\n        this.camera.bottom = -height / 2;\n        this.camera.updateProjectionMatrix();\n\n        // Update size\n        this.composer.setSize();\n\n        // Update quad\n        this.quad.scale.x = width;\n        this.quad.scale.y = height;\n    }\n\n    render(delta) {\n        this.composer.render(delta);\n    }\n\n    getProcessedTexture() {\n        return this.composer.outputBuffer.texture;\n    }\n\n}","var NormalMapShader = {\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 },\n\t\t'width': { value: 0 },\n\t\t'height': { value: 0 },\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\t\tuniform float opacity;\n\t\tuniform sampler2D tDiffuse;\n\n\t\tuniform float width;\n\t\tuniform float height;\n\n\t\tvarying vec2 vUv;\n\n\n\t\tfloat toGray(vec4 color) {\n\t\t\treturn dot(color.rgb, vec3(0.299, 0.587, 0.114));\n\t\t}\n\n\t\tfloat smpl(float offsetX, float offsetY) {\n\t\t\treturn toGray(texture2D( tDiffuse, vUv + vec2(offsetX, offsetY)));\n\t\t}\n\n\t\tvec3 getNormal(vec2 uv) {\n\t\t\tfloat offsetX = 1.0 / width;\t\n\t\t\tfloat offsetY = 1.0 / height;\t\n\n\t\t\tfloat tx0 = toGray(texture2D( tDiffuse, uv + vec2(-offsetX, 0)));\n\t\t\tfloat tx1 = toGray(texture2D( tDiffuse, uv + vec2(offsetX, 0)));\n\n\t\t\tfloat ty0 = toGray(texture2D( tDiffuse, uv + vec2(0, -offsetX)));\n\t\t\tfloat ty1 = toGray(texture2D( tDiffuse, uv + vec2(0, offsetX)));\n\n\t\t\tvec3 normal = normalize(vec3(\n\t\t\t\t(tx0 - tx1) / (offsetX),\n\t\t\t\t(ty0 - ty1) / (offsetY),\n\t\t\t\t1\n\t\t\t));\n\n\t\t\tnormal.x += 1.0;\n\t\t\tnormal.x /= 2.0;\n\t\t\tnormal.y += 1.0;\n\t\t\tnormal.y /= 2.0;\n\t\t\tnormal.z = 1.0;\n\n\t\t\treturn normal;\n\n\t\t\t/*vec3 p1 = vec3(uv, 0.0);\n\t\t\tvec3 p2 = vec3(uv + vec2(offsetX, 0), 0.0);\n\t\t\tvec3 p3 = vec3(uv + vec2(0, offsetY), 0.0);\n\n\t\t\tp1.z = toGray(texture2D( tDiffuse, p1.xy ));\n\t\t\tp2.z = toGray(texture2D( tDiffuse, p2.xy ));\n\t\t\tp3.z = toGray(texture2D( tDiffuse, p3.xy ));\n\n\t\t\tvec3 u = p2 - p1;\n\t\t\tvec3 v = p3 - p1;\n\n\t\t\treturn normalize(vec3(\n\t\t\t\t((u.y * v.z - u.z * v.y) + 1.0) / 2.0,\n\t\t\t\t((u.z * v.x - u.x - v.z) + 1.0) / 2.0,\n\t\t\t\t((u.x * v.y - u.y * v.x) + 1.0) / 2.0\n\t\t\t));*/\n\n\t\t\t/*vec3 normal;\n\t\t\tfloat scale = 1.0 / width;\n\n\t\t\tfloat s0 = smpl(-offsetX, -offsetY);\n\t\t\tfloat s1 = smpl(0.0, -offsetY);\n\t\t\tfloat s2 = smpl(offsetX, -offsetY);\n\n\t\t\tfloat s3 = smpl(-offsetX, 0.0);\n\t\t\tfloat s4 = smpl(0.0, 0.0);\n\t\t\tfloat s5 = smpl(offsetX, 0.0);\n\n\t\t\tfloat s6 = smpl(-offsetX, offsetY);\n\t\t\tfloat s7 = smpl(0.0, offsetY);\n\t\t\tfloat s8 = smpl(offsetX, offsetY);\n\n\t\t\tnormal.x = scale * -(s2-s0+2.0*(s5-s3)+s8-s6);\n\t\t\tnormal.y = scale * -(s6-s0+2.0*(s7-s1)+s8-s2);\n\t\t\tnormal.z = 1.0;\n\n\t\t\tnormal = normalize(normal);\n\n\t\t\tnormal.x += 1.0;\n\t\t\tnormal.x /= 2.0;\n\t\t\tnormal.y += 1.0;\n\t\t\tnormal.y /= 2.0;\n\n\t\t\treturn normal;*/\n\t\t}\n\n\t\tvoid main() {\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\t//float gray = toGray(texel);\n\t\t\t//gl_FragColor = opacity * vec4(vec3(gray), texel.a);\n\t\t\tvec3 normal = getNormal( vUv );\n\t\t\tgl_FragColor = vec4(normal, texel.a);\n\t\t}`\n};\n\nexport { NormalMapShader };","import * as THREE from 'three'\nimport * as POSTPROCESSING from 'postprocessing';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls'\n\nimport { AttributeController } from '../ControllerAttributes'\nimport { TextureProcessor } from './processing/TextureProcessor';\nimport { NormalMapShader } from './shaders/NormalMapShader';\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { SSAARenderPass } from 'three/examples/jsm/postprocessing/SSAARenderPass'; \n\nconst createLightAttributes = (light, description, opts) => {\n    const attributes = {};\n\n    attributes.description = description;\n\n    attributes.value = {\n        intensity: {\n            value: opts.intensity,\n            default: opts.intensity,\n            min: 0,\n            max: 15,\n\n            onChange: (value) => {\n                light().intensity = value;\n            },\n\n            description: \"Intensity/brightness of the light\"\n        },\n        color: {\n            value: opts.color,\n            default: opts.color,\n            type: 'color',\n            \n            onChange: (value) => {\n                light().color.set(value);\n            },\n\n            description: \"Color of the light\"\n        }\n\n    };\n\n    if(opts.type !== 'ambient') {\n        attributes.value.x = {\n            value: opts.position.x,\n            default: opts.position.x,\n            min: -2,\n            max: 2,\n\n            onChange: (value) => {\n                light().position.x = value;\n            },\n\n            description: \"X-coordinate of the light\"\n        };\n\n        attributes.value.y = {\n            value: opts.position.y,\n            default: opts.position.y,\n            min: 1,\n            max: 3,\n\n            onChange: (value) => {\n                light().position.y = value;\n            },\n\n            description: \"Y-coordinate of the light\"\n        };\n\n        attributes.value.z = {\n            value: opts.position.z,\n            default: opts.position.z,\n            min: -2,\n            max: 2,\n\n            onChange: (value) => {\n                light().position.z = value;\n            },\n\n            description: \"Z-coordinate of the light\"\n        };\n    }\n\n    if(opts.type === 'point') {\n        attributes.value.distance = {\n            value: opts.distance,\n            default: opts.distance,\n            min: 0.05,\n            max: 3,\n\n            onChange: (value) => {\n                light().distance = value;\n            },\n\n            description: \"How far away the light reaches\" \n        };\n\n        attributes.value.decay = {\n            value: opts.decay,\n            default: opts.decay,\n            min: 1,\n            max: 4,\n\n            onChange: (value) => {\n                light().decay = value;\n            },\n\n            description: \"How much the light decreases in intensity across distance\"\n        };\n    }\n\n    return attributes;\n};\n\nclass ThreeDController extends AttributeController {\n    constructor() {\n        super(() => { return {\n            metalness: {\n                value: 0.1,\n                default: 0.1,\n                min: 0.0,\n                max: 1.0,\n\n                onChange: (value) => {\n                    this.material.metalness = value;\n                },\n\n                description: \"How metallic the surface looks\"\n            },\n            roughness: {\n                value: 0.3,\n                default: 0.3,\n                min: 0.0,\n                max: 1.0,\n\n                onChange: (value) => {\n                    this.material.roughness = value;\n                },\n\n                description: \"How rough the surface is. A low value means clearer reflections\"  \n            },\n            bumpScale: {\n                value: 0.03,\n                default: 0.03,\n                min: 0.0,\n                max: 0.2,\n                step: 0.001,\n\n                onChange: (value) => {\n                    this.material.normalScale = new THREE.Vector2(value, value)\n                },\n\n                description: \"The amount of small details\"\n            },\n            displacement: {\n                value: {\n                    amount: {\n                        value: 0.2,\n                        default: 0.2,\n                        min: 0.0,\n                        max: 1.0,\n\n                        onChange: (value) => {\n                            this.material.displacementScale = value;\n                            this.material.displacementBias = -value / 2;\n                        },\n\n                        description: \"The height of the surface peaks\"\n                    },\n                    smoothness: {\n                        value: 0.1,\n                        default: 0.1,\n                        min: 0.0,\n                        max: 1.0,\n\n                        onChange: (value) => {\n                            this.blurPass.scale = value;\n                        },\n\n                        description: \"The smoothness of the surface peaks\"\n                    }\n                }\n            },\n            fog: {\n                value: {\n                    color: {\n                        value: '#000000',\n                        default: '#000000',\n                        type: 'color',\n                        \n                        onChange: (value) => {\n                            this.scene.fog.color.set(value);\n                            this.scene.background.set(value);\n                        },\n\n                        description: \"The color of the background and fog\"\n                    },\n                    near: {\n                        value: 0.43,\n                        default: 0.43,\n                        min: 0.001,\n                        max: 1.0,\n\n                        onChange: (value) => {\n                            this.scene.fog.near = value;\n                        },\n\n                        description: \"At what distance the fog starts to take affect\"\n                    },\n                    far: {\n                        value: 1.8,\n                        default: 1.8,\n                        min: 0.1,\n                        max: 4.0,\n\n                        onChange: (value) => {\n                            this.scene.fog.far = value;\n                        },\n\n                        description: \"At what distance the fog takes full effect\"\n                    }\n                }\n            },\n            lighting: {\n                value: {\n                    ambientLight: createLightAttributes(\n                        () => this.ambientLight, \n                        \"Static, ambient background lighting\",\n                        {\n                            type: \"ambient\",\n                            color: '#ffffff',\n                            intensity: 0.3,\n                        }\n                    ),\n                    directionalLight: createLightAttributes(\n                        () => this.directionalLight, \n                        \"Directional light, similar to the sun or another far away light source\", \n                        {\n                            type: \"directional\",\n                            color: '#ffffff',\n                            intensity: 0.75,\n                            position: new THREE.Vector3(0, 2, -2)\n                        }\n                    ),\n                    pointLight: createLightAttributes(\n                        () => this.pointLight, \n                        \"Positional light that affects the scene based on the proximity to the light source\",\n                        {\n                            type: \"point\",\n                            color: '#ffffff',\n                            intensity: 1.9,\n                            decay: 2,\n                            distance: 5,\n                            position: new THREE.Vector3(0, 1, -0.25)\n                        }\n                    )\n                },\n\n                description: \"Settings for the lights\"\n            }\n        }});\n\n        this.near = 0.01;\n        this.far = 50;\n\n        this.initialized = false;\n    }\n\n    initialize(textureCanvas, canvas) {\n        this.canvas = canvas;\n\n        // CREATE RENDERER\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: false,\n            powerPreference: 'high-performance'\n        });\n        this.renderer.physicallyCorrectLights = true;\n\n        // CREATE CAMERA\n        this.camera = new THREE.PerspectiveCamera(\n            75,                           // fov\n            canvas.width / canvas.height, // aspect\n            this.near,                    // near\n            this.far                      // far\n        );\n        this.camera.position.set(0, 0.5, 0.75);\n\n        // CREATE CONTROLS\n        this.controls = new TrackballControls(this.camera, canvas);\n        this.controls.rotationSpeed = 3;\n        this.controls.dynamicDampingFactor = 0.15;\n\n        // CREATE SCENE\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(this.getValue(\"fog.color\"));\n        this.scene.fog = new THREE.Fog(this.getValue(\"fog.color\"),\n            this.getValue(\"fog.near\"),\n            this.getValue(\"fog.far\")\n        );\n\n        // POPULATE SCENE\n\n        // Texture\n        const texture = new THREE.CanvasTexture(textureCanvas);\n        texture.needsUpdate = true;\n        texture.magFilter = THREE.LinearFilter;\n        texture.minFilter = THREE.LinearFilter;\n        this.texture = texture;\n\n        // Calculate normal map\n        this.normalMaterial = new THREE.ShaderMaterial(NormalMapShader);\n        this.normalMaterial.uniforms.width.value = canvas.clientWidth;\n        this.normalMaterial.uniforms.height.value = canvas.clientHeight;\n\n        const normalPass = new POSTPROCESSING.ShaderPass(\n            this.normalMaterial,\n            'tDiffuse'\n        );\n\n        this.normalMapProducer = new TextureProcessor(this.renderer, texture, canvas.clientWidth, canvas.clientHeight, [\n            normalPass,\n        ]);\n\n        // Calculate heightmap\n        const blurPass = new POSTPROCESSING.BlurPass({\n            kernelSize: POSTPROCESSING.KernelSize.MEDIUM\n        });\n        this.blurPass = blurPass;\n\n        this.heightMapProducer = new TextureProcessor(this.renderer, texture, canvas.clientWidth, canvas.clientHeight, [\n            blurPass\n        ]);\n\n        const normalMap = this.normalMapProducer.getProcessedTexture();\n        const heightMap = this.heightMapProducer.getProcessedTexture();\n\n        // Plane\n        const detail = 500;\n        const geometry = new THREE.PlaneBufferGeometry(1, 1, detail, detail);\n        const material = new THREE.MeshStandardMaterial({\n            color: '#ffffff',\n            map: texture,\n\n            metalness: this.getValue(\"metalness\"),\n            roughness: this.getValue(\"roughness\"),\n\n            normalMap: normalMap,\n            normalScale: new THREE.Vector2(\n                this.getValue(\"bumpScale\"),\n                this.getValue(\"bumpScale\")\n            ),\n\n            displacementMap: heightMap,\n            displacementScale: this.getValue(\"displacement.amount\"),\n            displacementBias: -this.getValue(\"displacement.amount\") / 2\n        });\n\n        const plane = new THREE.Mesh(geometry, material);\n        plane.rotation.x = -Math.PI / 2;\n\n        this.material = material;\n\n        // Light\n        this.ambientLight = new THREE.AmbientLight(\n            this.getValue(\"lighting.ambientLight.color\"), \n            this.getValue(\"lighting.ambientLight.intensity\")\n        );\n\n        this.directionalLight = new THREE.DirectionalLight(\n            this.getValue(\"lighting.directionalLight.color\"),\n            this.getValue(\"lighting.directionalLight.intensity\")\n        );\n        this.directionalLight.position.set(\n            this.getValue(\"lighting.directionalLight.x\"),\n            this.getValue(\"lighting.directionalLight.y\"),\n            this.getValue(\"lighting.directionalLight.z\")\n        );\n\n        this.pointLight = new THREE.PointLight(\n            this.getValue(\"lighting.pointLight.color\"),\n            this.getValue(\"lighting.pointLight.intensity\"),\n            this.getValue(\"lighting.pointLight.distance\"),\n            this.getValue(\"lighting.pointLight.decay\"),\n        );\n        this.pointLight.position.set(\n            this.getValue(\"lighting.pointLight.x\"),\n            this.getValue(\"lighting.pointLight.y\"),\n            this.getValue(\"lighting.pointLight.z\")\n        );\n\n        this.scene.add(\n            plane,\n            this.ambientLight,\n            this.directionalLight,\n            this.pointLight\n        );\n\n        // Post processing\n        this.composer = new EffectComposer(this.renderer);\n        this.composer.addPass(new SSAARenderPass(this.scene, this.camera));\n        this.composer.setPixelRatio(window.devicePixelRatio);\n\n        this.initialized = true;\n\n        this.handleResize();\n        return true;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    update(delta) {\n        this.controls.update();\n        this.texture.needsUpdate = true;\n    }\n\n    render(delta) {\n        this.normalMapProducer.render(delta);\n        this.heightMapProducer.render(delta);\n\n        this.composer.render(delta);\n\n        // Capture the frame if requested\n        if(this.captureNext) {\n            this.captureNext = false;\n            const captureData = this.canvas.toDataURL(\"image/png\");\n            this.dataCallback(captureData);\n        }\n    }\n\n    // Used to capture the next frame of animation\n    // The data callback function will be used to return the result\n    captureFrame(dataCallback) {\n        this.captureNext = true;\n        this.dataCallback = dataCallback;\n    }\n\n    handleResize() {\n        if(!this.initialized) return;\n\n        const width = this.canvas.clientWidth;\n        const height = this.canvas.clientHeight;\n\n        const currentSize = this.renderer.getSize(new THREE.Vector2());\n\n        const newSize = new THREE.Vector2(width, height);\n\n        if(currentSize.equals(newSize)) return;\n\n        this.renderer.setSize( newSize.x, newSize.y, false );\n        this.composer.setSize( newSize.x, newSize.y );\n\n        this.normalMaterial.uniforms.width.value = newSize.x;\n        this.normalMaterial.uniforms.height.value = newSize.y;\n\n        this.camera.aspect = newSize.x / newSize.y;\n        this.camera.updateProjectionMatrix();\n\n        this.normalMapProducer.setSize( newSize.x, newSize.y );\n        this.heightMapProducer.setSize( newSize.x, newSize.y );\n    }\n}\n\nexport { ThreeDController };","import { addFrame, downloadBundle } from \"canvas-recorder\"\n\nclass AnimationManager {\n    constructor() {\n        this.previousMillis = Date.now(); // The global time in millisecond for when the the previous frame \n                                 // was rendered\n\n        // The animation frame ID of the current frame\n        // Used to cancel the animation if necessary\n        this.animationFrameId = -1;\n\n        // Callback function that will be called each update\n        //this.callback = null;\n        this.callbacks = [];\n\n        // True if the animation loop is currently running\n        this.running = false;\n\n        // Frame rate\n        this.lastSecond = this.previousMillis;\n        this.framesSinceLastSecond = 0;\n\n        this.currentFrameRate = 0;\n\n        this.frameRateAlpha = 0.3;\n        this.averageFrameRate = 0;\n\n        // Recording\n        this.recording = false;\n    }\n\n    setCallback(callback) {\n        this.callbacks = [callback];\n    }\n\n    addCallback(callback) {\n        this.removeCallback(callback); // Remove callback if it already exists\n        this.callbacks.push(callback); // Add callback\n    }\n\n    removeCallback(callback) {\n        this.callbacks = this.callbacks.filter((cb) => {\n            if(''+cb == ''+callback) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    removeAllCallbacks() {\n        this.callbacks = [];\n    }\n\n    isRunning() {\n        return this.running;\n    }\n\n    start() {\n        // If already running, do nothing\n        if(this.isRunning()) return;\n\n        this.running = true;\n\n        const update = () => {\n            // Calculate the time passed since last frame\n            const now = Date.now();\n            const delta = (now - this.previousMillis) / 1000;\n\n            /*if(this.callback) {\n                this.callback(delta);\n            }*/\n            this.callbacks.forEach(callback => callback(delta));\n\n            // Update the time\n            this.previousMillis = now;\n\n            // Request the next animation frame\n            this.animationFrameId = requestAnimationFrame(update);\n\n            // Calculate framerate\n            this.framesSinceLastSecond++;\n\n            //TODO calculate each update not just every second\n            if(now - this.lastSecond > 1000) {\n                this.currentFrameRate = this.framesSinceLastSecond;\n                this.framesSinceLastSecond = 0;\n                this.lastSecond = now;\n\n                // Calculate a weighted frame rate average\n                this.averageFrameRate = \n                    this.frameRateAlpha * this.currentFrameRate +\n                    (1.0 - this.frameRateAlpha) * this.averageFrameRate;\n            }\n        }\n\n        // Call update, which will recursively request animation frames\n        update();\n    }\n\n    stop() {\n        this.running = false;\n        // Also stop recording if currently recording\n        if(this.recording) this.stopRecording();\n        cancelAnimationFrame(this.animationFrameId);\n    }\n\n    getFrameRate() {\n        return this.currentFrameRate;\n    }\n\n    getAverageFrameRate() {\n        return this.averageFrameRate;\n    }\n\n    startRecording(frameRate, canvas) {\n        // Stop the regular animation \n        this.stop();\n\n        // Start recording\n        this.recording = true;\n\n        // Create a stable delta, based on the frameRate\n        const delta = (1.0 / frameRate);\n\n        // Record a single frame\n        const recordFrame = () => {\n            /*if(this.callback) {\n                this.callback(delta);\n            }*/\n            this.callbacks.forEach(callback => callback(delta));\n\n            addFrame(canvas).then( () => {\n                // And request a second frame\n                this.animationFrameId = requestAnimationFrame(recordFrame);\n            });\n        };\n\n        recordFrame();\n    }\n\n    stopRecording() {\n        // If not recording, do nothing\n        if(!this.recording) return;\n        this.recording = false;\n\n        // Download the current set of images\n        downloadBundle();\n\n        // Stop the animation\n        this.stop();\n\n        // Update the millis (to ensure smooth transition to regular animation)\n        this.previousMillis = Date.now();\n\n        // Start animating as usually\n        this.start();\n    }\n}\n\nexport {\n    AnimationManager\n}","class GLController {\n    ////////////////////\n    // INITIALIZATION //\n    ////////////////////\n\n    constructor() {\n        this.canvas = null;\n        this.gl = null;\n        this.initialized = false;\n\n        // Map for storing uniform locations\n        this.uniformLocations = new WeakMap();\n\n        // Extensions\n        this.EXT_color_buffer_float = null; // For rendering to float textures\n        this.KHR_parallel_shader_compile = null; // For paralell shader ocmpilation\n    }\n\n    // Initialize the canvas and webgl context variables\n    initialize(canvas) {\n        // INITIALIZE THE WEBGL CONTEXT\n        console.log(\"Initializing webgl context\");\n\n        // If the canvas is null, we cannot proceed. Abort.\n        if(!canvas) {\n            console.log(\"The canvas is not initialized\")\n            return false;\n        }\n\n        // Get the webgl2 context (required for floating point color buffers)\n        let gl = canvas.getContext('webgl2');\n\n        // If webgl2 is not supported, fall back on webgl1\n        if(!gl) {\n            console.log('Webgl2 not supported, falling back on webgl1');\n            gl = canvas.getContext('webgl');\n            this.hasWebGL2 = false;\n        } else {\n            this.hasWebGL2 = true;\n        }\n\n        // If no context was retrieved, try experimental webgl\n        if(!gl) {\n            console.log('Webgl not supported, falling back on experimental-webgl');\n            gl = canvas.getContext('experimental-webgl');\n        }\n\n        // If there's still no context, abort\n        if(!gl) {\n            alert(\"Your browser does not support WebGL\");\n            return false;\n        }\n\n        // Acquire the color buffer float extension\n        this.EXT_color_buffer_float = gl.getExtension(\"EXT_color_buffer_float\");\n        if (!this.EXT_color_buffer_float) {\n            console.log(\"Floating point color buffers not supported. Quality will be reduced\");\n            this.hasFloatColorBuffer = false;\n        } else {\n            this.hasFloatColorBuffer = true;\n        }\n\n        this.maxVertexAttrib = 0;\n\n        this.canvas = canvas;\n        this.gl = gl;\n        this.initialized = true;\n\n        return true;\n    }\n\n    webGL2Supported() {\n        return this.hasWebGL2;\n    }\n\n    floatColorBufferSupported() {\n        return this.hasFloatColorBuffer;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    ///////////////////////\n    // DATA/OBJECT SETUP //\n    ///////////////////////\n\n    setQuadAttributeLayout(program, positionLocation, texCoordLocation = null) {\n        // Set and enable the corresponding position attribute \n        this.setAttribLayout(\n            program, \n            positionLocation,\n            2,\n            this.gl.FLOAT,\n            4 * Float32Array.BYTES_PER_ELEMENT,\n            0\n        );\n\n        // If supplied, also set the location for texture coords\n        if(texCoordLocation) {\n            this.setAttribLayout(\n                program, \n                texCoordLocation,\n                2,\n                this.gl.FLOAT,\n                4 * Float32Array.BYTES_PER_ELEMENT,\n                2 * Float32Array.BYTES_PER_ELEMENT\n            );\n        }\n    }\n\n    // Setup a two triangles that cover the entire screen\n    createFullScreenQuad(program = null, positionLocation = null, texCoordLocation = null) {\n        const triangleVertices = \n        [\n            // Triangle 1\n            -1.0,  1.0,     0, 1,\n            -1.0, -1.0,     0, 0,\n             1.0, -1.0,     1, 0,\n\n            // Triangle 2\n            -1.0,  1.0,     0, 1, \n             1.0,  1.0,     1, 1,\n             1.0, -1.0,     1, 0\n        ];\n\n        // Array buffer for triangle vertices\n        this.quadBuffer = this.createBuffer(this.gl.ARRAY_BUFFER, triangleVertices, this.gl.STATIC_DRAW);\n\n        // Set attribute layouts if supplied\n        if(program && positionLocation) {\n            this.setQuadAttributeLayout(program, positionLocation, texCoordLocation);\n        }\n    }\n\n    // Creates an arbitrary webgl buffer and loads it with data\n    createBuffer(bufferType, data, drawMode) {\n        var buffer = this.gl.createBuffer();\n        this.bindBuffer(bufferType, buffer);\n        this.gl.bufferData(bufferType, new Float32Array(data), drawMode);\n        return buffer;\n    }\n\n    // Create frame buffer\n    createFramebuffer(colorTexture) {\n        const fb = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);\n        this.gl.framebufferTexture2D(\n            this.gl.FRAMEBUFFER,\n            this.gl.COLOR_ATTACHMENT0,\n            this.gl.TEXTURE_2D,\n            colorTexture,\n            0\n        );\n        if(this.webGL2Supported()) {\n            this.gl.drawBuffers([this.gl.COLOR_ATTACHMENT0]);\n        }\n\n        return fb;\n    }\n\n    // Create empty texture\n    createTexture(width, height, format = this.gl.RGBA, internalFormat = this.gl.RGBA, type = this.gl.UNSIGNED_BYTE) {\n        // Create and bind a new texture buffer\n        const texture = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n        // Define default values and initialize texture\n        const level = 0;\n        const border = 0;\n        const data = null;\n        this.gl.texImage2D(this.gl.TEXTURE_2D,\n            level, internalFormat,\n            width, height, border,\n            format, type, data);\n\n        // Set linear filtering and clamping\n        if(type !== this.gl.FLOAT) {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        } else {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        }\n\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n\n        return texture;\n    }\n\n    // Creates a texture using an image url\n    createImageTexture(src, wrap = this.gl.CLAMP_TO_EDGE, filtering = this.gl.LINEAR, onLoad = null, onError = null) {\n        // Load empty texture\n        const texture = this.createTexture(1, 1, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE);\n\n        // Load image\n        var image = new Image();\n        image.onload = () => {\n            // Bind and set image as texture\n            this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\n\n            // Set wrapping and filtering\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, wrap);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, wrap);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, filtering);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, filtering);\n\n            // Callback on load\n            onLoad && onLoad(image.width, image.height);\n        };\n        image.onerror = () => {\n            // Callback on error\n            onError && onError();\n        }\n\n        image.src = src;\n        return texture;\n    }\n\n    /////////////\n    // SHADERS //\n    /////////////\n\n    // Creates shader programs, loads with shader source, compiles and links \n    // Allows for parallel compilation/linking if browser supports it\n    compileAndLinkShaders(sources) {\n        // Create a list of tuples: [vertexShader, fragmentShader, shaderProgram]\n        // If the browser supports it, these will then be compiled and linked in parallell\n        const programs = [];\n        for (const [vertexSource, fragmentSource] of sources) {\n            const vs = this._createShader(vertexSource, this.gl.VERTEX_SHADER);\n            const fs = this._createShader(fragmentSource, this.gl.FRAGMENT_SHADER);\n            const program = this._createShaderProgram(vs, fs);\n            programs.push([vs, fs, program]);\n        }\n\n        // Compile all shaders\n        for (const [vs, fs, ] of programs) {\n            this._compileShader(vs);\n            this._compileShader(fs);\n        }\n\n        // Link all programs\n        for (const [, , program] of programs) {\n            this.gl.linkProgram(program);\n        }\n\n        // Check for link errors        \n        for (const [vs, fs, program] of programs) {\n            if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n                console.error('Link failed: ' + this.gl.getProgramInfoLog(program));\n                console.error('vs info-log: ' + this.gl.getShaderInfoLog(vs));\n                console.error('fs info-log: ' + this.gl.getShaderInfoLog(fs));\n\n                return null;\n            }\n        }\n\n        // Only return the actual shader programs\n        return programs.map(([,,program]) => program);\n    }\n\n    compileAndLinkShader(vertexSource, fragmentSource) {\n        return this.compileAndLinkShaders([[vertexSource, fragmentSource]])[0];\n    }\n\n    _createShader(source, type) {\n        const shader = this.gl.createShader(type);\n        this.gl.shaderSource(shader, source);\n        return shader;\n    }\n\n    _compileShader(shader) {\n        if (shader.compiled) return;\n        this.gl.compileShader(shader);\n        shader.compiled = true;\n    }\n\n    _createShaderProgram(vs, fs) {\n        const program = this.gl.createProgram();\n        this.gl.attachShader(program, vs);\n        this.gl.attachShader(program, fs);\n        return program;\n    }\n\n    ////////////\n    // RENDER //\n    ////////////\n\n    bindFramebuffer(fbo) {\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fbo);\n    }\n\n    // Render the default full screen quad\n    renderFullScreenQuad(program) {\n        // Switch program\n        this.setShaderProgram(program);\n\n        // Bind the data\n        this.bindBuffer(this.gl.ARRAY_BUFFER, this.quadBuffer);\n\n        // Clear and draw \n        this.clear(0.0, 0.0, 0.0, 1.0);\n        this.draw(6);\n    }\n\n    // Clear the canvas (both color and depth information)\n    clear(r, g, b, a) {\n        this.gl.clearColor(r, g, b, a);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n    \n    // Draws a specified number of vertices\n    draw(numberOfVertices) {\n        this.gl.drawArrays(this.gl.TRIANGLES,  0, numberOfVertices);\n    }\n\n    // Sets the viewport of the webgl context\n    setViewport(width, height) {\n        this.gl.viewport(0, 0, width, height);\n    }\n\n    /////////////\n    // SHADERS //\n    /////////////\n\n    // Sets and enables a shader attribute\n    setAttribLayout(program, name, numberOfElements, type, vertexSize, offset) {\n        var location = this.gl.getAttribLocation(program, name);\n        if(location > this.maxVertexAttrib) this.maxVertexAttrib = location;\n\n        if(location === -1) {\n            return -1;\n        }\n\n        this.gl.vertexAttribPointer(\n            location,\n            numberOfElements,\n            type,\n            this.gl.FALSE,\n            vertexSize,\n            offset\n        );\n        this.gl.enableVertexAttribArray(location);\n    }\n\n    // Enables a specific shader\n    setShaderProgram(program) {\n        if(this.currentProgram === program) return;\n        this.currentProgram = program;\n        this.gl.useProgram(program);\n    }\n\n    // Sets the uniform value of a specific shader\n    // Type corresponds to the webgl API uniform setters\n    // For example, if \"value\" is an integer, then \"type\" should be \"1i\"\n    // If \"value\" is a float array with three elements, \"type\" should be \"3fv\", and so on\n    setUniform(program, name, type, value) {\n        this.setShaderProgram(program);\n\n        // Store the locations in a map, to avoid having to unnecessary uniform location lookups\n        const key = { program, name };\n        var location = this.uniformLocations.get(key);\n        if(typeof location === 'undefined') {\n            location = this.gl.getUniformLocation(program, name);\n            this.uniformLocations.set(key, location);\n        }\n\n        // Set value\n        this.gl[\"uniform\" + type](location, value);\n    }\n\n    setTexture(texture, unit) {\n        // Tell WebGL we want to affect texture unit \"unit\"\n        this.gl.activeTexture(this.gl[\"TEXTURE\" + unit]);\n\n        // Bind the texture \n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    }\n\n    //////////////\n    // DELETING //\n    //////////////\n\n    deleteTexture(texture) {\n        this.gl.deleteTexture(texture);\n    }\n\n    deleteFramebuffer(fbo) {\n        this.gl.deleteFramebuffer(fbo);\n    }\n\n    //////////\n    // UTIL //\n    //////////\n    flush() {\n        this.gl.flush();\n    }\n\n    // Binds a buffer\n    bindBuffer(bufferType, buffer) {\n        this.gl.bindBuffer(bufferType, buffer);\n    }\n\n    // Returns the webgl context\n    getGL() {\n        return this.gl;\n    }\n}\n\n// Create and export a static GLC instance which can be used globally\nexport {\n    GLController\n}","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 vertPosition;\\nattribute vec2 inTexCoord;\\n\\nattribute vec3 vertColor;\\n\\nvarying vec3 fragColor;\\nvarying vec2 texCoord;\\n\\nvoid main() \\n{\\n    fragColor = vertColor;\\n    texCoord = inTexCoord;\\n    gl_Position = vec4(vertPosition, 0.0, 1.0);\\n}\";","export default __webpack_public_path__ + \"static/media/LDR_RGBA_7.0ec5ab28.png\";","// Controllers\nimport { TextureController } from './TextureController'\nimport { ColorController } from './ColorController'\nimport { RenderController } from './RenderController'\nimport { ThreeDController } from '../three/ThreeDController'\n\n// Animation\nimport { AnimationManager } from '../AnimationManager'\n\n// WebGL wrapper\n//import GLC from '../GLC'\nimport { GLController } from '../GLC'\n\n// Shaders\nimport quadVertShaderSoruce from '../../GL/shaders/simple.vert'\nimport textureFragShaderSource from '../../GL/shaders/warp.frag'\nimport colorFragShaderSource from '../../GL/shaders/color.frag'\nimport { mergeAttributes, resetAttributesToDefault } from '../ControllerAttributes'\n\n// Resources\nimport ditheringTexture from '../../resources/blue-noise/LDR_RGBA_7.png'\n\n// Class for controlling the entire application\nclass WarpAppController {\n    ////////////////////\n    // INITIALIZATION //\n    ////////////////////\n\n    constructor() {\n        // General states\n        this.initialized = false; // True once \"initialized\" has been succesfully called\n        this.controllers = null; // Holds all the controllers responsible for managing the domain warp\n        this.paused = false; // True if the animation is paused\n\n        this.canvas = null;\n\n        // Anchored movement\n        this.anchored = false; // True if an anchor exists\n        this.anchor = null;    // The anchor position specifies which location should be used to calculate \n                               // offsets when using anchored movement (good for moving using mouse)\n        this.previousPosition = null; // Is used to calculate offsets\n\n        // Controllers and help classes\n        this.GLC = new GLController();\n        this.AM = new AnimationManager();\n\n        this.RC = new RenderController();\n        this.TXC = new TextureController();\n        this.CC  = new ColorController();\n        this.TDC = new ThreeDController();\n\n        this.render3D = false;\n\n        this.controllers = {\n            RC: this.RC,\n            TXC: this.TXC,\n            CC:  this.CC,\n            TDC: this.TDC,\n        }; \n\n        this.updateCallbacks = new Map();\n\n        // Will be called when any of the attributes are updated\n        this.onUpdate = null;\n    }\n\n    initialize(canvas, canvas3D, onUpdate) {\n        if(this.initialized) return;\n\n        // Initialize WebGL controller\n        if(!(this.GLC.initialize(canvas))) {\n            throw new Error(\"GLC failed to initialize\");\n        }\n\n        // Compile and link shaders\n        const programs = this.GLC.compileAndLinkShaders([\n            [quadVertShaderSoruce, textureFragShaderSource],\n            [quadVertShaderSoruce, colorFragShaderSource]\n        ]);\n\n        if(!programs) {\n            throw new Error(\"Shader program linking failed\");\n        }\n\n        const [textureProgram, colorProgram] = programs;\n\n        // Initialize quad that will be used to render to the entire screen\n        this.GLC.createFullScreenQuad();\n        this.GLC.setQuadAttributeLayout(textureProgram, \"vertPosition\");\n        this.GLC.setQuadAttributeLayout(colorProgram, \"vertPosition\", \"inTexCoord\");\n\n        // Initialize render controller\n        if(!(this.RC.initialize(canvas, this.GLC))) {\n            throw new Error(\"Render controller failed to initialize\");\n        }\n\n        // Initialize texture controller\n        if(!(this.TXC.initialize(canvas, textureProgram, this.GLC))) {\n            throw new Error(\"Texture controller failed to initialize\");\n        }\n        this.TXC.setPaused(this.paused);\n\n        // Initialize color controller\n        if(!this.CC.initialize(canvas, colorProgram, this.GLC, ditheringTexture)) {\n            throw new Error(\"Color controller failed to initialize\");\n        }\n\n        // Initialize 3D controller\n        if(!this.TDC.initialize(canvas, canvas3D)) {\n            console.error(\"3D controller failed to initialize. 3D disabled\");\n        } \n\n        this.onUpdate = onUpdate;\n        this.canvas = canvas;\n        this.initialized = true;\n\n        return true;\n    }\n\n    isInitialized() {\n        return this.initialized;\n    }\n\n    /////////////////////////\n    // ANIMATION/RENDERING //\n    /////////////////////////\n\n    _render(delta) {\n        const fbo = this.RC.getFrameBuffer();\n\n        const renderTexture = this.RC.getRenderTexture();\n        const renderTextureDimensions = this.RC.getRenderTextureDimensions();\n\n        const dimensions = this.RC.getDimensions();\n\n        const ditheringAmount = this.RC.getValue(\"ditheringAmount\");\n\n        // The texture controller will render to a texture\n        this.TXC.render(fbo, renderTextureDimensions, delta);\n\n        // Pass this texture along to the color controller\n        // Also tell the color controller if multisampling is enabled\n        this.CC.render(renderTexture, dimensions, \n            this.RC.getValue(\"multisampling\"), ditheringAmount,\n            this.paused ? 0.0 : delta);\n\n        // If 3D is enabled, render\n        if(this.render3D) {\n            this.TDC.render(delta);\n        }\n    }\n\n    // Starts the animation manager\n    // This is required for anything to be rendered to the canvas\n    start(callback = null) {\n        // If already running, do nothing\n        if(this.AM.isRunning()) return;\n\n        // Set the render callback for the animation manager\n        this.AM.setCallback((delta) => {\n            this._render(delta);\n\n            // If 3D is enabled, update\n            if(this.render3D) {\n                this.TDC.update(delta);\n            }\n\n            callback && callback();\n        });\n\n        this.AM.start();\n    }\n\n    addUpdateCallback(callback) {\n        this.AM.addCallback(callback);\n    }\n\n    removeUpdateCallback(callback) {\n        this.AM.removeCallback(callback);\n    }\n\n    removeAllUpdateCallbacks() {\n        this.AM.removeAllCallbacks();\n    }\n\n    // Stops the animation\n    stop() {\n        this.AM.stop();\n    }\n\n    animationManager() {\n        return this.AM;\n    }\n\n    startRecording(frameRate = 60) {\n        this.AM.startRecording(frameRate, this.canvas);\n    }\n\n    stopRecording() {\n        this.AM.stopRecording();\n    }\n\n    // Resize the canvas (will use the dimensions of the window)\n    // TODO allow passing custom dimensions\n    handleResize() {\n        this.RC.handleResize();\n        this.TDC.handleResize();\n        this.resizeCallback && this.resizeCallback(this.getDimensions());\n    }\n\n    addResizeCallback(callback) {\n        this.RC.addResizeCallback(callback);\n    }\n\n    // Capture the next frame\n    // The data callback should be a function that takes a data URL of a PNG\n    captureFrame(dataCallback) {\n        if(!this.render3D) {\n            this.CC.captureFrame(dataCallback);\n        } else {\n            this.TDC.captureFrame(dataCallback);\n        }\n    }\n\n    ///////////////////\n    // STATE CONTROL //\n    ///////////////////\n    setRender3D(render3D) {\n        if(!this.TDC.isInitialized()) return;\n        \n        this.render3D = render3D;\n    }\n\n    changeAnimationSpeed(delta) {\n        const speed = this.TXC.getValue(\"animationSpeed.general\");\n        this.updateValue(\"TXC\", \"animationSpeed.general\", Math.max(speed * (1 + delta)));\n    }\n\n    changeScale(amount, sourcePosition = null) {\n        // Get the current scale value\n        var scale = this.TXC.getValue(\"scale\");\n\n        // Calculate a new scale value based on the previous one\n        const delta = amount * scale; \n        scale += delta;\n\n        // Update the value in the texture controller\n        // and do not alter the position if the value is not updated\n        if(!this.updateValue(\"TXC\", \"scale\", scale)) return;\n\n        // If a source position is supplied, scale around that position\n        if(!sourcePosition) return;\n\n        // Offset the center in the direction of the cursor\n        var offset = this._screenSpaceToViewSpace([\n            (sourcePosition[0] - window.innerWidth  / 2) * delta,\n            (sourcePosition[1] - window.innerHeight / 2) * delta,\n        ]);\n\n        const position = this.TXC.getPosition();\n        this.TXC.setPosition([position[0] - offset[0], position[1] + offset[1]]); \n    }\n\n    move(offset) {\n        this.anchored = false; // Lift anchor if moving regularly\n\n        const position = this.TXC.getPosition(); \n        const scale = this.TXC.getValue(\"scale\");\n\n        // Translate the offset to view space coordinates\n        offset = this._screenSpaceToViewSpace(offset);\n\n        // Add offset to current position and scale to ensure expected movement speed\n        this.TXC.setPosition([position[0] + offset[0] * scale, position[1] + offset[1] * scale]);\n    }\n\n    setAnchor(anchor) {\n        if(this.anchored) return false; // The current anchor has to be lifted first\n        this.anchor = anchor;\n        \n        // Store a copy of the previous position, will be used\n        // to calculate offsets\n        const position = this.TXC.getPosition();\n        this.previousPosition = [position[0], position[1]];\n\n        this.anchored = true;\n\n        return true;\n    }\n\n    liftAnchor() {\n        if(!this.anchored) return false;\n        this.anchored = false;\n        return true;\n    }\n\n    // Moves the view using the specified offset from the anchor position\n    anchorMove(offset) {\n        if(!this.anchored) return false;\n\n        // Get the current scale. This is used to correctly translate the view\n        const scale = this.TXC.getValue(\"scale\");\n\n        // The offset from the anchor point \n        const viewSpaceOffset = this._screenSpaceToViewSpace([\n            (this.anchor[0] - offset[0]) * scale,\n            (this.anchor[1] - offset[1]) * scale\n        ]);\n\n        // The previous view position\n        // This previous position is set when the mouse button is first pressed\n        this.TXC.setPosition([\n            this.previousPosition[0] + viewSpaceOffset[0], \n            this.previousPosition[1] - viewSpaceOffset[1]\n        ]);\n\n    }\n\n    randomize() {\n        this.TXC.randomize();\n        this.CC.randomize();\n        this.onUpdate && this.onUpdate();\n    }\n\n    ///////////////////\n    // SAVING STATES //\n    ///////////////////\n\n    // Exports the relevant settings as a JSON file\n    exportSettings() {\n        const exported = {};\n\n        // Iterate over all the controllers\n        for (const controllerName in this.controllers) {\n            const controller = this._getController(controllerName);\n\n            // Set their corresponding attributes\n            exported[controllerName] = controller.getAttributes();\n        }\n\n        return exported;\n    }\n\n    importSettings(imported) {\n        // Iterate over all the controllers\n        for (const controllerName in this.controllers) {\n            const controller = this._getController(controllerName);\n\n            const importedAttributes = imported[controllerName];\n            if(!importedAttributes) continue;  \n\n            const oldAttributes = controller.getAttributes();\n\n            // Merge the imported attributes with the default attributes\n            // This ensures settings for old remains as compatible as possible\n            // with settings for never versions of the application\n            const newAttributes = mergeAttributes(\n                resetAttributesToDefault(oldAttributes), // Use default values as base\n                importedAttributes                       // Override with imported values\n            );\n\n            // Set their corresponding attributes\n            controller.setAttributes(newAttributes);\n        }\n\n        this.onUpdate && this.onUpdate();\n    }\n\n    /////////////\n    // GETTERS //\n    /////////////\n\n    getFrameRate() {\n        return this.AM.getFrameRate();\n    }\n\n    getAverageFrameRate() {\n        return this.AM.getAverageFrameRate();\n    }\n\n\n    getDimensions() {\n        return this.RC.getDimensions();\n    }\n\n    _getController(controllerName) {\n        const controller = this.controllers[controllerName];\n        if(!controller) throw new Error(\"No such controller\");\n        return controller;\n    }\n\n    getValue(controllerName, location) {\n        if(!this.initialized) return;\n        return this._getController(controllerName)\n        .getValue(location);\n    }\n    getDefault(controllerName, location) {\n        if(!this.initialized) return;\n        return this._getController(controllerName)\n        .getDefault(location);\n    }\n\n    getAttributes(controllerName) {\n        if(!this.initialized) return;\n        return this._getController(controllerName).getAttributes();\n    }\n\n    isAnchored() {\n        return this.anchored;\n    }\n\n    isPaused() {\n        return this.paused;\n    }\n\n    /////////////\n    // SETTERS //\n    /////////////\n\n    updateValue(controllerName, location, value) {\n        if(!this.initialized) return;\n\n        this.onUpdate && this.onUpdate();\n\n        const result = this._getController(controllerName).updateValue(location, value);\n\n        const key = controllerName + \":\" + location;\n        const callback = this.updateCallbacks.get(key);\n        if(callback) callback(controllerName, location, value);\n\n        return result;\n    }\n\n    setPaused(paused) {\n        this.paused = paused;\n        this.TXC.setPaused(this.paused);\n    }\n\n    setUpdateCallback(controllerName, location, callback) {\n        const key = controllerName + \":\" + location;\n        this.updateCallbacks.set(key, callback)\n    }\n\n    //////////\n    // UTIL //\n    //////////\n    _screenSpaceToViewSpace(position) {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        // Calculate the proportions of the screen\n        const proportions = height / width;\n\n        // Scale and correct for proportions\n        return [position[0] / width, position[1] * proportions / height];\n    }\n}\n\nconst WAC = new WarpAppController();\n\nexport default WAC;","export default \"#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nstruct Modifications {\\n    float ridgeThreshold;\\n\\n    float pow;\\n\\n    float xStretch;\\n    float yStretch;\\n    \\n    float mod;\\n};\\n\\nstruct NoiseSettings {\\n    int type;\\n    int dimensions;\\n    float frequency;\\n    float amplitude;\\n    vec3 offset;\\n\\n    int octaves;\\n    float lacunarity;\\n    float persistence;\\n    \\n    Modifications modifications;\\n};\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nint PERLIN = 0;\\nint SIMPLEX = 1;\\n\\nbool isnan( float val )\\n{\\n  return ( val < 0.0 || 0.0 < val || val == 0.0 ) ? false : true;\\n}\\n\\nbool isinf(float val) {\\n    return (val != 0.0 && val * 2.0 == val) ? true : false;\\n}\\n\\nfloat getNoise(vec3 position, float frequency, float amplitude, vec3 offset, Modifications modifications) {\\n    vec3 sample = position * vec3(modifications.xStretch, modifications.yStretch, 1.0) * frequency + offset;\\n    float result = 0.0;\\n\\n    result = snoise(sample);\\n    result = 0.5 + result / 2.0;\\n\\n    // Apply modiifcations\\n    if(modifications.ridgeThreshold < 1.0) {\\n        float threshold = max(0.5, modifications.ridgeThreshold);\\n        if(result > threshold) {\\n            result = threshold - (result - threshold);\\n        }\\n        //TODO fix magic number etc\\n        result /= threshold;\\n        //pow(threshold, 0.70);\\n    }\\n    if(modifications.pow != 1.0) {\\n        result = pow(result, modifications.pow);\\n    }\\n\\n    if(modifications.mod != 1.0) {\\n        result = fract(result * modifications.mod);\\n    }\\n\\n    // Verify valid result\\n    if(isnan(result)) {\\n        result = 0.0;\\n    }\\n    if(isinf(result)) {\\n        result = 1.0;\\n    }\\n\\n    return amplitude * result;\\n}\\n\\nfloat noiseSupplier(NoiseSettings settings, vec3 position) {\\n    int octaves = settings.octaves;\\n    vec3 offset = settings.offset;\\n    Modifications modifications = settings.modifications;\\n\\n    float result = 0.0;\\n    float max = 0.0;\\n    if(octaves == 1) {\\n        result = getNoise(position, settings.frequency, 1.0, offset, modifications);\\n        max = 1.0;\\n    } else if(octaves == 3) {\\n        for(int i = 0; i < 3; i++) {\\n            float f = settings.frequency * pow(settings.lacunarity,  float(i));\\n            float a = 1.0                * pow(settings.persistence, float(i));\\n            result += getNoise(position, f, a, offset, modifications);\\n            max += a;\\n        }\\n    } else if(octaves == 5) {\\n        for(int i = 0; i < 5; i++) {\\n            float f = settings.frequency * pow(settings.lacunarity,  float(i));\\n            float a = 1.0                * pow(settings.persistence, float(i));\\n            result += getNoise(position, f, a, offset, modifications);\\n            max += a;\\n        }\\n    }\\n\\n    return settings.amplitude * result / max;\\n}\\n\\n#define PI 3.1415926538\\n\\nvec2 polarWarp(vec2 point, NoiseSettings angleControl, NoiseSettings amountControl, float max) {\\n    vec3 p = vec3(point.xy, 0);\\n\\n    float amount = noiseSupplier(amountControl, p) * max;\\n    float angle = noiseSupplier(angleControl, p) * PI * 2.0;\\n    vec2 offset = vec2(cos(angle), sin(angle)) * amount;\\n\\n    return point + offset;\\n}\\n\\n#define PI 3.1415926538\\n\\nvarying vec3 fragColor;\\n\\nuniform NoiseSettings source;\\nuniform NoiseSettings angleControl;\\nuniform NoiseSettings amountControl;\\n\\nuniform int octaves;\\n\\nuniform float scale;\\nuniform vec2 viewport;\\n\\nuniform vec2 position;\\n\\nuniform float warpAmount;\\nuniform int iterations;\\n\\n#define RECURSIVE_WARP(p, angle, amount, iterations) for(int i = 0; i < (iterations); i++) { p = polarWarp(p, (angle), (amount), warpAmount); }\\n\\nvec2 recursiveWarp(vec2 p, NoiseSettings angleControl, NoiseSettings amountControl) {\\n    if(iterations == 0) {\\n    } else if(iterations == 1) {\\n        RECURSIVE_WARP(p, angleControl, amountControl, 1);\\n    } else if(iterations == 2) {\\n        RECURSIVE_WARP(p, angleControl, amountControl, 2);\\n    } else if(iterations == 3) {\\n        RECURSIVE_WARP(p, angleControl, amountControl, 3);\\n    } else {\\n        RECURSIVE_WARP(p, angleControl, amountControl, 4);\\n    }\\n    return p;\\n}\\n\\nvec3 getColor(vec2 coord, NoiseSettings source, NoiseSettings angle, NoiseSettings amount) {\\n    vec2 p = recursiveWarp(coord, angle, amount);\\n\\n    float e = noiseSupplier(angle, vec3(p.xy, 0));\\n\\n    float a = noiseSupplier(amount, vec3(p.xy, 0));\\n\\n    float v = noiseSupplier(source, vec3(p.xy, 0));\\n\\n    /*vec2 pack = vec2(1.0 * v, 255.0 * v);\\n    pack = fract(pack);\\n    pack -= pack.yy * vec2(1.0 / 255.0, 0.0);*/\\n\\n    //return vec3(e, a, pack.xy);\\n    return vec3(v, a, e);\\n}\\n\\nvoid main()\\n{\\n    float proportions = viewport.y / viewport.x;\\n    vec2 center = vec2(0.5, 0.5 * proportions);\\n    vec2 pos = vec2(\\n        gl_FragCoord.x / viewport.x, \\n       (gl_FragCoord.y / viewport.y) * proportions\\n    );\\n\\n    pos -= center;\\n    pos *= scale;\\n    pos += center;\\n    pos += position;\\n\\n    vec3 color = getColor(pos, source, angleControl, amountControl);\\n    gl_FragColor = vec4(color, 1.0);\\n}\\n\";","export default \"#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\n/////////////\\n// IMPORTS //\\n/////////////\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n///////////////////\\n// COLOR CONTROL //\\n///////////////////\\nint ADD = 0;\\nint MULT = 1;\\n\\nstruct ComponentController {\\n    bool mult;\\n    float source;\\n    float angle;\\n    float amount;\\n};\\n\\nstruct ColorBalance {\\n    float hue;\\n    float saturation;\\n    float brightness;\\n\\n    float red;\\n    float green;\\n    float blue;\\n};\\n\\nuniform float power;\\nuniform ColorBalance general;\\n\\nuniform ComponentController hueController;\\nuniform ComponentController saturationController;\\nuniform ComponentController brightnessController;\\n\\n///////////////\\n// DITHERING //\\n///////////////\\nuniform float ditheringAmount;\\nuniform bool hasDitheringTexture;\\nuniform highp sampler2D ditheringTexture;\\nuniform vec2  ditheringTextureDimensions;\\n\\n//////////////////\\n// MAIN TEXTURE //\\n//////////////////\\nvarying vec2 texCoord;\\nuniform highp sampler2D texture;\\n\\n//////////\\n// MISC //\\n//////////\\nuniform float time;\\nuniform vec2 viewport;\\nuniform bool multisampling;\\n\\n///////////////////\\n// COLOR CONTROL //\\n///////////////////\\n\\n// Returns a single color component\\nfloat getComponent(vec4 data, ComponentController controller) {\\n    float result;\\n    if(controller.mult) {\\n        result = pow(data.x, controller.source) *\\n                 pow(data.y, controller.angle)  *\\n                 pow(data.z, controller.amount);\\n    } else {\\n        float divider = max(1.0, controller.source + controller.angle + controller.amount);\\n        result = (data.x * controller.source +\\n                  data.y * controller.angle  +\\n                  data.z * controller.amount) /\\n                  divider;\\n    }\\n    return max(0.0, min(result, 1.0));\\n}\\n\\nvec3 dither(vec3 value) {\\n    if(hasDitheringTexture) {\\n        vec2 ditheringCoord = gl_FragCoord.xy / ditheringTextureDimensions + vec2(fract(time * 13.41), fract(time * 3.451));\\n        vec3 ditherValue = texture2D(ditheringTexture, ditheringCoord).rgb;\\n\\n        ditherValue = ditherValue * 2.0 - 1.0;\\n        ditherValue = sign(ditherValue) * (1.0 - sqrt(1.0 - abs(ditherValue)));\\n\\n        value += ditheringAmount * ditherValue;\\n    }\\n    return value;\\n}\\n\\n// Converts from linear color space to SRGB\\nvec3 linearToSRGB(vec3 linearRGB){\\n    float limit = 0.0031308;\\n    if(linearRGB.r < limit && linearRGB.g < limit && linearRGB.b < limit) {\\n        return 12.92 * linearRGB;\\n    } else {\\n        return 1.055 * \\n            vec3(pow(linearRGB.r, 1.0 / 2.4) - 0.055,\\n                 pow(linearRGB.g, 1.0 / 2.4) - 0.055,\\n                 pow(linearRGB.b, 1.0 / 2.4) - 0.055);\\n    }\\n}\\n\\n// Converts from sRGB to linear color space\\nvec3 sRGBToLinear(vec3 sRGB) {\\n    float limit = 0.04045;\\n    if(sRGB.r < limit && sRGB.g < limit && sRGB.b < limit) {\\n        return sRGB / 12.92;\\n    } else {\\n        return vec3(\\n            pow(sRGB.r * (1.0 / 1.055) + 0.055 / 1.055, 2.4),\\n            pow(sRGB.g * (1.0 / 1.055) + 0.055 / 1.055, 2.4),\\n            pow(sRGB.b * (1.0 / 1.055) + 0.055 / 1.055, 2.4)\\n        );\\n    }\\n}\\n\\n// Returns the resulting color using the data from the previous render pass\\nvec3 getColor(vec4 data) {\\n    float h = getComponent(data, hueController);\\n    if(h > 1.0) h = fract(h);\\n    else if(h < 1.0) h = 1.0 - fract(h);\\n\\n    float s = getComponent(data, saturationController);\\n    s = max(0.0, min(s, 1.0));\\n\\n    float b = getComponent(data, brightnessController);\\n    b = max(0.0, min(b, 1.0));\\n\\n    // Hue modifications\\n    h += general.hue;\\n\\n    // Bri modifications\\n    b = pow(b, power);\\n    b = b * general.brightness;\\n\\n    // Sat modifications\\n    s *= general.saturation;\\n\\n    vec3 color = hsv2rgb(vec3(h, s, b));\\n\\n    // RGB modifications\\n    color.r *= pow(general.red,   general.saturation);\\n    color.g *= pow(general.green, general.saturation);\\n    color.b *= pow(general.blue,  general.saturation);\\n\\n    // Dithering\\n    if(ditheringAmount > 0.0) {\\n        return sRGBToLinear(dither(linearToSRGB(color)));\\n    } else {\\n        return color;\\n    }\\n}\\n\\nvoid main()\\n{\\n    vec3 color;\\n    vec4 data;\\n\\n    if(!multisampling) {\\n        data = texture2D(texture, texCoord);\\n    } else {\\n        float xStep = 1.0 / viewport.x;\\n        float yStep = 1.0 / viewport.y;\\n\\n        float xOffset = 3.0 * xStep / 8.0;\\n        float yOffset = 3.0 * yStep / 8.0;\\n\\n        data =  texture2D(texture, texCoord + vec2(-xOffset, -yOffset / 2.0));\\n        data += texture2D(texture, texCoord + vec2(xOffset / 2.0, -yOffset));\\n        data += texture2D(texture, texCoord + vec2(-xOffset / 2.0, yOffset));\\n        data += texture2D(texture, texCoord + vec2(xOffset, yOffset / 2.0));\\n        data /= 4.0;\\n    }\\n\\n    color = getColor(data);\\n\\n    gl_FragColor = vec4(color, 1.0);\\n}\\n\";","const camelToTitle = (camelCase) => camelCase\n  .replace(/([A-Z])/g, (match) => ` ${match}`)\n  .replace(/^./, (match) => match.toUpperCase())\n  .trim();\n\nconst promptDownload = (dataURL, name) => {\n  var link = document.createElement('a');\n  link.href = dataURL;\n  link.download = name;\n  link.click();\n}\n\nconst downloadJSON = (jsonString, name) => {\n  var data = \"data:text/json;charset=utf-8,\" + encodeURIComponent(jsonString);\n  promptDownload(data, name);\n}\n\nconst isObject = (value) => {\n  return (typeof value === \"object\");\n}\n\nconst forEachProperty = (object, func) => {\n  return Object.entries(object).map(([prop, value], index) => (\n      func(prop, value, index)\n  ));\n};\n\nconst round = (value, precision) => {\n    return +value.toFixed(precision || 3);\n};\n\nexport { camelToTitle, isObject, forEachProperty, round, promptDownload, downloadJSON };","import React from 'react'\n\nimport './Arrow.css'\n\n// Simple css arrow. Can be rotated in four direction\nconst Arrow = ( { direction }) => {\n    return (\n        <div className=\"arrow-container\">\n            <div className={\"arrow arrow--\" + direction}></div>\n        </div>\n    )\n}\n\nexport default Arrow\n","export default __webpack_public_path__ + \"static/media/github.04be58c1.svg\";","export default __webpack_public_path__ + \"static/media/instagram.6ed2cb52.svg\";","export default __webpack_public_path__ + \"static/media/email.56058da1.svg\";","export default __webpack_public_path__ + \"static/media/blog.9376783d.svg\";","export default __webpack_public_path__ + \"static/media/repository.0dc86d09.png\";","import React, { useState, useEffect } from 'react'\n\nimport { camelToTitle } from '../tools/Utils'\nimport Arrow from '../components/indicator/arrow/Arrow'\n\nimport githubIcon from '../resources/icons/github.svg'\nimport instagramIcon from '../resources/icons/instagram.svg'\nimport emailIcon from '../resources/icons/email.svg'\nimport blogIcon from '../resources/icons/blog.svg'\nimport repositoryIcon from '../resources/icons/repository.png'\n\nimport './HelpPage.css'\n\nconst githubLink = \"https://github.com/palmdrop\";\nconst repositoryLink = \"https://github.com/palmdrop/surfaces\";\nconst instagramLink = \"https://www.instagram.com/palmdrop/\"; \nconst blogLink = \"https://palmdrop.github.io/\"; \nconst emailLink = \"mailto:anton@exlex.se\"; \n\nconst descriptions=[{\n        title: \"A Recursive Domain Warping Controller\",\n        content: (\n            <div>\n            <p>\n                Any image can be seen as a function of space. The input is a pixel location, an XY-coordinate, and the\n                output is a pixel color. The width and height of the image are the domain. By warping the domain, we alter\n                the space itself. Sampling a particular XY-coordinate will now (likely) result in a different output color \n                than before. This is called domain warping.\n            </p>\n            <p>\n                This technique is commonly used for texture generation, visual effects, or generative art. This application\n                makes the technique not only accessible, but fast (using GLSL shaders) and easy to try out different configurations\n                with. \n            </p>\n            <p>\n                To properly understand everything at work here, I suggest reading Inigo \n                Quilez <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.iquilezles.org/www/articles/warp/warp.htm\">blog post</a> on the topic, \n                or my own <a target=\"_blank\" rel=\"noreferrer\" href=\"https://palmdrop.site/nodes/domain-warping\">blog post</a>, \n                where I discuss the specific variant of this technique used on this page. I also suggest reading \n                about <a target=\"_blank\" rel=\"noreferrer\" href=\"https://en.wikipedia.org/wiki/Simplex_noise\">Simplex Noise</a>, which is used\n                as an underlying function of space for both the source function and the functions that alter its domain. \n            </p>\n            <p>\n                There's a lot of settings available to you. They might be overwhelming or incomprehensible. The best way to learn what they \n                do is to study the links from the previous paragraph, or just play around with them. If you want more information about what\n                the obscure sliders actually do, press the \"Show Tooltips\" button in the upper right corner. Some information about each slider \n                or button will be displayed when you hover the mouse over it. \n            </p>\n            <p>\n                In the top bar, there are buttons for saving a frame, for exporting or importing the current settings, among other things.\n                Feel free to post your creations anywhere you like. But do provide a link to this site if you do. Please note that this application\n                works best on modern browsers with support for WebGL2.\n            </p>\n            <p>\n                There also exist a 3D mode, where the texture is converted to a 3D height map. See more information below.\n            </p>\n            </div>\n        )\n    }, \n    {\n        title: \"Texture\",\n        content: (\n            <div>\n            <p>\n                The <i>texture controller</i> changes the characteristics of the underlying noise functions, as well as the warp effect itself. \n                The <i>warp amount</i> controls the strength of the effect. The <i>iterations</i> is the number of times the warp is applied. The <i>source</i>\n                is the noise function whos domain is sampled. The <i>angle controller</i> controls the angle of the warp effect, across space, and the\n                <i>amount controller</i> controls the strength of the warp effect. Each layer has sliders for controlling fractal noise settings (layers of noise). \n            </p>  \n            <p>\n                I suggest reading <a target=\"_blank\" rel=\"noreferrer\" href=\"https://palmdrop.site/nodes/modified-noise\">this post</a>. \n                It also covers some of the <i>modifications</i> available.\n            </p>\n            </div>\n        )\n    },\n    {\n        title: \"Color\",\n        content: (\n            <div>\n            <p>\n                The <i>color controller</i> gives precise control over the colors. There are\n                some (hopefully) self-explanatory <i>general</i> sliders, but also more specific controllers for hue, saturation and brightness. Each of \n                these sub-controllers allows you to choose which layers (source, angle, and amount) will influence that part of the color. \n                For example, you might want the source layer to increase brightness, while the angle layer decreases it.\n            </p>\n            <p>\n                As a side effect, this might make the <i>source</i> layer have varying influence over the final color. Do not be surprised if altering\n                the <i>source</i> settings in the <i>texture</i> category does not change the results much. This is likely due to your <i>color</i> settings.\n            </p>\n            </div>\n        )\n    },\n    {\n        title: \"Render\",\n        content: (\n            <div>\n            <p>\n                The <i>render controller</i> gives you the ability to change resolution, control dithering, and multisampling.\n                There's also an option to record the animation. Unfortunately, there's not yet support for converting the recorded\n                frames into a video. Instead, you'll receive a zipped archive of PNG images. \n            </p>\n            </div>\n        )\n    },\n    {\n        title: \"3D\",\n        content: (\n            <div>\n            <p>\n                The <i>3D controller</i> controls the 3D mode of the application. The 3D mode displays the domain warp texture as \n                a 3D height map that is lit by a set of lights. The material of the height map can be modified using a set of sliders,\n                as well as the height of the peaks, the lighting and the background fog.\n            </p>\n            </div>\n        )\n    }\n];\n\nconst contact=[{\n        title: \"Development\",\n        entries: [\n            { \n            link: githubLink,\n            location: \"Github\", \n            icon: githubIcon,\n            description: \"where I store my projects and configuration files\"},\n            { \n            link: repositoryLink,\n            location: \"Repository\", \n            icon: repositoryIcon,\n            description: \"where you can find the source code for this app\"\n            }\n        ]\n    },\n    {\n        title: \"Social Media\",\n        entries: [\n            { \n            link: instagramLink,\n            location: \"Instagram\", \n            icon: instagramIcon,\n            description: \"where I post generative art and experiments\"},\n            { \n            link: blogLink,\n            location: \"Blog\", \n            icon: blogIcon,\n            description: \"where I (occassionally) document my techniques\"\n            }\n        ]\n    },\n    {\n        title: \"Contact\",\n        entries: [\n            { \n            link: emailLink,\n            location: \"Email\", \n            icon: emailIcon,\n            description: \"with which you can reach me if you have questions\"},\n        ]\n    }\n];\n\n\n// Help popup to display descriptions, keyboard shortcuts, contact/links and so on\nconst HelpPage = ({mainTitle, shortcuts, visibility, page, onCloseCallback}) => {\n    // The current visible stage\n    const [currentPage, setCurrentPage] = useState(0);\n    const max = 2; \n\n    useEffect(() => {\n        if(page) setCurrentPage(page);\n    }, [page]);\n\n    const handleClose = (e) => {\n        onCloseCallback(e);\n    };\n\n    // Switch page in a specified direction \n    const handleContentSwitch = (direction) => {\n        setCurrentPage(Math.max(Math.min(currentPage + direction, max), 0));\n    };\n\n    // Returns the page for all the keyboard shortcuts\n    const getShortcuts = () => {\n        // Creates a single shortcut (key/command) entry\n        const getShortcutEntry = (shortcut) => {\n            // Formats a single key\n            const formatKey = (key) => {\n                switch(key) {\n                    case ' ': return \"Space\";\n                    case '-': return \"Minus\";\n                    case '+': return \"Plus\";\n                    default: return camelToTitle(key);\n                }\n            };\n\n            // Holds all the formatted keys (there can be multiple keys for a single command)\n            var keys = \"\";\n\n            // If multiple keys are linkde to a single command, separate with \"/\"\n            if(Array.isArray(shortcut.keys)) {\n                keys = shortcut.keys.reduce((acc, v) => formatKey(acc) + \" / \" + formatKey(v))\n            } else {\n            // Otherwise, just format the single key\n                keys = formatKey(shortcut.keys);\n            }\n\n            // Return entire key/command entry\n            return (\n                <div className=\"shortcut-entry\">\n                    <div className=\"shortcut-entry__keys\">\n                        {keys}\n                    </div>\n                    <div className=\"shortcut-entry__description\">\n                        {shortcut.description}\n                    </div>\n                </div>\n            );\n        };\n\n        // Creates all content of the shortcuts page\n        return (\n            <div className=\"help-page__content__shortcuts\">\n                <h2 className=\"title\">Keyboard shortcuts</h2>\n                {/* Add column indicators */}\n                <div className=\"shortcut__columns\">\n                    <div className=\"shortcut_columns__key\">Key</div>\n                    <div className=\"shortcut_columns__description\">Functionality</div>\n                </div>\n                {\n                    // Iterate  over all shortcuts...\n                    shortcuts.map((shortcut, index) => (\n                        <div key={index}>{getShortcutEntry(shortcut)}</div>\n                    ))\n                }\n            </div>\n        )\n    };\n\n    // Returns all the descriptions with titles and content\n    const getDescriptions = () => {\n        // Creates a single description entry\n        const getDescriptionEntry = (description, index) => {\n            return (\n                <div \n                    className=\"descriptions-entry\"\n                    key={index}\n                >\n                    <h3 className=\"descriptions-entry__title\">\n                        {description.title}\n                    </h3>\n                    <div className=\"description-entry__content\">\n                        {description.content}\n                    </div>\n                </div>\n            )\n        };\n\n        // Returns entire content of descriptions page\n        return (\n            <div\n                className=\"help-page__content__descriptions\"\n            >\n                <h2 className=\"title\">{mainTitle}</h2>\n                {\n                    // Iterate over all descriptions...\n                    descriptions.map((description, index) => (\n                        getDescriptionEntry(description, index)\n                    ))\n                }\n            </div>\n        )\n    };\n\n    // Returns all contact information and links, etc\n    const getContact = () => {\n        // Creates a category of links\n        const createCategory = (category, index) => {\n            // Creates a single link entry\n            const createEntry = (entry, subindex) => {\n                return (\n                    <div\n                        className=\"contact-category__entry\"\n                        key={index + \".\" + subindex}\n                    >\n                        <div className=\"contact-category__entry__location\">\n                            <a \n                                className=\"contact-category__entry__link\"\n                                href={entry.link}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                {entry.icon ? <img className=\"icon\" src={entry.icon} alt=\"\" /> : null} \n                                <div className=\"contact-category__entry__link__text\">\n                                    {entry.location}\n                                </div>\n                            </a>\n                        </div>\n                        <div className=\"contact-category__entry__description\">\n                            {entry.description}\n                        </div>\n                    </div>\n                );\n            };\n\n            // Returns all links for a specific entry\n            return (\n                <div \n                    key={index}\n                    className=\"contact-category\"\n                >\n                    <h4 className=\"contact-category__title\">{category.title}</h4>\n                    {\n                        // Iterate over all category entries...\n                        category.entries.map((entry, index) => {\n                            return createEntry(entry, index)\n                        })\n                    }\n                </div>\n            );\n        } \n\n        // Returns entire contect of contact page\n        return (\n            <div className=\"help-page__content__contact\"\n            >\n                <h2 className=\"title\">Contact and Links</h2>\n                {\n                    // Iterate over all categories...\n                    contact.map((category, index) => {\n                        return createCategory(category, index)\n                    })\n                }\n            </div>\n        )\n    }\n\n    // Returns the content of the currently viewed page\n    const getContent = () => {\n        switch (currentPage) {\n            case 0: return getDescriptions();\n            case 1: return getShortcuts();\n            case 2: return getContact();\n            default: return null;\n        }\n    };\n\n    // The entire help page modal\n    return (\n        <div \n            className={\"help-page\" \n                + (visibility ? \" help-page--visible\" : \"\")}\n        >\n            { /* Close button */ }\n            <button \n                className=\"help-page__close-button\" \n                onClick={handleClose}\n            />\n\n            { /* The current content */}\n            <div className=\"help-page__content\">\n                {getContent()}\n            </div>\n\n            { /* Bottom navigation buttons for switching page */ }\n            <nav className=\"help-page__buttons\">\n                {/* Previous button */ }\n                <button \n                    className={\n                        \"help-page__buttons__button help-page__buttons__previous\"\n                        + (currentPage === 0 ? \" help-page__buttons__disabled\" : \"\")\n                    }\n                    onClick={() => handleContentSwitch(-1)}\n                >\n                    <Arrow direction={\"left\"} />\n                    <Arrow direction={\"left\"} />\n                    <Arrow direction={\"left\"} />\n                   {/* <span>Previous</span>*/}\n                </button>\n\n                {/* Page indicator */ }\n                <div className=\"help-page__side-number\">{(currentPage + 1)}/3</div>\n\n                {/* Next button */ }\n                <button \n                    className={\n                        \"help-page__buttons__button help-page__buttons__next\"\n                        + (currentPage === max ? \" help-page__buttons__disabled\" : \"\")\n                    }\n                    onClick={() => handleContentSwitch(+1)}\n                >\n                    <Arrow direction={\"right\"} />\n                    <Arrow direction={\"right\"} />\n                    <Arrow direction={\"right\"} />\n                </button>\n            </nav>\n        </div>\n    )\n}\n\nexport default HelpPage\n","import { useContext, useState, useRef, createContext } from 'react'\n\nconst ControlPanelContext = createContext();\nconst ControlPanelUpdateContext = createContext(); \n\nconst SetHoverCallbackContext = createContext();\nconst UpdateHoverContext = createContext();\n\nexport const useControlPanelContext = () => {\n    return useContext(ControlPanelContext);\n}\n\nexport const useControlPanelUpdateContext = () => {\n    return useContext(ControlPanelUpdateContext);\n}\n\nexport const useSetHoverCallbackContext = () => {\n    return useContext(SetHoverCallbackContext);\n}\n\nexport const useUpdateHoverContext = () => {\n    return useContext(UpdateHoverContext);\n}\n\n// Context for control panel\n// Keeps track of active categories, category data, and hover locations\nexport const ControlPanelContextProvider = ({ children }) => {\n    const [activeCategory, setActiveCategory] = useState(null);\n    const [categoryData, setCategoryData] = useState(null);\n    const callback = useRef(null);\n\n    const updateHoverLocation = (hoverLocation, description) => {\n        callback.current && callback.current(hoverLocation, description);\n    };\n\n    const updateActiveCategory = (category, data) => {\n        setActiveCategory(category);\n        setCategoryData(data);\n    };\n\n    const setHoverCallback = (cb) => {\n        //setCallback({callback});\n        callback.current = cb;\n    };\n\n    return (\n        <ControlPanelContext.Provider value={[activeCategory, categoryData]}>\n            <ControlPanelUpdateContext.Provider value={[updateActiveCategory]}>\n                <SetHoverCallbackContext.Provider value={setHoverCallback}>\n                    <UpdateHoverContext.Provider value={updateHoverLocation}>\n                        {children}\n                    </UpdateHoverContext.Provider>\n                </SetHoverCallbackContext.Provider>\n            </ControlPanelUpdateContext.Provider>\n        </ControlPanelContext.Provider>\n    );\n}\n","\nimport React from 'react'\nimport { useControlPanelContext, useControlPanelUpdateContext, useUpdateHoverContext } from '../../../context/ControlPanelContext';\n\nimport { forEachProperty, camelToTitle } from '../../../tools/Utils'\n\nimport './CategoryBar.css'\n\n// Bar for selecting category of settings\nconst CategoryBar = ( { categories } ) => {\n    const [activeCategory, ] = useControlPanelContext();\n    const [updateActiveCategory] = useControlPanelUpdateContext();\n    const updateHoverLocation = useUpdateHoverContext();\n\n    const handleClick = (e, category, data) => {\n        if(e) e.currentTarget.blur();\n        if(activeCategory === category) updateActiveCategory(null, null);\n        else updateActiveCategory(category, categories[category]);\n\n        data.onClickCallback && data.onClickCallback(activeCategory === category);\n    };\n\n\n    return (\n        <div className=\"category-bar\">\n        {\n            // Will create a button for each category \n            forEachProperty(categories, (category, data, index) => (\n                <div \n                    key={category + \".\" + index}\n                    className={\"category-bar__category-container\" \n                    + (category === activeCategory ? \" category-bar__category-container--active\" : \"\")}\n                    onClick={(e) => handleClick(e, category, data)}\n                    onMouseOver={() => updateHoverLocation(category, data.description)}\n                >\n                    <div \n                        className={\"category-bar__category\"\n                        + (category === activeCategory ? \" category-bar__category--active\" : \"\")}\n                    >\n                        {data.name || camelToTitle(category)}\n                    </div>\n                </div>\n            ))\n        }\n        </div>\n    )\n}\n\nexport default CategoryBar\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Slider } from '@material-ui/core';\nimport { round } from '../../../tools/Utils'\nimport './InputSlider.css';\n\nconst InputSlider = ({ label, valueGetter, defaultValue, onChange, min, max, step, marks, precision, fullName }) => {\n    const ref = useRef();\n\n    // Internal state to keep track of the value\n    // This is required if the value getter method does not return a state, \n    // but some other reference that might not trigger a use effect hook\n    const [state, setState] = useState(round(valueGetter()));\n\n    // Effect for updating the state of the slider on re-render\n    // This ensures that the slider will be updated if the value changes\n    // externally.\n    useEffect(() => {\n        setState(round(valueGetter()));\n    }, [valueGetter]);\n\n    // Only update the value if it's actually different\n    // This avoids unnecessary useEffect triggers in parent classes\n    const handleChange = (v) => {\n        if(v !== valueGetter()) {\n            setState(round(v));\n            onChange(v);\n        }\n    };\n\n    // Updates the value of the slider on user scroll\n    const handleScroll = (event) => {\n        // Prevent the page from scrolling\n        event.preventDefault();\n\n        // Calculate the value change\n        const delta = -Math.sign(event.deltaY) * step;\n        var v = valueGetter() + delta;\n\n        // Constrain the value \n        v = Math.min(Math.max(v, min), max);\n\n        // And make sure the value lands on possible marks\n        if(marks) {\n            v = marks.reduce((a, b) => {\n                return Math.abs(b - v) < Math.abs(a - v) ? b : a;\n            });\n        }\n\n        handleChange(v);\n    };\n\n    // Resets the slider value to the default\n    const handleDoubleClick = (event) => {\n        handleChange(defaultValue);\n    };\n\n    // Registers listener for scroll events\n    useEffect(() => {\n        const refCopy = ref.current;\n\n        refCopy.addEventListener(\"wheel\", handleScroll);\n        refCopy.addEventListener(\"dblclick\", handleDoubleClick);\n\n        return () => {\n            refCopy.removeEventListener(\"wheel\", handleScroll);\n            refCopy.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n    });\n\n    return (\n        <div \n            className=\"input-slider\"\n        > \n            <div className=\"input-slider__header\">\n                <h3 className=\"input-slider__label\">{label}</h3>\n                <div className=\"input-slider__value\">{state}</div>\n            </div>\n            <Slider className=\"input-slider__slider\"\n                key={fullName + \"__slider\"}\n                value={state}\n                onChange={(e, v) => handleChange(v)}\n                min={min}\n                max={max}\n                step={step}\n                marks={marks}\n                ref={ref}\n            />\n        </div>\n    )\n}\n\nexport default InputSlider\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Switch } from '@material-ui/core';\nimport './InputSwitch.css';\n\nconst InputSlider = ({ label, valueGetter, onChange, fullName }) => {\n    const ref = useRef();\n\n    // Internal state to keep track of the value\n    // This is required if the value getter method does not return a state, \n    // but some other reference that might not trigger a use effect hook\n    const [state, setState] = useState(valueGetter());\n\n    // Effect for updating the state of the switch on re-render\n    // This ensures that the switch will be updated if the value changes\n    // externally.\n    useEffect(() => {\n        setState(valueGetter());\n    }, [valueGetter]);\n\n    // Only update the value if it's actually different\n    // This avoids unnecessary useEffect triggers in parent classes\n    const handleChange = (e) => {\n        if(!e.target) return;\n        const v = e.target.checked;\n        if(v !== valueGetter()) {\n            setState(v);\n            onChange(v);\n            e.target.blur();\n        }\n    };\n\n    return (\n        <div \n            className={\"input-switch\" + (state ? \" input-switch--active\" : \"\")}\n            ref={ref}\n        > \n            <h3 className=\"input-switch__label\">{label}</h3>\n            <Switch \n                className={\"input-switch__switch\" + (state ? \" input-switch__switch--active\" : \"\")}\n                key={fullName}\n                name={fullName}\n                checked={state ? true : false}\n                onChange={handleChange}\n                size={\"small\"}\n                color={\"primary\"}\n            />\n        </div>\n    )\n}\n\nexport default InputSlider\n","import React, { useState, useEffect } from 'react'\n\nimport { HexColorPicker } from 'react-colorful'\n\nimport './InputColor.css'\n\nconst InputColor = ({ label, valueGetter, onChange, fullName }) => {\n    // Internal color state\n    // Required to ensure component update on change\n    const [color, setColor] = useState(valueGetter());\n\n    // Effect that ensures the state is updated on re-render\n    useEffect(() => {\n        setColor(valueGetter());\n    }, [valueGetter]);\n\n    // Only update if the color has actually changed\n    const handleChange = (newColor) => {\n        if(newColor !== valueGetter()) {\n            setColor(newColor);\n            onChange(newColor);\n        }\n    };\n\n    return (\n        <div className=\"input-color\">\n            <label className=\"input-color__label\">{label}</label>\n            <HexColorPicker \n                className=\"input-color__color-picker\"\n                key={fullName}\n                color={color} \n                onChange={handleChange} \n            />\n        </div>\n    )\n}\n\nexport default InputColor;\n","import React, { useEffect, useState } from 'react'\n\nimport InputSlider from './slider/InputSlider'\nimport InputSwitch from './switch/InputSwitch'\nimport InputColor from './color/InputColor'\nimport { camelToTitle } from '../../tools/Utils'\n\nimport './Input.css'\nimport WAC from '../../controllers/warp/WarpAppController'\n\n// Takes input data from the user\n// At this point, this is either in the form of a slider or a switch\nconst Input = ({ categoryData, attribute, fullName, precision }) => {\n    const [refresh, forceRefresh] = useState(false);\n\n    // Effect for setting an update callback\n    // This enables us to update ONLY This input component when \n    // the corresponding attribute of the warp controller changes, \n    // instead of re-rendering the entire control panel\n    useEffect(() => {\n        WAC.setUpdateCallback(categoryData.controller, fullName, () => {\n            forceRefresh(!refresh);\n        });\n    }, [refresh, categoryData.controller, fullName])\n\n\n    const getter = categoryData.getter;\n    const setter = categoryData.setter;\n    const defaults = categoryData.default;\n\n    // Sets up a single slider \n    const createSlider = (attribute, name, fullName) => {\n        return (<InputSlider\n            key={fullName}\n            label={camelToTitle(name)}\n            valueGetter={() => getter(fullName)}\n            defaultValue={defaults(fullName)}\n            onChange={(v) => setter(fullName, v)}\n            min={attribute.min}\n            max={attribute.max}\n            step={\n                // If the attribute has a step property, use that\n                attribute.hasOwnProperty(\"step\") ? attribute.step :\n                // Otherwise, check if the attribute is of integer type\n                // If yes, set step to \"1\", otherwise calculate a small step based on \n                // the min and max values\n                (attribute.type === \"1i\" ? 1 : (attribute.max - attribute.min) / 100)\n            }\n            marks={attribute.marks}\n            precision={precision}\n            fullName={fullName}\n        />)\n    };\n\n    // Sets up a single switch\n    const createSwitch = (name, fullName) => {\n        return (\n            <InputSwitch \n                key={fullName}\n                label={camelToTitle(name)} \n                valueGetter={() => getter(fullName)}\n                onChange={(v) => setter(fullName, v)}\n                fullName={fullName}\n            />\n        )\n    };\n\n    const createColorPicker = (name, fullName) => {\n        return (\n            <InputColor \n                key={fullName}\n                label={camelToTitle(name)}\n                valueGetter={() => getter(fullName)}\n                onChange={(v) => setter(fullName, v)}\n                fullName={fullName}\n            />\n        );\n    };\n\n    const createInputEntry = () => {\n        var name = fullName.split(categoryData.separator);\n        name = name[name.length - 1];\n\n        if(attribute.type === 'color') {\n            return createColorPicker(name, fullName);\n        } else if(attribute.min === 0.0 && attribute.max === 1.0 && ((\n            attribute.step && attribute.step === 1.0) || attribute.type === \"1i\")) {\n            return createSwitch(name, fullName);\n        // Otherwise, create a slider\n        } else {\n            return createSlider(attribute, name, fullName);\n        }\n    };\n\n\n    return (\n        <div className=\"input-container\">\n            {createInputEntry()}\n        </div>\n    )\n}\n\nexport default Input\n","\nimport Input from '../../../components/input/Input'\nimport React, { useState } from 'react'\nimport { camelToTitle, forEachProperty, isObject } from '../../../tools/Utils';\n\nimport './InputDropdown.css'\nimport Arrow from '../../indicator/arrow/Arrow';\nimport { useUpdateHoverContext } from '../../../context/ControlPanelContext';\n\n// Dropdown menu containing various settings\nconst InputDropdown = ( { categoryData, attribute, name, parentName, precision } ) => {\n    const [expanded, setExpanded] = useState(false);\n    const updateHoverLocation = useUpdateHoverContext();\n\n    const handleClick = (e) => {\n        if(e) e.target.blur();\n        setExpanded(!expanded);\n    };\n\n    const getClasses = (baseClass) => {\n        return baseClass \n             + (expanded ? (\" \" + baseClass + \"--expanded\") : \"\");\n    }\n\n    // Creates a section of settings\n    // If subsections exist, they will be created recursively (as another section, not another dropdown)\n    const createSection = (attribute, name, parentName, root) => {\n        return (\n            <div \n                className={\"input-dropdown__section\" + (root ? \"\" : \"-sub\")}\n                key={parentName} \n            >\n                {!root \n                 ? <h4 \n                        className=\"input-dropdown__section__title\"\n                        onMouseOver={() => updateHoverLocation(categoryData.controller + \".\" + parentName, attribute.description)}\n                   >\n                       {camelToTitle(name)}\n                   </h4>\n                 : \"\"}\n                {forEachProperty(attribute.value, (name, child) => {\n                    const fullName = (parentName ? (parentName + categoryData.separator) : \"\") + name;\n\n                    if(isObject(child.value)) {\n                        return createSection(child, name, fullName, false);\n                    }\n\n                    return (\n                        <div \n                            className=\"input-dropdown__section__entry\" \n                            key={fullName}\n                            onMouseOver={() => updateHoverLocation(categoryData.controller + \".\" + fullName, child.description)}\n                        >\n                            <Input\n                                categoryData={categoryData}\n                                attribute={child}\n                                fullName={fullName}\n                                precision={precision}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        );\n    };\n\n    return (\n        <div className={getClasses(\"input-dropdown-container\")}>\n            <div \n                className={getClasses(\"input-dropdown-header\")}\n                onClick={handleClick}\n                onMouseOver={() => updateHoverLocation(categoryData.controller + \".\" + name, attribute.description)}\n            >\n                <h3 className={getClasses(\"input-dropdown-title\")}>\n                    {camelToTitle(name)}\n                </h3>\n                <Arrow direction={expanded ? \"up\" : \"down\"} />\n            </div>\n            <div className={getClasses(\"input-dropdown-content\")}>\n                {createSection(attribute, null, parentName, true)}\n            </div>\n        </div>\n    )\n}\n\nexport default InputDropdown\n","\nimport React from 'react'\nimport { useControlPanelContext, useUpdateHoverContext } from '../../../context/ControlPanelContext'\nimport { forEachProperty, isObject } from '../../../tools/Utils'\n\nimport Input from '../../input/Input'\n\nimport './CategorySettings.css'\nimport InputDropdown from '../dropdown/InputDropdown'\n\n// Settings for a specific category\nconst CategorySettings = ( { name, data }) => {\n    const [activeCategory, ] = useControlPanelContext();\n    const updateHoverLocation = useUpdateHoverContext();\n    const precision = 3;\n\n    // Main settings are settings at root level, i.e no dropdown will be created\n    const createMainSettings = () => {\n        return (\n            <div className=\"category-settings__main-container\">\n                <div className=\"category-settings__main-entries\">\n                    {forEachProperty(data.attributes, (name, attribute, index) => {\n                        return isObject(attribute.value) ? null : (\n                        <div key={index}\n                            className=\"category-settings__main-entry\"\n                            onMouseOver={() => updateHoverLocation(data.controller + \".\" + name, attribute.description)}\n                        >\n                            <Input\n                                categoryData={data}\n                                attribute={attribute}\n                                fullName={name}\n                                precision={precision}\n                            />\n                        </div>\n                    )})}\n                </div>\n            </div>\n        )\n    };\n\n    // Secondarty settings have child elements, and hence a dropdown will be created\n    const createSecondarySettings = () => {\n        return forEachProperty(data.attributes, (name, attribute, index) => {\n            if (isObject(attribute.value)) {\n                return (\n                    <div \n                        className=\"category-settings__secondary-container\"\n                        key={index}\n                    >\n                        <InputDropdown \n                            categoryData={data}\n                            attribute={attribute}\n                            name={name}\n                            parentName={name}\n                            precision={precision}\n                        />\n                    </div>\n                )\n            }\n        });\n    };\n\n\n    return (\n        <div className={\"category-settings\" + (name === activeCategory ? \" category-settings--active\" : \"\")}>\n            {data.before}\n            {createMainSettings()}\n            {createSecondarySettings()}\n            {data.after}\n        </div>\n    )\n}\n\nexport default CategorySettings","import React from 'react'\n\nimport './Topbar.css'\n\n// Simple top bar, places children to the left, center or the right\nconst Topbar = ({ left, center, right }) => {\n    return (\n        <nav className=\"topbar\">\n            <nav className=\"left-container\">\n                {left}\n            </nav>\n            <nav className=\"center-container\">\n                {center}\n            </nav>\n            <nav className=\"right-container\">\n                {right}\n            </nav>\n        </nav>\n    )\n}\n\nexport default Topbar\n","import React, { useState, useEffect } from 'react'\nimport { useSetHoverCallbackContext } from '../../../context/ControlPanelContext'\nimport { camelToTitle } from '../../../tools/Utils'\n\nimport './Tooltip.css'\n\n// A small dialog displaying information\n// Is updated based on mouse hover location\nconst Tooltip = () => {\n    const setHoverCallback = useSetHoverCallbackContext();\n    const [hoverLocation, setHoverLocation] = useState(null);\n    const [description, setDescription] = useState(null);\n\n    useEffect(() => {\n        // Callback used to update tooltip\n        setHoverCallback(\n            (location, description) => {\n                setHoverLocation(location);  // Title\n                setDescription(description); // Content\n            }\n        );\n    });\n\n    // If no hover location, render nothing\n    if(!hoverLocation) return null;\n\n    // Format title\n    const createTitle = (hoverLocation) => {\n        const lastIndex = hoverLocation.lastIndexOf('.');\n        if(lastIndex === -1) return camelToTitle(hoverLocation);\n        return camelToTitle(hoverLocation.substr(lastIndex + 1));\n    };\n\n    return (\n        \n        <div className=\"tooltip-container\">\n            <h3 className=\"tooltip__title\">{createTitle(hoverLocation)}</h3>\n            <div className=\"tooltip__content\">\n                {description}\n            </div>\n        </div>\n    )\n}\n\nexport default Tooltip\n","\nimport React from 'react'\n\nimport CategoryBar from './sidebar/CategoryBar'\nimport CategorySettings from './settings/CategorySettings'\nimport Topbar from './topbar/Topbar'\nimport Tooltip from '../data/tooltip/Tooltip'\n\nimport { ControlPanelContextProvider } from '../../context/ControlPanelContext'\nimport { forEachProperty } from '../../tools/Utils'\n\nimport './ControlPanel.css'\n\n// Panel for displaying entire user interface\nconst ControlPanel = ( {categories, topbar, showTooltip } ) => {\n    return (\n        <div className=\"control-panel\">\n            {/* Top bar */}\n            <ControlPanelContextProvider>\n                <Topbar \n                    left={topbar.left}\n                    center={topbar.center}\n                    right={topbar.right}\n                />\n                {/* Sidebar */}\n                <CategoryBar categories={categories} />\n                {\n                    forEachProperty(categories, (name, data, index) => (\n                        /* Settings */\n                        <CategorySettings\n                            key={name + \".\" + index}\n                            name={name}\n                            data={data}\n                        />\n                    ))\n                }\n                { // Tooltip\n                showTooltip \n                    ? <Tooltip />\n                    : null\n                }\n            </ControlPanelContextProvider>\n        </div>\n    )\n}\n\nexport default ControlPanel\n","\nimport React, { useState, useEffect } from 'react'\nimport { useUpdateHoverContext } from '../../../context/ControlPanelContext';\n\nimport './Button.css'\n\n// A smart button that can be used for toggleable functionality \n// or as a regular button\nconst Button = ( {name, activeName, hideName = false, onClick, blurOnClick = true, state, radius, description, children } ) => {\n    const [active, setActive] = useState(false);\n    const updateHoverLocation = useUpdateHoverContext();\n\n    useEffect(() => {\n        if(state !== null) {\n            setActive(state);\n        }\n    }, [state])\n\n    const getClasses = (baseClass) => {\n        return baseClass +\n            (active ? (\" \" + baseClass + \"--active\") : \"\");\n    };\n\n    const handleClick = (e) => {\n        if(e && blurOnClick) e.target.blur();\n\n        if(!activeName && (typeof state === \"undefined\")) {\n            onClick(e);\n            return;\n        }\n\n        const newState = !active; \n        setActive(newState);\n        onClick(e, newState);\n    };\n\n    return (\n        <div \n            className={getClasses(\"button-container\")}\n            onClick={handleClick}\n            onMouseOver={() => {\n                updateHoverLocation && updateHoverLocation(\"button.\" + name, description)\n            }}\n        >\n            <button \n                className={getClasses(\"button\")}\n                style={{ borderRadius: radius}}\n            >\n                {hideName ? null : (active ? activeName : name)}\n                {children}\n            </button>\n        </div>\n    )\n}\n\nexport default Button\n","import React, { useState, useEffect } from 'react'\n\nimport './DataEntry.css'\n\n// Displays a name and a corresponding value\n// Uses a callback system which allows this component\n// to be updated without the parent re-rendering\nconst DataEntry = ( { name, setterCallback, initial}) => {\n    const [value, setValue] = useState(initial);\n\n    useEffect(() => {\n        setterCallback(setValue);\n    }, [setterCallback])\n\n    return (\n        <div className=\"data-entry\">\n            <div className=\"data-entry__name\">\n                {name}:\n            </div>\n            <div className=\"data-entry__value\">\n                {value}\n            </div>\n        </div>\n    )\n}\n\nexport default DataEntry\n","import React from 'react'\n\nimport { camelToTitle, forEachProperty } from '../../../tools/Utils'\nimport DataEntry from '../entry/DataEntry'\n\nimport './DataPanel.css'\n\n// Simple panel for displaying related data\nconst DataPanel = ({ entries }) => {\n    return (\n        <div className=\"data-panel\">\n            {forEachProperty(entries, (name, value, index) => (\n                <div \n                    className=\"data-panel__entry-container\"\n                    key={index}\n                >\n                    <DataEntry\n                        name={camelToTitle(name)}\n                        initial={0}\n                        setterCallback={value.setterCallback}\n                    />\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default DataPanel\n","import React, { useRef, useState, useEffect, useLayoutEffect, useReducer } from 'react'\n\nimport WAC from './controllers/warp/WarpAppController'\n\nimport { downloadJSON, promptDownload } from './tools/Utils'\nimport { useKeyboardInput } from './hooks/KeyboardInputHook'\n\nimport './App.css';\nimport HelpPage from './pages/HelpPage'\nimport ControlPanel from './components/control/ControlPanel'\nimport Button from './components/input/button/Button';\nimport DataPanel from './components/data/panel/DataPanel';\n\n//import defaultSettings from './resources/settings/hearts.json'\n\nimport githubIcon from './resources/icons/github.svg'\nimport instagramIcon from './resources/icons/instagram.svg'\nimport emailIcon from './resources/icons/email.svg'\n\nconst repositoryLink = \"https://github.com/palmdrop/webgl-domain-warping-controller\";\nconst instagramLink = \"https://www.instagram.com/palmdrop/\"; \nconst emailLink = \"mailto:anton@exlex.se\"; \n\nconst App = (props) => {\n  ////////////////\n  // REFERENCES //\n  ////////////////\n  const canvasRef      = useRef(); // Reference to canvas for texture generation\n  const threeCanvasRef = useRef(); // Reference to canvas for 3D render mode\n  const fileInputRef   = useRef(); // The file input tag that is used to handle user file choosing\n\n  ////////////\n  // STATES //\n  ////////////\n  const [, refresh] = useReducer(x => x + 1, 0);\n\n  const [, setOnPressed, setOnHeld, executeHeldActions] = useKeyboardInput(); // Custom hook for handling keyboard input\n\n  const [paused, setPaused] = useState(false); // Pauses/unpauses the animation\n  const [helpVisible, setHelpVisible] = useState(false);\n  const [tooltipsVisible, setTooltipsVisible] = useState(false);\n\n  const [render3D, setRender3D] = useState(false);\n\n  ////////////////////\n  // EVENT HANDLERS //\n  ////////////////////\n\n  // GENERAL\n\n  // Pauses the animation entirely (same effect as setting the general animation speed to 0.0)\n  const togglePause = (e) => {\n    if(e) e.target.blur();\n    WAC.setPaused(!paused);\n    setPaused(!paused);\n  };\n\n  const changeAnimationSpeed = (delta) => {\n    WAC.changeAnimationSpeed(delta);\n  };\n\n  const updateScale = (amount) => {\n    WAC.changeScale(amount);\n  }\n\n  const randomize = (e) => {\n    if(e) e.target.blur();\n    WAC.randomize();\n    refresh();\n  }\n\n  const handleRecording = (e, recording) => {\n    if(e) e.target.blur();\n    if(recording) {\n      WAC.startRecording(60);\n    } else {\n      WAC.stopRecording();\n    }\n  }\n\n  const set3D = (state) => {\n    WAC.setRender3D(state);\n    setRender3D(WAC.render3D);\n  }\n\n  const toggle3D = (e) => {\n    set3D(!render3D);\n  };\n\n\n  // Displays the help modal\n  const toggleHelp = (e) => {\n    if(e) e.target.blur();\n    const visible = !helpVisible;\n    setHelpVisible(visible);\n\n    const handleClose = (e) => {\n      // If escape is pressed or the canvas is clicked, close the modal\n      if((e.key && e.key === \"Escape\") || e.type === \"click\") {\n        setHelpVisible(false);\n\n        // And remove the listener\n        window.removeEventListener(\"keydown\", handleClose);\n        canvasRef.current.removeEventListener(\"click\", handleClose, true);\n      }\n    };\n\n    // If visible, subscribe to click events on the canvas, and listen\n    // for the escape key being pressed. Both these events should close the modal\n    if(visible) {\n      canvasRef.current.addEventListener(\"click\", handleClose, true);\n      window.addEventListener(\"keydown\", handleClose);\n    } \n  }\n\n  const toggleTooltips = (e) => {\n    if(e) e.target.blur();\n    setTooltipsVisible(!tooltipsVisible);\n  }\n\n  // KEYBOARD INPUT\n  // User input through keyboard shortcuts\n  const shortcuts = [\n    {\n      keys: ' ', \n      action: (e) => {\n        togglePause();\n      },\n      onHeld: false,\n      description: \"Toggle pause\"\n    },\n    {\n      keys: '-',\n      action: (e) => {\n        changeAnimationSpeed(-0.05);\n      },\n      onHeld: true,\n      description: \"Decrease animation speed\"\n    },\n    { \n      keys: '+', \n      action: (e) => {\n        changeAnimationSpeed(0.05);\n      },\n      onHeld: true,\n      description: \"Increase animation speed\"\n    },\n    { \n      keys: 'q', \n      action: (e) => {\n        updateScale(0.02);\n      },\n      onHeld: true,\n      description: \"Zoom out\"\n    },\n    { \n      keys: 'e', \n      action: (e) => {\n        updateScale(-0.02);\n      },\n      onHeld: true,\n      description: \"Zoom in\"\n    },\n    { \n      keys: ['ArrowLeft', 'a'], \n      action: () => {\n        handleMovement([-10, 0]);\n      },\n      onHeld: true,\n      description: \"Move left\"\n    },\n    { \n      keys: ['ArrowRight', 'd'], \n      action: () => {\n        handleMovement([10, 0]);\n      },\n      onHeld: true,\n      description: \"Move right\"\n    },\n    { \n      keys: ['ArrowUp', 'w'], \n      action: () => {\n        handleMovement([0, 10]);\n      },\n      onHeld: true,\n      description: \"Move upwards\"\n    },\n    { \n      keys: ['ArrowDown', 's'], \n      action: () => {\n        handleMovement([0, -10]);\n      },\n      onHeld: true,\n      description: \"Move downwards\"\n    },\n    { \n      keys: 'r', \n      action: () => {\n        randomize();\n      },\n      onHeld: false,\n      description: \"Randomize controller parameters\"\n    },\n    {\n      keys: 'c',\n      action: (e) => {\n        handleCanvasDownload(e);\n      },\n      onHeld: false,\n      description: \"Download current frame as PNG\"\n    },\n    { \n      keys: 'n', \n      action: () => {\n        handleRecording();\n      },\n      onHeld: false,\n      description: \"Start/stop recording\"\n    },\n    { \n      keys: 'h', \n      action: () => {\n        toggleHelp();\n      },\n      onHeld: false,\n      description: \"Hide/show this help popup\"\n    },\n    {\n      keys: '3',\n      action: () => {\n        toggle3D();\n      },\n      onHeld: false,\n      description: \"Toggle 3D mode\"\n    }\n  ];\n\n  const handleMovement = (offset) => {\n    WAC.move(offset);\n  }\n\n  // MOUSE INPUT\n\n  // Zoom the view on user scroll (same effect as in changing the \"scale\" slider)\n  const handleScroll = (event) => {\n    WAC.changeScale(Math.sign(event.deltaY) * 0.1, [event.clientX, event.clientY]);\n  }\n\n  // Sets the anchor point and stores the previous offset\n  // These values will then be used to calculate the new position of the view\n  const handleMouseDown = (event) => {\n    WAC.setAnchor([event.clientX, event.clientY]);\n  }\n\n  // Register when the mouse is released\n  // This will be triggered if the mouse button is let go, or if the\n  // mouse leaves the canvas area\n  const handleMouseReleased = (event) => {\n    WAC.liftAnchor();\n  }\n\n  // Will be called if the mouse is moved\n  // Handles anchor movement (action will only be performed if the anchor position is set)\n  const handleMouseMoved = (event) => {\n    WAC.anchorMove([event.clientX, event.clientY]);\n  }\n\n  // IMPORT/EXPORT\n\n  // Handle canvas download \n  const handleCanvasDownload = (event) => {\n    // Capture the next frame and prompt a download using a callback function\n    // This is required since the canvas has to be captured after the render\n    // Otherwise, the resulting image will be blank\n    WAC.captureFrame((dataURL) => {\n      promptDownload(dataURL, \"canvas.png\");\n    });\n  };\n\n  // Handle settings download\n  const handleSettingsDownload = (event) => {\n    // Downloads the current settings of the texture controller\n    downloadJSON(\n      JSON.stringify(WAC.exportSettings(), null, 2), \n      \"settings.json\"\n    );\n    event.currentTarget.blur();\n  };\n\n  // Function for prompting the user with a file chooser window\n  const handleSettingsImport = (event) => {\n    fileInputRef.current.click();\n    event.currentTarget.blur();\n  };\n\n  // Sets the current settings file from an input event\n  // Is called when the user chooses a file in the dialog prompted by \n  // the handleSettingsImport function\n  const handleInputChange = (event) => {\n    // The selected file\n    const file = event.target.files[0];\n\n    // If non-null...\n    if(file) {\n      // Read file, and import the contents to the texture controller\n      var reader = new FileReader();\n      reader.onload = (f) => {\n        WAC.importSettings(JSON.parse(f.target.result));\n        refresh();\n      };\n\n      reader.readAsText(file);\n    }\n  };\n\n  //////////////////\n  // EFFECT HOOKS //\n  //////////////////\n\n  // Initialize texture controller\n  // A hook is used to ensure that the canvas element has been initialized first\n  useEffect(() => {\n    if(!WAC.isInitialized()) {\n      const canvas = canvasRef.current;\n      const canvas3D = threeCanvasRef.current;\n\n      if(!WAC.initialize(canvas, canvas3D, null)) {\n        throw new Error(\"Warp controlleer failed to initialize\");\n      }\n\n      refresh();\n      //WAC.importSettings(defaultSettings);\n\n      WAC.start(() => {\n        executeHeldActions();\n      });\n    }\n\n    //return () => WAC.stop();\n  });\n\n  // WINDOW RESIZE\n\n  // Handle resize events\n  useLayoutEffect(() => {\n    // Let the warp controller handle the resize\n    const handleResize = () => {\n      WAC.handleResize();\n    }\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  // INPUT LISTENERS\n\n  // Register all global listeners\n  useEffect(() => {\n    // Handle keyboard shortcuts\n    shortcuts.forEach((keyInfo) => {\n      if(!keyInfo.onHeld) {\n        setOnPressed(keyInfo.keys, keyInfo.action);\n      } else {\n        setOnHeld(keyInfo.keys, keyInfo.action);\n      }\n    });\n\n    // Handle zoom \n    canvasRef.current.addEventListener(\"wheel\", handleScroll);\n\n    // For moving the view (both mouseup and mouseout acts as mouse released)\n    canvasRef.current.addEventListener(\"mousedown\", handleMouseDown);\n    canvasRef.current.addEventListener(\"mouseup\", handleMouseReleased);\n    canvasRef.current.addEventListener(\"mouseout\", handleMouseReleased);\n    canvasRef.current.addEventListener(\"mousemove\", handleMouseMoved);\n\n    const canvasCopy = canvasRef.current;\n\n    // Remove all listeners on re-render\n    return () => {\n      canvasCopy.removeEventListener(\"wheel\", handleScroll);\n      canvasCopy.removeEventListener(\"mousedown\", handleMouseDown);\n      canvasCopy.removeEventListener(\"mouseup\", handleMouseReleased);\n      canvasCopy.removeEventListener(\"mouseout\", handleMouseReleased);\n      canvasCopy.removeEventListener(\"mousemove\", handleMouseMoved);\n    };\n  });\n\n  /////////////\n  // BUTTONS //\n  /////////////\n  const captureButton = (\n    <Button\n      key={\"captureButton\"}\n      name={\"Capture Frame\"}\n      onClick={handleCanvasDownload}\n      description={\"Save a single frame as a PNG image\"}\n    />\n  );\n  \n  const pauseButton = (\n    <Button\n      key={\"pauseButton\"}\n      name={\"Pause\"}\n      activeName={\"Play\"}\n      onClick={togglePause}\n      state={paused}\n      description={\"Pause/play the animation\"}\n    />\n  )\n\n  const threeDButton = (\n    <Button\n      key={\"threeDButton\"}\n      name={\"Enable 3D\"}\n      activeName={\"Disable 3D\"}\n      onClick={toggle3D}\n      state={render3D}\n      description={\"Toggle 3D view\"}\n    />\n  )\n\n  const recordButton = (\n    <Button \n      key={\"recordButton\"}\n      name={\"Record\"}\n      activeName={\"Stop recording\"}\n      onClick={handleRecording}\n      description={\"Record the animation (the recording will be a zipped archive of sequential PNG images\"}\n    />\n  );\n\n  const importButton = (\n    <Button\n      key={\"importButton\"}\n      name={\"Import\"}\n      onClick={handleSettingsImport}\n      description={\"Import a JSON file of settings\"}\n    >\n      <input \n        ref={fileInputRef} \n        type=\"file\" \n        style={{ display: \"none\" }}\n        onChange={handleInputChange}\n        accept=\"application/JSON\"\n      />\n    </Button>\n  );\n\n  const exportButton = (\n    <Button\n      key={\"exportButton\"}\n      name={\"Export\"}\n      onClick={handleSettingsDownload}\n      description={\"Export a JSON file of the current settings\"}\n    />\n  );\n\n  const randomizeButton = (\n    <Button\n      key={\"randomizeButton\"}\n      name={\"Randomize\"}\n      onClick={randomize}\n      description={\"Randomize the settings\"}\n    />\n  );\n\n  const helpButton = (\n    <Button\n      key={\"helpButton\"}\n      name={\"?\"}\n      activeName={\"?\"}\n      onClick={toggleHelp}\n      state={helpVisible}\n      radius={35}\n      description={\"Display a help dialog with information about the application\"}\n    />\n  );\n  \n  const tooltipButton = (\n    <Button\n      key={\"tooltipButton\"}\n      name=\"Show Tooltips\"\n      activeName=\"Hide Tooltips\"\n      onClick={toggleTooltips}\n      description={\"Toggle tooltips\"}\n    />\n  );\n\n  const createContactButton = (icon, alt, link, description) => {\n    const handleClick = () => {\n      window.open(link, \"_blank\");\n    };\n\n    return(<Button\n        key={link}\n        name={alt}\n        hideName={true}\n        onClick={handleClick}\n        description={description}\n      >\n        <img className=\"icon-link\" src={icon} alt={alt} />\n      </Button>);\n  };\n\n  const instagramButton = createContactButton(instagramIcon, \"Instagram\", instagramLink, \"Personal instagram profile, dedicated to generative art\");\n  const repositoryButton = createContactButton(githubIcon, \"Github\", repositoryLink, \"The repository for this project\");\n  const emailButton = createContactButton(emailIcon, \"Email\", emailLink, \"Email, the most reliable way of reaching me\");\n\n  ///////////\n  // OTHER //\n  ///////////\n  const separator = (\n    <div \n      className=\"separator-container\"\n      key={\"separator\"}\n    >\n      <span className=\"separator\">|</span>\n    </div>\n  );\n\n\n  //////////\n  // BODY //\n  //////////\n\n  // Setup for data panel visible in the \"render\" category of the control panel\n  const dataPanel = () => {\n    const entries = {\n      frameRate: {\n        setterCallback: (setter) => {\n          WAC.addUpdateCallback(() => {\n            setter(WAC.getFrameRate());\n          });\n        }\n      },\n      avgFrameRate: {\n        setterCallback: (setter) => {\n          WAC.addUpdateCallback(() => {\n            setter(Math.round(WAC.getAverageFrameRate()));\n          });\n        }\n      },\n      dimensions: {\n        setterCallback: (setter) => {\n          WAC.addResizeCallback((dimensions) => {\n            setter(Math.round(dimensions[0]) + \"x\" + Math.round(dimensions[1]));\n          });\n        }\n      }\n    };\n\n    return (\n      <DataPanel\n        entries={entries}\n      />\n    )\n  }\n\n  // Setup for sidebar categories, with all relevant data\n  const createSidebarCategories = () => {\n    const createCategory = (controller, before, after, name, description, callback) => {\n      return {\n        attributes: WAC.getAttributes(controller),\n        getter: (name) => WAC.getValue(controller, name),\n        setter: (name, value) => WAC.updateValue(controller, name, value),\n        default: (name) => WAC.getDefault(controller, name),\n        controller: controller,\n        separator: \".\",\n        before: before,\n        after: after,\n\n        name: name,\n        description: description,\n\n        onClickCallback: callback\n      }\n    };\n\n    return {\n      texture: createCategory(\"TXC\", null, null, \"Texture\", \"Settings for the overall texture, warp effect and animation\"),\n      color: createCategory(\"CC\", null, null, \"Color\", \"Settings for hue, saturation, brightness, color balance, and so on\"),\n      render: createCategory(\"RC\", \n        dataPanel(),\n        [captureButton, pauseButton, recordButton],\n        \"Render\",\n        \"Settings for resolution, multisampling, recording, and so on\"\n      ),\n      three: createCategory(\"TDC\", null, null, \"3D\", \"Settings for 3D mode\", (isActive) => {\n        if(!isActive) set3D(true);\n      })\n    }\n  };\n\n  // Setup for topbar, with all buttons and other components\n  const topbarComponents = {\n    left: [\n      helpButton,\n      separator,\n      threeDButton,\n      captureButton,\n      pauseButton, \n    ],\n    center: [\n      randomizeButton,\n      separator,\n      importButton,\n      exportButton,\n    ],\n    right: [\n      tooltipButton,\n      instagramButton,\n      repositoryButton,\n      emailButton\n    ]\n  }\n\n  const textureCanvas = (\n    <canvas \n      className={\"canvas\" + (render3D ? \" canvas--hidden\" : \"\")}\n      ref={canvasRef}\n    />\n  );\n\n  const threeCanvas = (\n    <canvas\n      className={\"canvas\" + (!render3D ? \" canvas--hidden\" : \"\")}\n      ref={threeCanvasRef}\n    />\n  );\n\n  return (\n      /* Root container */\n      <div className=\"canvas-container\">\n        { !WAC.isInitialized() ? \"\" :\n\n          <ControlPanel\n            categories={createSidebarCategories()}\n            topbar={topbarComponents}\n            showTooltip={tooltipsVisible}\n          />\n        }\n\n        { /* Canvas for WebGL context */ }\n        { textureCanvas }\n        { threeCanvas }\n        { \n        // Help page with contents\n          <HelpPage \n            mainTitle={\"Surfaces\"}\n            visibility={helpVisible}\n            shortcuts={shortcuts}\n            onCloseCallback={() => toggleHelp()}\n          />\n        }\n      </div>\n  )\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport const useKeyboardInput = () => {\n  // The states of each key\n  // If a key is pressed, the corresponding property will be set to true\n  // If a key is not pressed, its corresponding property will either not exist \n  // or be set to false\n  const keyStates = useRef({}); \n\n  // The actions that are executed when a key is pressed (one-time action)\n  const pressedActions = useRef({});\n\n  // Actions executed when a key is held (each time executeHeldActions is run)\n  const heldActions = useRef({});\n\n  // Updates the key states\n  const onKeyAction = (e) => {\n    const key = e.key; // The current key name/value\n    const state = e.type === \"keydown\"; // True if pressed, false if not\n\n    // If the key is pressed but wasn't previously, execute the corresponding\n    // press action\n    if(state && !isHeld(key)) {\n      if(pressedActions.current[key]) {\n        e.preventDefault();\n        pressedActions.current[key](e); // Execute action\n      }\n    }\n\n    // Update the key states\n    keyStates.current[key] = state;\n  };\n\n  // Returns true if a key is held\n  const isHeld = (key) => {\n    return keyStates.current[key] | false;\n  }\n\n  // Helper function for linking an action to a specific key press/hold\n  // Multiple keys can be linked at the same time, if an array with key names is passed\n  const setActions = (keys, action, object) => {\n    if(Array.isArray(keys)) {\n      for(const key of keys) {\n        setActions(key, action, object);\n      }\n      return;\n    } \n    object[keys] = action;\n  }\n\n  // Links an action to a key press\n  const setOnPress = (keys, action) => {\n    setActions(keys, action, pressedActions.current);\n  };\n\n  // Links an action to a key hold\n  const setOnHeld = (keys, action) => {\n    setActions(keys, action, heldActions.current);\n  };\n\n  // Executes all actions associated with currently held keys\n  const executeHeldActions = () => {\n    Object.entries(heldActions.current).forEach(([key, action]) => {\n      if(isHeld(key)) action();\n    });\n  };\n\n  useEffect(() => {\n    // Add handler to both keydown and keyup events, since it can handle both\n    window.addEventListener(\"keydown\", onKeyAction);\n    window.addEventListener(\"keyup\", onKeyAction);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyAction);\n      window.removeEventListener(\"keyup\", onKeyAction);\n    };\n  });\n\n  return [isHeld, setOnPress, setOnHeld, executeHeldActions];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}